{"ast":null,"code":"import moment from 'moment';\nexport default class Util {\n  getDate(str) {\n    var date = moment(str);\n    var dateComponent = date.utc().format('YYYY - MM - DD');\n    return dateComponent;\n  }\n\n  getTime(str) {\n    var date = moment(str);\n    var timeComponent = date.utc().format('HH:mm:ss');\n    return timeComponent;\n  }\n\n  sortDates(arr) {\n    arr.sort(function compare(a, b) {\n      var dateA = new Date(a.created);\n      var dateB = new Date(b.created);\n      return dateA - dateB;\n    });\n    return arr;\n  }\n\n  sortDates(aSet) {\n    Array.from(aSet).sort(function compare(a, b) {\n      var dateA = new Date(a.created);\n      var dateB = new Date(b.created);\n      return dateA - dateB;\n    });\n    return arr;\n  } //idle\n  //infocus\n  //using\n  //using_by_other\n\n  /*checkAgentState(agent, monitoring_grid, browser_admin_id, agents_in_focus, laser_agents){\n      return new Promise((resolve, reject) => {\n          const id = agent.agent._id;\n           monitoring_grid.map(row => {\n              if(row){\n                  //Object.keys(row)[0] - this gives us the admin id\n                  //row[Object.keys(row)[0]];- this gives us the admin content ({user: ...., agents: [...]})\n                   var admin_content = row[Object.keys(row)[0]];\n                  var admin_id = Object.keys(row)[0];\n                   var agent_found_in_admin = false;\n                   admin_content.agents.map( (agent_id, index)  => {\n                      if(id===agent_id){\n                          agent_found_in_admin = true;\n                          //check if its the browsers admin that is using the agent\n                          if(admin_id===browser_admin_id){\n                              //set the status\n                              Object.assign(agent.agent, {status: \"using\"});\n                          }\n                          else{\n                              //its not the browsers admin that is using the agent, its another admin\n                              Object.assign(agent.agent, {status: \"using_by_other\"});\n                          }\n                           //replace the agent in the list of agents\n                          var new_laser_agents = laser_agents.map(laser_agent => {\n                              if(laser_agent.agent._id === id){\n                                  return agent;\n                              }\n                              else{\n                                  return laser_agent;\n                              }\n                          })\n                           resolve(new_laser_agents);\n                      }\n                       if(index === (admin_content.agents.length-1)){\n                          //last index\n                          //if we get here it means the agent was not found in one of the admins agents array\n                          //we check if the agent was found in the agents_in_focus  array\n                           var found_agent_in_focus_array = false\n                           agents_in_focus.map((agent_in_focus_id, ind) => {\n                              if(id === agent_in_focus_id){\n                                  Object.assign(agent, {status: \"infocus\"});\n                                  found_agent_in_focus_array = true;\n                              }\n                               if(ind === (agents_in_focus.length - 1)){ //this is the last index\n                                  if(!found_agent_in_focus_array){\n                                      //the agent was not found in the agents in focus array\n                                      Object.assign(agent.agent, {status: \"idle\"});\n                                  }\n                                   var new_laser_agents = laser_agents.map(laser_agent => {\n                                      if(laser_agent.agent._id === id){\n                                          return agent;\n                                      }\n                                      else{\n                                          return laser_agent;\n                                      }\n                                  })\n          \n                                  resolve(new_laser_agents);\n                              }\n                          })\n                      }\n                  })\n              }\n              else{\n                  //the monitoring grid is possibly empty\n              }\n          });\n      })\n  }*/\n  //All we are doing here is updting the location while inheriting the status\n\n\n  updateAgentLocation(agent, laser_agents, monitoring_grid, browser_admin_id) {\n    return new Promise((resolve, reject) => {\n      parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id).then(result => {\n        resolve(result);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  checkIfEmergencyMonitoredByOtherAdmin(monitoring_grid, emergency, browser_admin_id) {\n    return new Promise((resolve, reject) => {\n      var found = false;\n\n      if (monitoring_grid && monitoring_grid.length > 0) {\n        monitoring_grid.map((row, index) => {\n          if (row) {\n            if (row.admin_id !== browser_admin_id) {\n              if (row.emergency._id === emergency._id) {\n                found = true;\n              }\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              resolve(found);\n            }\n          }\n        });\n      } else {\n        resolve(found);\n      }\n    });\n  }\n\n  setEmergencyOnMonitoringGrid(emergency, monitoring_grid, admin_id) {\n    //to return a fresh monitoring grid\n    return new Promise((resolve, reject) => {\n      var found = false;\n\n      if (monitoring_grid && monitoring_grid.length > 0) {\n        var new_monitoring_grid = [];\n        monitoring_grid.map((row, index) => {\n          if (row) {\n            if (row.admin_id === admin_id) {\n              found = true;\n              row = {\n                admin_id: admin_id,\n                emergency: emergency,\n                agents: row.agents\n              };\n              new_monitoring_grid.push(row);\n            } else {\n              new_monitoring_grid.push(row);\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              if (!found) {\n                new_monitoring_grid.push({\n                  admin_id: admin_id,\n                  emergency: emergency,\n                  agents: []\n                });\n              } //we are at the final index\n\n\n              resolve(new_monitoring_grid);\n            }\n          }\n        });\n      } else {\n        monitoring_grid.push({\n          admin_id: admin_id,\n          emergency: emergency,\n          agents: []\n        });\n        resolve(monitoring_grid);\n      }\n    });\n  }\n\n  setAgentOnMonitoringGridAndChangeAgentStatus(agent, monitoring_grid, admin_id, laser_agents) {\n    //to return a fresh monitoring grid\n    return new Promise((resolve, reject) => {\n      var found = false;\n\n      if (monitoring_grid.length > 0) {\n        var new_monitoring_grid = [];\n        monitoring_grid.map((row, index) => {\n          if (row) {\n            if (row.admin_id === admin_id) {\n              found = true;\n\n              if (row.agents.indexOf(agent.agent._id) === -1) {\n                //the agents id does not exist in the list of agents, so we add it\n                row.agents.push(agent.agent._id);\n              }\n\n              new_monitoring_grid.push(row);\n            } else {\n              new_monitoring_grid.push(row);\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              //we are at the final index\n              //we change the status of the agent on the laser_agents array and return the laser_agents array as well\n              for (var i = 0; i < laser_agents.length; i++) {\n                if (laser_agents[i].agent._id === agent.agent._id) {\n                  //we have found the agent to update\n                  laser_agents[i].status = \"using\";\n                  break;\n                }\n              }\n\n              resolve([new_monitoring_grid, laser_agents]);\n            }\n          }\n        });\n      } else {\n        resolve(monitoring_grid, laser_agents);\n      }\n    });\n  }\n\n  checkIfEmergencyMonitoredByBrowserAdmin(browser_admin_id, monitoring_grid) {\n    //here we are just checking if the browser admin is actually monitoring an emergency\n    return new Promise((resolve, reject) => {\n      var monitoring = false;\n\n      if (monitoring_grid.length > 0) {\n        monitoring_grid.map((row, index) => {\n          if (row) {\n            if (row.admin_id === browser_admin_id) {\n              if (row.emergency) {\n                //yes we are monitoring an emergency\n                monitoring = true;\n              }\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              //we are at the final index\n              resolve(monitoring);\n            }\n          }\n        });\n      } else {\n        resolve(monitoring);\n      }\n    });\n  }\n\n  setAgentsInFocus(agents_in_focus, emergency, laser_agents) {\n    return new Promise((resolve, reject) => {\n      var new_laser_agents = [];\n      laser_agents.map((agent, index) => {\n        if (agent.sub_admin_address && emergency.sub_admin_address && agent.sub_admin_address === emergency.sub_admin_address) {\n          //the agent is in the same subadmin address as the emergency\n          //we check if the agent is being used by the current admin or anothe admin\n          if (agent.status !== \"using\" && agent.status !== \"using_by_other\") {\n            agent.status = \"infocus\";\n          }\n\n          if (agents_in_focus.indexOf(agent.agent._id) === -1) {\n            //agent is not in agents_in_focus array\n            agents_in_focus.push(agent.agent._id);\n          }\n\n          new_laser_agents.push(agent);\n        } else {\n          new_laser_agents.push(agent);\n        }\n\n        if (index === laser_agents.length - 1) {\n          //last index\n          resolve([new_laser_agents, agents_in_focus]);\n        }\n      });\n    });\n  }\n\n  checkIfOtherAdminIsUsingAgent(browser_admin_id, agent, monitoring_grid) {\n    return new Promise((resolve, reject) => {\n      var found = false;\n\n      if (monitoring_grid.length > 0) {\n        for (var index = 0; index < monitoring_grid.length; index++) {\n          var row = monitoring_grid[0];\n\n          if (row) {\n            if (row.admin_id !== browser_admin_id) {\n              if (row.agents.indexOf(agent.agent._id) !== -1) {\n                found = true;\n                resolve(found);\n                break;\n              }\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              resolve(found);\n            }\n          }\n        }\n      } else {\n        resolve(found);\n      }\n    });\n  }\n\n  getAdminEmergencyMonitored(browser_admin_id, monitoring_grid) {\n    return new Promise((resolve, reject) => {\n      if (monitoring_grid.length > 0) {\n        for (var index = 0; index < monitoring_grid.length; index++) {\n          var row = monitoring_grid[index];\n\n          if (row) {\n            if (row.admin_id === browser_admin_id) {\n              resolve(row);\n              break;\n            }\n\n            if (index === monitoring_grid.length - 1) {\n              resolve(null);\n            }\n          }\n        }\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents_array) {\n    if (assigned_agents_array && assigned_agents_array.length > 0) {\n      var found = false;\n      assigned_agents_array.map((assigned_agent, index) => {\n        if (assigned_agent.agent._id === agent.agent._id) {\n          found = true;\n          assigned_agents_array.splice(index, 1, agent);\n        }\n      });\n\n      if (!found) {\n        assigned_agents_array.push(agent);\n      }\n    } else {\n      assigned_agents_array = [];\n      assigned_agents_array.push(agent);\n    }\n\n    return assigned_agents_array;\n  }\n\n  removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents_array) {\n    if (assigned_agents_array && assigned_agents_array.length > 0) {\n      assigned_agents_array.map((assigned_agent, index) => {\n        if (assigned_agent.agent._id === agent.agent._id) {\n          assigned_agents_array.splice(index, 1);\n        }\n      });\n    } else {\n      assigned_agents_array = [];\n      assigned_agents_array.push(agent);\n    }\n\n    return assigned_agents_array;\n  }\n\n  reconcileAssignedAgentsListWithMonitoringGrid(browser_admin_id, assigned_agents_array, monitoring_grid) {\n    return new Promise((resolve, reject) => {\n      var laser_agents = [];\n\n      if (monitoring_grid.length > 0) {\n        var monitoring_grid_agents_list;\n        var new_assigned_agents_array = [];\n\n        for (var i = 0; i < monitoring_grid.length; i++) {\n          if (monitoring_grid[i].admin_id === browser_admin_id) {\n            monitoring_grid_agents_list = monitoring_grid[i].agents.concat([]);\n            break;\n          }\n        } //we have our agents from the monitoring grid\n\n\n        if (monitoring_grid_agents_list && monitoring_grid_agents_list.length > 0) {\n          //there are agents in the monitoring grid for the admin, meaning agents were assigned\n          assigned_agents_array.map(assigned_agent => {\n            if (monitoring_grid_agents_list.indexOf(assigned_agent.agent._id) !== -1) {\n              //means the assigned agent is present in the monitoring grid. The agent is good to proceed into the laser_agents array\n              laser_agents.push(assigned_agent);\n              new_assigned_agents_array.push(assigned_agent);\n            }\n          });\n          resolve([new_assigned_agents_array, laser_agents]);\n        } else {\n          laser_agents = [];\n          resolve([new_assigned_agents_array, laser_agents]);\n        }\n      } else {\n        resolve([assigned_agents_array, laser_agents]);\n      }\n    });\n  }\n\n  reconcileAllAgentsWithMonitoringGrid(laser_agents, monitoring_grid, browser_admin_id) {\n    return new Promise((resolve, reject) => {\n      var new_laser_agents = [];\n\n      if (laser_agents.length > 0) {\n        laser_agents.map((laser_agent, index) => {\n          checkWhoIsUsingTheAgent(browser_admin_id, laser_agent, monitoring_grid).then(who => {\n            var new_agent = Object.assign(laser_agent, {\n              status: who\n            });\n            new_laser_agents.push(new_agent);\n\n            if (index === laser_agents.length - 1) {\n              resolve(new_laser_agents);\n            }\n          }).catch(err => {\n            new_laser_agents.push(laser_agent);\n\n            if (index === laser_agents.length - 1) {\n              resolve(new_laser_agents);\n            }\n          });\n        });\n      } else {\n        resolve([]);\n      }\n    });\n  }\n\n  removeAgentFromBrowserAdminMonitoringGrid(agent, browser_admin_id, monitoring_grid, laser_agents) {\n    return new Promise((resolve, reject) => {\n      if (monitoring_grid.length > 0) {\n        var new_monitoring_grid = [];\n\n        for (var i = 0; i < monitoring_grid.length; i++) {\n          if (monitoring_grid[i].admin_id === browser_admin_id) {\n            if (monitoring_grid[i].agents.indexOf(agent.agent._id) !== -1) {\n              monitoring_grid[i].agents.splice(monitoring_grid[i].agents.indexOf(agent.agent._id), 1);\n            }\n\n            new_monitoring_grid.push(monitoring_grid[i]);\n\n            if (laser_agents.length > 0) {\n              for (var j = 0; j < laser_agents.length; j++) {\n                if (laser_agents[j].agent._id === agent.agent._id) {\n                  agent.status = \"idle\";\n                  laser_agents.splice(j, 1, agent);\n                  break;\n                }\n              }\n            }\n          } else {\n            new_monitoring_grid.push(monitoring_grid[i]);\n          }\n\n          if (i === monitoring_grid.length - 1) {\n            resolve([new_monitoring_grid, laser_agents]);\n          }\n        }\n      } else {\n        resolve([monitoring_grid, laser_agents]);\n      }\n    });\n  }\n\n  getAgentFromAssignedAgentsInPersistence(assigned_agents_list, agent_id) {\n    return new Promise((resolve, reject) => {\n      for (var i = 0; i < assigned_agents_list.length; i++) {\n        if (assigned_agents_list[i].agent._id === agent_id) {\n          resolve(assigned_agents_list[i]);\n          break;\n        }\n      }\n\n      resolve(null);\n    });\n  }\n\n}\n\nfunction parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id) {\n  return new Promise((resolve, reject) => {\n    var agent_found = false;\n    var new_laser_agents = [];\n\n    if (laser_agents.length === 0) {\n      checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid).then(stat => {\n        var new_agent = Object.assign(agent, {\n          status: stat\n        });\n        new_laser_agents.push(new_agent);\n        resolve(new_laser_agents);\n      }).catch(err => {\n        var new_agent = Object.assign(agent, {\n          status: \"idle\"\n        });\n        new_laser_agents.push(new_agent);\n        resolve(new_laser_agents);\n      });\n    } else {\n      laser_agents.map((laser_agent, index) => {\n        if (laser_agent.agent._id === agent.agent._id) {\n          agent_found = true;\n          var new_agent = Object.assign(agent, {\n            status: laser_agent.status\n          }); //inherit the status\n\n          new_laser_agents.push(new_agent);\n        } else {\n          new_laser_agents.push(laser_agent);\n        }\n\n        if (index === laser_agents.length - 1) {\n          //we are on the last index\n          if (agent_found) {\n            checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid).then(stat => {\n              var new_agent = Object.assign(agent, {\n                status: stat\n              });\n              new_laser_agents.push(new_agent);\n              resolve(new_laser_agents);\n            }).catch(err => {\n              var new_agent = Object.assign(agent, {\n                status: \"idle\"\n              });\n              new_laser_agents.push(new_agent);\n              resolve(new_laser_agents);\n            });\n          } else {\n            resolve(new_laser_agents);\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid) {\n  return new Promise((resolve, reject) => {\n    var status = \"idle\";\n\n    if (monitoring_grid.length > 0) {\n      for (var index = 0; index < monitoring_grid.length; index++) {\n        var row = monitoring_grid[index];\n\n        if (row) {\n          if (row.admin_id === browser_admin_id) {\n            //admins row\n            if (row.agents.indexOf(agent.agent._id) !== -1) {\n              resolve(\"using\");\n              break;\n            }\n          } else {\n            //other admins row\n            if (row.agents.indexOf(agent.agent._id) !== -1) {\n              resolve(\"using_by_other\");\n              break;\n            }\n          }\n\n          if (index === monitoring_grid.length - 1) {\n            resolve(status);\n          }\n        }\n      }\n    } else {\n      resolve(status);\n    }\n  });\n}","map":{"version":3,"names":["moment","Util","getDate","str","date","dateComponent","utc","format","getTime","timeComponent","sortDates","arr","sort","compare","a","b","dateA","Date","created","dateB","aSet","Array","from","updateAgentLocation","agent","laser_agents","monitoring_grid","browser_admin_id","Promise","resolve","reject","parseLaserAgents","then","result","catch","err","checkIfEmergencyMonitoredByOtherAdmin","emergency","found","length","map","row","index","admin_id","_id","setEmergencyOnMonitoringGrid","new_monitoring_grid","agents","push","setAgentOnMonitoringGridAndChangeAgentStatus","indexOf","i","status","checkIfEmergencyMonitoredByBrowserAdmin","monitoring","setAgentsInFocus","agents_in_focus","new_laser_agents","sub_admin_address","checkIfOtherAdminIsUsingAgent","getAdminEmergencyMonitored","addAgentToListOfAssignedAgentsForPersistence","assigned_agents_array","assigned_agent","splice","removeAgentFromListOfAssignedAgentsForPersistsnce","reconcileAssignedAgentsListWithMonitoringGrid","monitoring_grid_agents_list","new_assigned_agents_array","concat","reconcileAllAgentsWithMonitoringGrid","laser_agent","checkWhoIsUsingTheAgent","who","new_agent","Object","assign","removeAgentFromBrowserAdminMonitoringGrid","j","getAgentFromAssignedAgentsInPersistence","assigned_agents_list","agent_id","agent_found","stat"],"sources":["/Users/user/laser/laser_dashboard_frontend/client/src/utils/Utils.js"],"sourcesContent":["import moment from 'moment';\n\nexport default class Util{\n    getDate(str){\n        var date = moment(str);\n        var dateComponent = date.utc().format('YYYY - MM - DD');\n\n        return dateComponent;\n    }\n\n    getTime(str){\n        var date = moment(str);\n        var timeComponent = date.utc().format('HH:mm:ss');\n\n        return timeComponent;\n    }\n\n    sortDates(arr){\n        arr.sort(function compare(a, b) {\n            var dateA = new Date(a.created);\n            var dateB = new Date(b.created);\n            return dateA - dateB;\n        });\n          \n        return arr;\n    }\n    \n    sortDates(aSet){\n        Array.from(aSet).sort(function compare(a, b) {\n            var dateA = new Date(a.created);\n            var dateB = new Date(b.created);\n            return dateA - dateB;\n        });\n          \n        return arr;\n    }\n\n    //idle\n    //infocus\n    //using\n    //using_by_other\n\n    /*checkAgentState(agent, monitoring_grid, browser_admin_id, agents_in_focus, laser_agents){\n        return new Promise((resolve, reject) => {\n            const id = agent.agent._id;\n\n            monitoring_grid.map(row => {\n                if(row){\n                    //Object.keys(row)[0] - this gives us the admin id\n                    //row[Object.keys(row)[0]];- this gives us the admin content ({user: ...., agents: [...]})\n\n                    var admin_content = row[Object.keys(row)[0]];\n                    var admin_id = Object.keys(row)[0];\n\n                    var agent_found_in_admin = false;\n\n                    admin_content.agents.map( (agent_id, index)  => {\n                        if(id===agent_id){\n                            agent_found_in_admin = true;\n                            //check if its the browsers admin that is using the agent\n                            if(admin_id===browser_admin_id){\n                                //set the status\n                                Object.assign(agent.agent, {status: \"using\"});\n                            }\n                            else{\n                                //its not the browsers admin that is using the agent, its another admin\n                                Object.assign(agent.agent, {status: \"using_by_other\"});\n                            }\n\n                            //replace the agent in the list of agents\n                            var new_laser_agents = laser_agents.map(laser_agent => {\n                                if(laser_agent.agent._id === id){\n                                    return agent;\n                                }\n                                else{\n                                    return laser_agent;\n                                }\n                            })\n\n                            resolve(new_laser_agents);\n                        }\n\n                        if(index === (admin_content.agents.length-1)){\n                            //last index\n                            //if we get here it means the agent was not found in one of the admins agents array\n                            //we check if the agent was found in the agents_in_focus  array\n\n                            var found_agent_in_focus_array = false\n\n                            agents_in_focus.map((agent_in_focus_id, ind) => {\n                                if(id === agent_in_focus_id){\n                                    Object.assign(agent, {status: \"infocus\"});\n                                    found_agent_in_focus_array = true;\n                                }\n\n                                if(ind === (agents_in_focus.length - 1)){ //this is the last index\n                                    if(!found_agent_in_focus_array){\n                                        //the agent was not found in the agents in focus array\n                                        Object.assign(agent.agent, {status: \"idle\"});\n                                    }\n\n                                    var new_laser_agents = laser_agents.map(laser_agent => {\n                                        if(laser_agent.agent._id === id){\n                                            return agent;\n                                        }\n                                        else{\n                                            return laser_agent;\n                                        }\n                                    })\n            \n                                    resolve(new_laser_agents);\n                                }\n                            })\n                        }\n                    })\n                }\n                else{\n                    //the monitoring grid is possibly empty\n                }\n            });\n        })\n    }*/\n\n    //All we are doing here is updting the location while inheriting the status\n    updateAgentLocation(agent, laser_agents, monitoring_grid, browser_admin_id){\n        return new Promise((resolve, reject) => {\n            parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id)\n                    .then(result => {\n                        resolve(result);\n                    })\n                    .catch(err => {\n                        reject(err);\n                    })\n        })\n    }\n\n    checkIfEmergencyMonitoredByOtherAdmin(monitoring_grid, emergency, browser_admin_id){\n        return new Promise((resolve, reject) => {\n            var found = false;\n            if(monitoring_grid && monitoring_grid.length > 0){\n                monitoring_grid.map((row, index) => {\n                    if(row){\n                        if(row.admin_id !== browser_admin_id){\n                            if(row.emergency._id === emergency._id){\n                                found = true;\n                            }\n                        }\n    \n                        if(index === (monitoring_grid.length - 1)){\n                            resolve(found);\n                        }\n                    }\n                })\n            }\n            else{\n                resolve(found);\n            }\n        })\n    }\n\n    setEmergencyOnMonitoringGrid(emergency, monitoring_grid, admin_id){ //to return a fresh monitoring grid\n        return new Promise((resolve,reject) => {\n            var found = false;\n\n            if(monitoring_grid && monitoring_grid.length > 0 ){\n                \n                var new_monitoring_grid = [];\n\n                monitoring_grid.map((row, index) => {\n                    if(row){\n                        \n                        if(row.admin_id === admin_id){\n                            found = true;\n\n                            row = {admin_id: admin_id, emergency: emergency, agents: row.agents};\n\n                            new_monitoring_grid.push(row);\n                        }\n                        else{\n                            new_monitoring_grid.push(row);\n                        }\n                        \n                        if(index === (monitoring_grid.length - 1)){\n                            if(!found){\n                                new_monitoring_grid.push({admin_id:admin_id, emergency: emergency, agents: []});\n                            }\n                            //we are at the final index\n                            resolve(new_monitoring_grid);\n                        }\n                    }\n                })\n            }\n            else{\n                monitoring_grid.push({admin_id: admin_id, emergency: emergency, agents: []});\n                \n                resolve(monitoring_grid);\n            }\n        })\n    }\n\n    setAgentOnMonitoringGridAndChangeAgentStatus(agent, monitoring_grid, admin_id, laser_agents){ //to return a fresh monitoring grid\n        return new Promise((resolve,reject) => {\n            var found = false;\n            \n            if(monitoring_grid.length > 0 ){\n                \n                var new_monitoring_grid = [];\n\n                monitoring_grid.map((row, index) => {\n                    if(row){\n                        if(row.admin_id === admin_id){\n                            found = true;\n\n                            if(row.agents.indexOf(agent.agent._id)===-1){\n                                //the agents id does not exist in the list of agents, so we add it\n                                row.agents.push(agent.agent._id);\n                            }\n\n                            new_monitoring_grid.push(row);\n                        }\n                        else{\n                            new_monitoring_grid.push(row);\n                        }\n                        \n                        if(index === (monitoring_grid.length - 1)){\n                            //we are at the final index\n                            //we change the status of the agent on the laser_agents array and return the laser_agents array as well\n                            for(var i = 0; i < laser_agents.length; i++){\n                                if(laser_agents[i].agent._id === agent.agent._id){\n                                    //we have found the agent to update\n                                    laser_agents[i].status = \"using\";\n                                    break;\n                                }\n                            }\n                           \n                            resolve([new_monitoring_grid, laser_agents]);\n                        }\n                    }\n                })\n            }\n            else{\n                resolve(monitoring_grid, laser_agents);\n            }\n        })\n    }\n\n    checkIfEmergencyMonitoredByBrowserAdmin(browser_admin_id, monitoring_grid){\n        //here we are just checking if the browser admin is actually monitoring an emergency\n\n        return new Promise((resolve,reject) => {\n            var monitoring = false;\n\n            if(monitoring_grid.length > 0){\n                monitoring_grid.map((row, index) => {\n                    if(row){\n                        if(row.admin_id === browser_admin_id){\n                            if(row.emergency){\n                                //yes we are monitoring an emergency\n                                monitoring = true;\n                            }\n                        }\n                        \n                        if(index === (monitoring_grid.length - 1)){\n                            //we are at the final index\n                            resolve(monitoring);\n                        }\n                    }\n                });\n            }\n            else{\n                resolve(monitoring);\n            }\n        })\n    }\n\n    setAgentsInFocus(agents_in_focus, emergency, laser_agents){\n        return new Promise((resolve,reject) => {\n\n            var new_laser_agents = [];\n\n            laser_agents.map((agent,index) => {\n                \n                if(agent.sub_admin_address && emergency.sub_admin_address && (agent.sub_admin_address === emergency.sub_admin_address)){\n                    //the agent is in the same subadmin address as the emergency\n                    //we check if the agent is being used by the current admin or anothe admin\n                    if(agent.status !== \"using\" && agent.status !== \"using_by_other\"){\n                        agent.status = \"infocus\"\n                    }\n\n                    if(agents_in_focus.indexOf(agent.agent._id)===-1){\n                        //agent is not in agents_in_focus array\n                        agents_in_focus.push(agent.agent._id);\n                    }\n\n                    new_laser_agents.push(agent);\n                    \n                }\n                else{\n                    new_laser_agents.push(agent);\n                }\n                \n                if(index === (laser_agents.length-1)){\n                    //last index\n                    resolve([new_laser_agents, agents_in_focus]);\n                }\n            })\n        })\n    }\n\n    checkIfOtherAdminIsUsingAgent(browser_admin_id, agent, monitoring_grid){\n        return new Promise((resolve,reject) => {\n            var found = false;\n    \n            if(monitoring_grid.length > 0){\n                for(var index = 0; index< monitoring_grid.length; index++){\n                    var row = monitoring_grid[0];\n    \n                    if(row){\n                        if(row.admin_id !== browser_admin_id){\n                            if(row.agents.indexOf(agent.agent._id) !== -1){\n                                found = true;\n    \n                                resolve(found);\n    \n                                break;\n                            }\n                        }\n                        \n                        if(index === (monitoring_grid.length - 1)){\n                            resolve(found);\n                        }\n                    }\n                }\n            }\n            else{\n                resolve(found);\n            }\n        })\n    }\n\n    getAdminEmergencyMonitored(browser_admin_id, monitoring_grid){\n        return new Promise((resolve,reject) => {\n            if(monitoring_grid.length > 0){\n                \n                for(var index = 0; index < monitoring_grid.length; index++){\n                    var row = monitoring_grid[index];\n    \n                    if(row){\n                        if(row.admin_id === browser_admin_id){\n                            resolve(row);\n                            break;\n                        }\n                        \n                        if(index === (monitoring_grid.length - 1)){\n                            resolve(null);\n                        }\n                    }\n                }\n            }\n            else{\n                resolve(null);\n            }\n        })\n    }\n\n    addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents_array){\n        if(assigned_agents_array && assigned_agents_array.length > 0 ){\n            var found  = false;\n\n            assigned_agents_array.map( (assigned_agent, index) => {\n                if(assigned_agent.agent._id === agent.agent._id){\n                    found = true;\n\n                    assigned_agents_array.splice(index, 1, agent);\n                }\n            })\n\n            if(!found){\n                assigned_agents_array.push(agent);\n            }\n        }\n        else{\n            assigned_agents_array = [];\n            assigned_agents_array.push(agent);\n        }\n\n        return assigned_agents_array;\n    }\n\n    removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents_array){\n        if(assigned_agents_array && assigned_agents_array.length > 0 ){\n            assigned_agents_array.map( (assigned_agent, index) => {\n                if(assigned_agent.agent._id === agent.agent._id){\n                    assigned_agents_array.splice(index, 1);\n                }\n            })\n\n        }\n        else{\n            assigned_agents_array = [];\n            assigned_agents_array.push(agent);\n        }\n\n        return assigned_agents_array;\n    }\n\n    reconcileAssignedAgentsListWithMonitoringGrid(browser_admin_id, assigned_agents_array, monitoring_grid){\n        return new Promise((resolve,reject) => {\n            var laser_agents = [];\n\n            if(monitoring_grid.length > 0){\n                var monitoring_grid_agents_list;\n                var new_assigned_agents_array = [];\n\n                for(var i = 0; i < monitoring_grid.length; i++){\n                    if(monitoring_grid[i].admin_id === browser_admin_id){\n                        monitoring_grid_agents_list = monitoring_grid[i].agents.concat([])\n                        break;\n                    }\n                }\n               \n                //we have our agents from the monitoring grid\n                if(monitoring_grid_agents_list && monitoring_grid_agents_list.length > 0){\n                    //there are agents in the monitoring grid for the admin, meaning agents were assigned\n                    assigned_agents_array.map(assigned_agent => {\n                        if(monitoring_grid_agents_list.indexOf(assigned_agent.agent._id) !== -1){\n                            //means the assigned agent is present in the monitoring grid. The agent is good to proceed into the laser_agents array\n                            laser_agents.push(assigned_agent);\n                            new_assigned_agents_array.push(assigned_agent);\n                        }\n                    })\n\n                    resolve([new_assigned_agents_array, laser_agents])\n                }\n                else{\n                    laser_agents = [];\n\n                    resolve([new_assigned_agents_array, laser_agents]);\n                }\n            }\n            else{\n                resolve([assigned_agents_array, laser_agents])\n            }\n        })\n    }\n\n\n    reconcileAllAgentsWithMonitoringGrid(laser_agents, monitoring_grid, browser_admin_id){\n        return new Promise((resolve,reject) => {\n            var new_laser_agents = [];\n\n            if(laser_agents.length > 0){\n                laser_agents.map((laser_agent, index) => {\n                    checkWhoIsUsingTheAgent(browser_admin_id, laser_agent, monitoring_grid)\n                            .then(who => {\n                                var new_agent = Object.assign(laser_agent, {status:who});\n\n                                new_laser_agents.push(new_agent);\n\n                                if(index === (laser_agents.length - 1)){\n                                    resolve(new_laser_agents);\n                                }\n                            })\n                            .catch(err => {\n                                new_laser_agents.push(laser_agent);\n\n                                if(index === (laser_agents.length - 1)){\n                                    resolve(new_laser_agents);\n                                }\n                            })\n                })\n            }\n            else{\n                resolve([]);\n            }\n        })\n    }\n\n    removeAgentFromBrowserAdminMonitoringGrid(agent, browser_admin_id, monitoring_grid, laser_agents){\n        return new Promise((resolve,reject) => {\n            if(monitoring_grid.length > 0){\n                var new_monitoring_grid = [];\n\n                for(var i = 0; i < monitoring_grid.length; i++){\n                    if(monitoring_grid[i].admin_id === browser_admin_id){\n                        if(monitoring_grid[i].agents.indexOf(agent.agent._id) !== -1){\n                            monitoring_grid[i].agents.splice(monitoring_grid[i].agents.indexOf(agent.agent._id),1);\n                        }\n\n                        new_monitoring_grid.push(monitoring_grid[i]);\n\n                        if(laser_agents.length > 0){\n                            for(var j = 0; j < laser_agents.length; j++){\n                                if(laser_agents[j].agent._id === agent.agent._id){\n                                    agent.status = \"idle\"\n                                    laser_agents.splice(j, 1, agent);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    else{\n                        new_monitoring_grid.push(monitoring_grid[i]);\n                    }\n\n                    if(i === (monitoring_grid.length - 1)){\n                        resolve([new_monitoring_grid, laser_agents]);\n                    }\n                }\n               \n            }\n            else{\n                resolve([monitoring_grid, laser_agents]);\n            }\n        })\n    }\n\n    getAgentFromAssignedAgentsInPersistence(assigned_agents_list, agent_id){\n        return new Promise((resolve, reject) => {\n            for(var i = 0; i < assigned_agents_list.length; i++){\n                if(assigned_agents_list[i].agent._id === agent_id){\n                    resolve(assigned_agents_list[i]);\n                    break;\n                }\n            }\n\n            resolve(null);\n        })\n    }\n\n}\n\nfunction parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id){\n    return new Promise((resolve, reject) =>{\n        var agent_found = false;\n\n        var new_laser_agents = [];\n\n        if(laser_agents.length === 0){\n\n            checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid)\n                        .then(stat => {\n                            var new_agent = Object.assign(agent, {status: stat});\n    \n                            new_laser_agents.push(new_agent);\n\n                            resolve(new_laser_agents);\n                        })\n                        .catch(err => {\n                            var new_agent = Object.assign(agent, {status: \"idle\"});\n    \n                            new_laser_agents.push(new_agent);\n\n                            resolve(new_laser_agents);\n                        })\n        }\n        else{\n            laser_agents.map((laser_agent,index) => {\n                if(laser_agent.agent._id === agent.agent._id){\n                    agent_found = true;\n    \n                    var new_agent = Object.assign(agent, {status:laser_agent.status}); //inherit the status\n    \n                    new_laser_agents.push(new_agent);\n                }\n                else{\n                    new_laser_agents.push(laser_agent);\n                }\n    \n                if(index === (laser_agents.length-1)){\n                    //we are on the last index\n                    \n                    if(agent_found){\n                        checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid)\n                                .then(stat => {\n                                    var new_agent = Object.assign(agent, {status: stat});\n            \n                                    new_laser_agents.push(new_agent);\n\n                                    resolve(new_laser_agents);\n                                })\n                                .catch(err => {\n                                    var new_agent = Object.assign(agent, {status: \"idle\"});\n            \n                                    new_laser_agents.push(new_agent);\n\n                                    resolve(new_laser_agents);\n                                })\n                    }\n                    else{\n                        resolve(new_laser_agents)\n                    }\n                }\n            })\n        }\n    })\n}\n\nfunction checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid){\n    return new Promise((resolve, reject) => {\n        var status = \"idle\";\n        if(monitoring_grid.length > 0){\n            for(var index = 0; index < monitoring_grid.length; index++){\n                var row = monitoring_grid[index];\n\n                if(row){\n                    if(row.admin_id === browser_admin_id){\n                        //admins row\n                        if(row.agents.indexOf(agent.agent._id) !== -1){\n                            resolve(\"using\")\n                            break;\n                        }\n                    }\n                    else{\n                        //other admins row\n                        if(row.agents.indexOf(agent.agent._id) !== -1){\n                            resolve(\"using_by_other\");\n                            break;\n                        }\n                    }\n\n                    if(index === (monitoring_grid.length - 1)){\n                        resolve(status);\n                    }\n                }\n            }\n        }\n        else{\n            resolve(status);\n        }\n    })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}