{"ast":null,"code":"var _jsxFileName = \"/Users/user/laser/laser_dashboard_frontend/client/src/Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport red_circle from './icons/emergency_with_circle.gif';\nimport blue_circle from './icons/call_with_circle.gif';\nimport emergency_icon from './icons/emergency.gif';\nimport call_icon from './icons/call.gif';\nimport './App.css'; //import police_car from './icons/vector/police_car.svg'\n//import police_car_enroute from './icons/vector/police_car_yellow.svg'\n\nimport police_car from './icons/PNG/police_car.png';\nimport police_car_using from './icons/PNG/police_car_using.png';\nimport police_car_using_other from './icons/PNG/police_car_other_using.png';\nimport police_car_in_focus from './icons/PNG/police_car_in_focus.png';\nimport fire_car from './icons/PNG/fire_truck.png';\nimport fire_car_using from './icons/PNG/fire_truck_using.png';\nimport fire_car_using_other from './icons/PNG/fire_truck_other_using.png';\nimport fire_car_in_focus from './icons/PNG/fire_truck_in_focus.png';\nimport ambulance from './icons/PNG/ambulance.png';\nimport ambulance_using from './icons/PNG/ambulance_using.png';\nimport ambulance_using_other from './icons/PNG/ambulance_other_using.png';\nimport ambulance_in_focus from './icons/PNG/ambulance_in_focus.png';\nimport alert from \"./sounds/alert.mp3\";\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport io from \"socket.io-client\";\nimport Sidebar from './components/Sidebar';\nimport Action from './components/Action';\nimport AgentDetails from './components/AgentDetails';\nimport LocationSidebar from './components/LocationSideBar';\nimport AddCallManually from './components/AddCallManually';\nimport ConfirmAddressNotFound from './components/ConfirmAddressNotFound';\nimport TopPanel from './components/TopPanel';\nimport Latest from './components/Latest';\nimport RouteStatus from './components/RouteStatus';\nimport ConfirmAction from './components/ConfirmAction';\nimport Utils from './utils/Utils';\nimport Persistence from './utils/Persistence';\nimport Sound from 'react-sound'; //Refactor \n\nimport { usePubNub } from 'pubnub-react';\nimport Geocode from \"react-geocode\";\nimport Loader from './components/Loader';\nimport * as API from './api/Api';\nimport AuthHelperMethods from './auth/AuthHelperMethods';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Auth = new AuthHelperMethods();\nconst utils = new Utils();\nconst persistence = new Persistence();\nconst mapStyle = {\n  height: '100vh',\n  width: '100%'\n}; //const socket_io_url = 'http://18.192.254.193';\n\nconst socket_io_url = 'http://192.168.211.39:3080';\nlet todays_date = new Date().toISOString();\nlet today = null;\nlet pubnub = null;\nlet browserAdmin = null;\n\nconst Dashboard = _ref => {\n  _s();\n\n  let {\n    logout,\n    google\n  } = _ref;\n  return function (logout) {\n    pubnub = usePubNub();\n    const [mapDetails, setMapDetails] = useState({\n      showConfirm: {\n        action: \"\",\n        status: false\n      },\n      latest: [],\n      locations: [],\n      emergencies: [],\n      filtered_locations: [],\n      filtered_emergencies: [],\n      side_bar_open: false,\n      agent_side_bar_open: false,\n      location_side_bar_open: false,\n      manual_location_side_bar: false,\n      clicked_user: {},\n      clicked_agent: {},\n      center: {\n        lat: 6.5244,\n        lng: 3.3792\n      },\n      selected_call: \"Calls (All)\",\n      selected_emergency: \"Emergencies (All)\",\n      zoom: 11,\n      show_red_circle: false,\n      show_blue_circle: false,\n      clicked_marker_id: \"\",\n      play_sound: false,\n      channels_list: [\"lllaser\"],\n      agents_in_focus: [],\n      laser_agents: [],\n      //all agents\n      monitoring_grid: [],\n      responses_available: false,\n      route_responses_from_agents: [],\n      action: \"loading\",\n      action_message: \"\",\n      tracked_area: \"lllaser\",\n      //the user in which the admin is currently viewing whether the user wants to be tracked or not\n      date: new Date(),\n      message: \"\",\n      selected_manual_call: \"Emergency Management(LASEMA)\",\n      selected_manual_gender: \"Male\",\n      manual_name: \"\",\n      manual_phone: \"\",\n      manual_address: \"\",\n      showConfirmManualLocation: false,\n      isLoading: false\n    });\n    useEffect(() => {\n      pubnub.unsubscribe({\n        channels: mapDetails.channels_list\n      });\n    }, []);\n    useEffect(() => {\n      browserAdmin = Auth.getAdmin(); //Refactor  ---------------------------------------------------------------------\n      //subscribe to the parent channel to receive location updates from agents\n\n      pubnub.subscribe({\n        channels: mapDetails.channels_list\n      }); //Refactor End  ---------------------------------------------------------------------\n\n      setMapDetails({ ...mapDetails,\n        laser_agents: []\n      });\n      getMonitoringGridFromServerAndReconcileAssignedAgents();\n    }, []);\n\n    function showLoading() {\n      setMapDetails({ ...mapDetails,\n        isLoading: true\n      });\n    }\n\n    function hideLoading() {\n      setMapDetails({ ...mapDetails,\n        isLoading: false\n      });\n    }\n\n    function logout() {\n      logout();\n    }\n\n    const showMonitoredEmergency = async e => {\n      const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n\n      if (emergency_full_row && emergency_full_row.emergency) {\n        var item = emergency_full_row.emergency;\n\n        switch (item.laser_type) {\n          case \"emergency\":\n            setMapDetails({ ...mapDetails,\n              clicked_user: item,\n              side_bar_open: true,\n              location_side_bar_open: false,\n              agent_side_bar_open: false,\n              center: {\n                lat: item.latitude,\n                lng: item.longitude\n              },\n              zoom: 19,\n              show_red_circle: true,\n              show_blue_circle: false,\n              clicked_marker_id: item._id\n            });\n\n          case \"call\":\n            setMapDetails({ ...mapDetails,\n              clicked_user: item,\n              side_bar_open: false,\n              location_side_bar_open: true,\n              agent_side_bar_open: false,\n              center: {\n                lat: item.latitude,\n                lng: item.longitude\n              },\n              zoom: 19,\n              show_red_circle: false,\n              show_blue_circle: true,\n              clicked_marker_id: item._id\n            });\n            break;\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"You are not monitoring any emergency or call at the moment\"\n        });\n      }\n    };\n\n    function showConfirmResolveEmergency(e) {\n      e.preventDefault();\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"emergency\",\n          status: true\n        },\n        message: \"Are you sure you want to mark this emergency issue as resolved ?\"\n      });\n    }\n\n    function showConfirmResolveLocation() {\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"location\",\n          status: true\n        },\n        message: \"Are you sure you want to mark this call as resolved ?\"\n      });\n    }\n\n    const removeAgentFromRoute = async (e, agent) => {\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            });\n\n            try {\n              //tell agent to leave the emergency\n              const result = await pubnub.publish({\n                message: {\n                  pn_gcm: {\n                    data: {\n                      notification_body: \"You need to abandon route. Tap to open app\",\n                      data: {},\n                      action: \"leave_route\"\n                    }\n                  }\n                },\n                channel: agent.agent._id,\n                sendByPost: false,\n                // true to send via POST\n                storeInHistory: false //override default storage options\n\n              });\n            } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n            //we set state and update the monitoring grid and the laser agents list\n\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" was successfully removed from monitoring the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {}\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    };\n\n    const removeAgentFromRouteAndCloseRouteResponse = async (e, route_response) => {\n      var agent = route_response.agent;\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            }); //End Refactor  ---------------------------------------------------------------------\n\n            var route_response_array = mapDetails.route_responses_from_agents;\n            route_response_array.splice(route_response_array.indexOf(route_response), 1); //persist route complete responses array\n\n            persistence.saveCompletedEmergenciesResponse(route_response_array); //we set state and update the monitoring grid and the laser agents list\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" was successfully removed from monitoring the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {},\n              route_responses_from_agents: route_response_array\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    };\n\n    const addAgentToMonitoring = async (e, agent) => {\n      const monitored_result = utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid);\n\n      if (monitored_result) {\n        var check_result = await utils.checkIfOtherAdminIsUsingAgent(browserAdmin._id, agent, mapDetails.monitoring_grid);\n\n        if (check_result) {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"Another admin has assigned agent \" + agent.agent.firstname + \" to an emergency\"\n          });\n        } else {\n          //we continue\n          //add agent to monitoring grid and save on the server\n          const grid_and_agents_array = await utils.setAgentOnMonitoringGridAndChangeAgentStatus(agent, mapDetails.monitoring_grid, browserAdmin._id, mapDetails.laser_agents);\n          var new_monitoring_grid = grid_and_agents_array[0];\n          var new_laser_agents = grid_and_agents_array[1];\n          const result = await API.saveMonitoringGrid(new_monitoring_grid);\n\n          if (result.data === \"successful\") {\n            //we get the emregency monitored from the monitoring grid which is the central source of truth\n            const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n            var emergency_monitored = emergency_full_row.emergency;\n\n            if (emergency_monitored) {\n              //Refactor  ---------------------------------------------------------------------\n              //we tell the agent to open the new route and go to the emergency or call\n              try {\n                const result = await pubnub.publish({\n                  message: {\n                    pn_gcm: {\n                      data: {\n                        notification_body: \"You have a new route. Tap to open app.\",\n                        data: emergency_monitored.phone_number ? {\n                          full_name: emergency_monitored.full_name,\n                          _id: emergency_monitored.user,\n                          phone_number: emergency_monitored.phone_number,\n                          latitude: emergency_monitored.latitude,\n                          longitude: emergency_monitored.longitude\n                        } : {\n                          full_name: emergency_monitored.full_name,\n                          _id: emergency_monitored.user,\n                          latitude: emergency_monitored.latitude,\n                          longitude: emergency_monitored.longitude\n                        },\n                        action: \"route_request\"\n                      }\n                    }\n                  },\n                  channel: agent.agent._id,\n                  sendByPost: false,\n                  // true to send via POST\n                  storeInHistory: false //override default storage options\n\n                });\n              } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n              //we subscribe the admin to the agents id channel\n\n\n              var list = mapDetails.channels_list;\n\n              if (list.indexOf(agent.agent._id) === -1) {\n                list.push(agent.agent._id);\n              } //Refactor  ---------------------------------------------------------------------\n\n\n              pubnub.subscribe({\n                channels: list\n              }); //End Refactor  ---------------------------------------------------------------------\n              //persist agents incase the user reloads the page or closes the browser\n\n              var assigned_agents = persistence.getAssignedAgents();\n              var new_assigned_agents = utils.addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents);\n              persistence.saveAssignedAgents(new_assigned_agents); //we then update state\n\n              setMapDetails({ ...mapDetails,\n                monitoring_grid: new_monitoring_grid,\n                laser_agents: new_laser_agents,\n                //channels_list: list,\n                action: \"message\",\n                action_message: \"Agent \" + agent.agent.firstname + \" has been successfully assigned to the emergency\"\n              });\n            }\n          }\n\n          if (result.data === \"unsuccessful\") {\n            //the grid was NOT successfully saved \n            //show message\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"The system could NOT successfully assign the agent to the emergency\"\n            });\n          }\n        }\n      } else {}\n    };\n\n    const startMonitoring = async (e, item) => {\n      try {\n        //check if another admin is monitoring the emergency\n        const boolean_value = await utils.checkIfEmergencyMonitoredByOtherAdmin(mapDetails.monitoring_grid, item, browserAdmin._id);\n\n        if (boolean_value) {\n          //the emergency is being monitored by another admin\n          //tell the browser admin about this\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"Another admin is already monitoring the selected emergency\"\n          });\n        } else {\n          //we continue by editing the monitoring_grid and persisting it\n          const new_monitoring_grid = await utils.setEmergencyOnMonitoringGrid(item, mapDetails.monitoring_grid, browserAdmin._id);\n          const result = await API.saveMonitoringGrid(new_monitoring_grid);\n\n          if (result.data === \"successful\") {\n            //the grid was successfully saved \n            //change monitoring grid in local state\n            //subscribe to channel if user chose to be tracked\n            //show message\n            var list = mapDetails.channels_list ? mapDetails.channels_list : []; //we subscribe to the items channel ONLY if the item is trackable\n\n            if (item.is_trackable) {\n              if (list.indexOf(item.user) === -1) {\n                //remove old user from list\n                //unsubscribe from old user\n                list.push(item.user);\n              } //Refactor  ---------------------------------------------------------------------\n\n\n              pubnub.subscribe({\n                channels: list\n              }); //Refactor End  ---------------------------------------------------------------------\n            }\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"You are now monitoring \" + item.full_name,\n              channels_list: list,\n              monitoring_grid: new_monitoring_grid\n            });\n          }\n\n          if (result.data === \"unsuccessful\") {\n            //the grid was NOT successfully saved \n            //show message\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"The system could not initiate the monitoring of that emergency\"\n            });\n          }\n        }\n      } catch (err) {\n        console.log({\n          err\n        }); //show message\n\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Error occurred initiating monitoring of emergency\"\n        });\n      }\n    };\n\n    const hideConfirm = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"\",\n          status: false\n        },\n        message: \"\"\n      });\n    };\n\n    const closeAction = e => {\n      setMapDetails({ ...mapDetails,\n        action: \"close\",\n        action_message: \"\"\n      });\n    };\n\n    const closeSideBar = e => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        selected_location: {},\n        selected_emergency: {},\n        clicked_marker_id: \"\"\n      });\n    };\n\n    const closeAgentSideBar = e => {\n      setMapDetails({ ...mapDetails,\n        clicked_agent: {},\n        agent_side_bar_open: false\n      });\n    };\n\n    const closeRouteResponse = route_response => {\n      let array = mapDetails.route_responses_from_agents;\n      array.splice(array.indexOf(route_response), 1);\n      setMapDetails({ ...mapDetails,\n        route_responses_from_agents: array\n      });\n    };\n\n    const getSelectedAgentsIds = () => {};\n\n    const setSelectedAgentsFromIds = ids => {}; //we get the monitoring grid from the server and update our variables\n\n\n    const getMonitoringGridFromServerAndReconcileAssignedAgents = async () => {\n      showLoading();\n      const response = await API.getMonitoringGrid();\n\n      if (response) {\n        setUpAssignedAgentsIfAny(response.data);\n        utils.getAdminEmergencyMonitored(browserAdmin._id, response.data).then(emergency_full_row => {\n          var admin_emergency = emergency_full_row.emergency;\n\n          if (admin_emergency) {\n            //we need to subscribe to the emergencies user id to receive location updates\n            if (mapDetails.channels_list.indexOf(admin_emergency.user) === -1) {\n              var list = mapDetails.channels_list.concat([admin_emergency.user]); //Refactor  ---------------------------------------------------------------------\n\n              pubnub.subscribe({\n                channels: list\n              }); //Refactor End ---------------------------------------------------------------------\n\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"You are monitoring \" + admin_emergency.full_name,\n                monitoring_grid: response.data,\n                channels_list: list\n              });\n              hideLoading();\n            } else {\n              //Refactor  ---------------------------------------------------------------------\n              pubnub.subscribe({\n                channels: mapDetails.channels_list\n              }); //Refactor End  ---------------------------------------------------------------------\n\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"You are monitoring \" + admin_emergency.full_name,\n                monitoring_grid: response.data\n              });\n              hideLoading();\n            }\n          } else {\n            setMapDetails({ ...mapDetails,\n              monitoring_grid: response.data\n            });\n            hideLoading();\n          }\n        }).catch(err => {\n          console.log(err);\n          setMapDetails({ ...mapDetails,\n            monitoring_grid: response.data\n          });\n          hideLoading();\n        });\n      } else {\n        //show appropriate message\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred. Please check the network.\"\n        });\n        hideLoading();\n      }\n    };\n\n    const setUpAssignedAgentsIfAny = async monitoring_grid => {\n      var assigned_agents = persistence.getAssignedAgents();\n\n      if (assigned_agents && assigned_agents.length > 0) {\n        var result = await utils.reconcileAssignedAgentsListWithMonitoringGrid(browserAdmin._id, assigned_agents, monitoring_grid); //result[0] //assigned agents list\n        //result[1] //laser agents\n\n        if (result[0].length > 0) {\n          persistence.saveAssignedAgents(result[0]); //we subscribe to the id of each agent\n\n          let list = mapDetails.channels_list.concat(result[0]); //Refactor  ---------------------------------------------------------------------\n\n          pubnub.subscribe({\n            channels: list\n          }); //Refactor End  ---------------------------------------------------------------------\n\n          setMapDetails({ ...mapDetails,\n            laser_agents: result[1],\n            channels_list: list\n          });\n        } else {\n          persistence.deleteAssignedAgents();\n          setMapDetails({ ...mapDetails,\n            laser_agents: result[1]\n          });\n        }\n      }\n    };\n\n    const removeAgentFromEmergencyAfterDecliningRequest = async agent => {\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            }); //Refactor End  ---------------------------------------------------------------------\n            //we set state and update the monitoring grid and the laser agents list\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" declined the request to attend to the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {}\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    }; //this is not showing the agents in the same lga\n\n\n    const getAgentsAroundEmergency = async () => {\n      //show the agents around an emergency\n      //search to see if an emergency is being monitored by the admin browser\n      utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid).then(async boolean_value => {\n        if (boolean_value) {\n          //Refactor  ---------------------------------------------------------------------\n          //ideally this should be sent to those agents in the emergency's LGA\n          //for now we are publishing to all agents \n          try {\n            await pubnub.publish({\n              message: {\n                pn_gcm: {\n                  data: {\n                    notification_body: \"Tap to open the Laser App\",\n                    data: {},\n                    action: \"send_location\"\n                  }\n                }\n              },\n              channel: mapDetails.tracked_area,\n              sendByPost: false,\n              // true to send via POST\n              storeInHistory: false //override default storage     \n\n            });\n          } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n\n\n          utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid).then(emergency_monitored => {\n            //admin is monitoring an emergency or call\n            //check for the agents in emergency LGA\n            utils.setAgentsInFocus(mapDetails.agents_in_focus, emergency_monitored.emergency, mapDetails.laser_agents).then(result => {\n              //we set the state for the laser agents and the agents in focus\n              setMapDetails({ ...mapDetails,\n                laser_agents: result[0],\n                agents_in_focus: result[1]\n              });\n            }).catch(err => {\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred seeking agents around emergency\"\n              });\n            });\n          }).catch(err => {});\n        } else {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"You are NOT monitoring any emergency or call\"\n          });\n        }\n      }).catch(err => {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred seeking agents around emergency\"\n        });\n      });\n    };\n\n    const latestClicked = item => {\n      switch (item.laser_type) {\n        case \"emergency\":\n          setMapDetails({ ...mapDetails,\n            clicked_user: item,\n            side_bar_open: true,\n            location_side_bar_open: false,\n            agent_side_bar_open: false,\n            center: {\n              lat: item.latitude,\n              lng: item.longitude\n            },\n            zoom: 19,\n            show_red_circle: true,\n            show_blue_circle: false,\n            clicked_marker_id: item._id\n          });\n          break;\n\n        case \"call\":\n          setMapDetails({ ...mapDetails,\n            clicked_user: item,\n            side_bar_open: false,\n            location_side_bar_open: true,\n            agent_side_bar_open: false,\n            center: {\n              lat: item.latitude,\n              lng: item.longitude\n            },\n            zoom: 19,\n            show_red_circle: false,\n            show_blue_circle: true,\n            clicked_marker_id: item._id\n          });\n          break;\n      }\n    };\n\n    const openManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        manual_location_side_bar: true,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        agent_side_bar_open: false\n      });\n    };\n\n    const onCalendarOpen = () => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        agent_side_bar_open: false\n      });\n    };\n\n    const onDateChange = date => {\n      //We add 1 hour to the date because the date axios is sending to the server is 1 hour behind what it should be\n      date = new Date(date);\n      date.setHours(date.getHours() + 1);\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        date: date,\n        show_red_circle: false,\n        show_blue_circle: false,\n        clicked_marker_id: \" \",\n        action: \"loading\",\n        action_message: \"\",\n        selected_call: \"Calls (All)\",\n        selected_emergency: \"Emergencies (All)\"\n      });\n      getLocationsDate(date);\n      getEmergenciesDate(date);\n    };\n\n    const onCallsChanged = e => {\n      e.preventDefault();\n      const target = e.target;\n      const value = target.value;\n      const name = target.name;\n      let arr = [];\n\n      if (mapDetails.locations.length > 0) {\n        if (value === \"Calls (All)\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_locations: mapDetails.locations,\n            side_bar_open: false,\n            selected_call: value,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_blue_circle: false\n          });\n        } else if (value === \"None\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_locations: [],\n            side_bar_open: false,\n            selected_call: value,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_blue_circle: false\n          });\n        } else {\n          mapDetails.locations.map(emer => {\n            if (emer.reason.includes(value.toLowerCase())) {\n              arr.push(emer);\n            }\n          });\n\n          if (arr.length > 0) {\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_locations: arr,\n              selected_call: value,\n              side_bar_open: false,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_blue_circle: false\n            });\n          } else {\n            //show message that there are no locations found for that parameter\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_locations: [],\n              selected_call: value,\n              side_bar_open: false,\n              location_side_bar_open: false,\n              show_blue_circle: false\n            });\n          }\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          selected_call: value\n        });\n      }\n    };\n\n    const onEmergenciesChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      const name = target.name;\n      let arr = [];\n\n      if (mapDetails.emergencies.length > 0) {\n        if (value === \"Emergencies (All)\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_emergencies: mapDetails.emergencies,\n            side_bar_open: false,\n            selected_emergency: value,\n            location_side_bar_open: false,\n            agent_side_bar_open: false,\n            show_red_circle: false\n          });\n        } else if (value === \"None\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_emergencies: [],\n            selected_emergency: value,\n            side_bar_open: false,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_red_circle: false\n          });\n        } else {\n          mapDetails.emergencies.map(emer => {\n            if (emer.reasons && emer.reasons.length > 0) {\n              emer.reasons.map(reason => {\n                if (value.toLowerCase().includes(reason)) {\n                  arr.push(emer);\n                }\n              });\n            }\n          });\n\n          if (arr.length > 0) {\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_emergencies: arr,\n              selected_emergency: value,\n              side_bar_open: false,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_red_circle: false\n            });\n          } else {\n            //show message that there are no emregencies found for that parameter\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_emergencies: [],\n              side_bar_open: false,\n              selected_emergency: value,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_red_circle: false\n            });\n          }\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          selected_emergency: value\n        });\n      }\n    };\n\n    const onCallClicked = (location, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_user: location,\n        clicked_agent: {},\n        side_bar_open: false,\n        agent_side_bar_open: false,\n        manual_location_side_bar: false,\n        location_side_bar_open: true,\n        center: {\n          lat: location.latitude,\n          lng: location.longitude\n        },\n        zoom: 19,\n        show_red_circle: false,\n        show_blue_circle: true,\n        clicked_marker_id: location._id\n      });\n    };\n\n    const onEmergencyClicked = (emergency, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_user: emergency,\n        clicked_agent: {},\n        side_bar_open: true,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        location_side_bar_open: false,\n        center: {\n          lat: emergency.latitude,\n          lng: emergency.longitude\n        },\n        zoom: 19,\n        show_red_circle: true,\n        show_blue_circle: false,\n        clicked_marker_id: emergency._id\n      });\n    };\n\n    const onAgentClicked = (agent, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_agent: agent,\n        manual_location_side_bar: false,\n        agent_side_bar_open: true\n      });\n    };\n\n    const getLocationsMarkers = () => {\n      let locations_ui;\n\n      if (mapDetails.filtered_locations && mapDetails.filtered_locations.length > 0) {\n        locations_ui = mapDetails.filtered_locations.map(loc => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onCallClicked(loc, e),\n            name: loc.reason,\n            title: loc.full_name,\n            position: {\n              lat: loc.latitude,\n              lng: loc.longitude\n            },\n            icon: {\n              url: mapDetails.clicked_marker_id === loc._id ? blue_circle : call_icon\n            }\n          }, loc._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1224,\n            columnNumber: 25\n          }, _this);\n        });\n      } else {\n        locations_ui = \"\";\n      }\n\n      return locations_ui;\n    };\n\n    const getEmergenciesMarkers = () => {\n      let emergencies_ui;\n      let emergencies_to_show = mapDetails.filtered_emergencies.concat(mapDetails.filtered_emergencies);\n\n      if (emergencies_to_show.length > 0) {\n        emergencies_ui = emergencies_to_show.map(emer => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onEmergencyClicked(emer, e),\n            name: emer.reasons[0],\n            title: emer.full_name,\n            position: {\n              lat: emer.latitude,\n              lng: emer.longitude\n            },\n            icon: {\n              url: mapDetails.clicked_marker_id === emer._id ? red_circle : emergency_icon\n            }\n          }, emer._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1248,\n            columnNumber: 22\n          }, _this);\n        });\n      } else {\n        emergencies_ui = \"\";\n      }\n\n      return emergencies_ui;\n    };\n\n    const getAgentMarkers = () => {\n      let agents_ui;\n\n      if (mapDetails.laser_agents.length > 0) {\n        agents_ui = mapDetails.laser_agents.map((agent, i) => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onAgentClicked(agent, e),\n            name: agent.full_address,\n            title: agent.full_address,\n            position: {\n              lat: agent.latitude,\n              lng: agent.longitude\n            } //\n            ,\n            icon: {\n              url: getAgentIcon(agent),\n              anchor: new google.maps.Point(40, 40),\n              scaledSize: new google.maps.Size(40, 40)\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1271,\n            columnNumber: 26\n          }, _this);\n        });\n      } else {\n        agents_ui = \"\";\n      }\n\n      return agents_ui;\n    };\n\n    const getAgentIcon = agent => {\n      if (agent) {\n        //we got the icon\n        switch (agent.agent.department) {\n          case \"police\":\n            switch (agent.status) {\n              case \"idle\":\n                return police_car;\n                break;\n\n              case \"infocus\":\n                return police_car_in_focus;\n                break;\n\n              case \"using\":\n                return police_car_using;\n                break;\n\n              case \"using_by_other\":\n                return police_car_using_other;\n                break;\n            }\n\n            break;\n\n          case \"fire\":\n            switch (agent.status) {\n              case \"idle\":\n                return fire_car;\n                break;\n\n              case \"infocus\":\n                return fire_car_in_focus;\n                break;\n\n              case \"using\":\n                return fire_car_using;\n                break;\n\n              case \"using_by_other\":\n                return fire_car_using_other;\n                break;\n            }\n\n            break;\n\n          case \"hospital\":\n            switch (agent.status) {\n              case \"idle\":\n                return ambulance;\n                break;\n\n              case \"infocus\":\n                return ambulance_in_focus;\n                break;\n\n              case \"using\":\n                return ambulance_using;\n                break;\n\n              case \"using_by_other\":\n                return ambulance_using_other;\n                break;\n            }\n\n            break;\n        }\n      }\n    };\n\n    const getEmergencies = async () => {\n      const response = await API.getEmergencies({\n        date: today\n      });\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"err_emergency_load\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.emergencies && response.data.emergencies.length > 0) {\n        var loc = mapDetails.latest;\n\n        for (var i = 0; i < response.data.emergencies.length; i++) {\n          loc.push(response.data.emergencies[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            latest: loc,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            latest: loc,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n      }\n    };\n\n    const getLocations = async () => {\n      const response = await API.getLocations({\n        date: today\n      });\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"err_calls_load\",\n          locations: [],\n          filtered_locations: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.locations && response.data.locations.length > 0) {\n        var loc = mapDetails.latest;\n\n        for (var i = 0; i < response.data.locations.length; i++) {\n          loc.push(response.data.locations[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            latest: loc,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            latest: loc,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          locations: [],\n          filtered_locations: []\n        });\n      }\n    };\n\n    const handleSongFinishedPlaying = () => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false\n      });\n    };\n\n    const onFieldChanged = e => {\n      const target = e.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      setMapDetails({ ...mapDetails,\n        [name]: value\n      });\n    };\n\n    const onManualCallChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      setMapDetails({ ...mapDetails,\n        selected_manual_call: value\n      });\n    };\n\n    const onManualGenderChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      setMapDetails({ ...mapDetails,\n        selected_manual_gender: value\n      });\n    };\n\n    const onSubmitManualCallDetails = e => {\n      e.preventDefault();\n\n      if (mapDetails.selected_manual_call.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid reason for call from the drop down\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_phone.lenght <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid phone number\"\n        });\n        return;\n      }\n\n      if (mapDetails.selected_manual_gender.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid gender\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_name.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid name\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_address.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter an address\"\n        });\n        return;\n      } //show loading\n      //translate address to longitude and latitude\n\n\n      setMapDetails({ ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n      });\n      Geocode.fromAddress(mapDetails.manual_address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n        };\n        saveManualLocation(location);\n      }, error => {\n        console.error(error);\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"We could not find that address\",\n          showConfirmManualLocation: true\n        });\n      });\n    };\n\n    const showConfirmManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirmManualLocation: true\n      });\n    };\n\n    const hideConfirmManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirmManualLocation: false\n      });\n    };\n\n    const tryAgainClicked = () => {\n      _this.hideConfirmManualLocation();\n\n      setMapDetails({ ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n      });\n      Geocode.fromAddress(mapDetails.manual_address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n        };\n\n        _this.saveManualLocation(location);\n      }, error => {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"We could not find that address\"\n        });\n      });\n    };\n\n    const continueConfirmAddressNotFoundClicked = () => {\n      _this.hideConfirmManualLocation();\n      /*\n       this.setState({\n          action: \"loading\",\n          action_message: \"\"\n      });\n       var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n      }\n       this.saveManualLocation(location);*/\n\n    };\n\n    const closeConfirmAddressNotFoundClicked = () => {\n      setMapDetails({ ...mapDetails,\n        action: \"message\",\n        action_message: \"\"\n      });\n\n      _this.hideConfirmManualLocation();\n    };\n\n    const saveManualLocation = async location => {\n      const response = await API.createManualLocation(location);\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred saving the location. Please try again\"\n        });\n        return;\n      }\n\n      if (response && response.data) {\n        if (response.data.response === \"out_of_lagos\") {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"That location is outside Lagos State\"\n          });\n          return;\n        }\n\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"The location has been saved and is displayed on the map\",\n          selected_manual_call: \"Emergency Management(LASEMA)\",\n          selected_manual_gender: \"Male\",\n          manual_name: \"\",\n          manual_phone: \"\",\n          manual_address: \"\",\n          manual_location_side_bar: false\n        });\n        /*this.setState(state => {\n            let arr = state.locations;\n            let lat = state.latest;\n            \n            lat.push(response.data.response);\n            arr.push(response.data.response)\n             return {\n                play_sound: true,\n                latest: lat,\n                clicked_marker_id: response.data.response._id,\n                zoom: 18,\n                locations: arr,\n                center: {\n                    lat: response.data.response.latitude,\n                    lng: response.data.response.longitude\n                }\n            }\n        })*/\n      }\n    };\n\n    const getLocationsDate = async date => {\n      const response = await API.getLocations({\n        date\n      });\n\n      if (response == \"error\") {\n        setMapDetails({ ...mapDetails,\n          action: \"err_calls_load\",\n          locations: [],\n          filtered_locations: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.locations) {\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          locations: [],\n          filtered_locations: []\n        });\n      }\n    };\n\n    const getEmergenciesDate = async date => {\n      const response = await API.getEmergencies({\n        date\n      });\n\n      if (response == \"error\") {\n        setMapDetails({ ...mapDetails,\n          action: \"err_emergency_load\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.emergencies) {\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"laser-parent-div\",\n      style: mapStyle,\n      children: [/*#__PURE__*/_jsxDEV(Latest, {\n        latest: mapDetails.latest,\n        latestClicked: latestClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1793,\n        columnNumber: 13\n      }, _this), mapDetails.show_location_side_bar, mapDetails.side_bar_open && /*#__PURE__*/_jsxDEV(Sidebar, {\n        closeSidebar: closeSideBar,\n        startMonitoring: startMonitoring,\n        emergency: mapDetails.clicked_user,\n        resolve: showConfirmResolveEmergency\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1795,\n        columnNumber: 44\n      }, _this), mapDetails.showConfirmManualLocation ? /*#__PURE__*/_jsxDEV(ConfirmAddressNotFound, {\n        closeConfirmAddressNotFoundClicked: continueConfirmAddressNotFoundClicked,\n        tryAgainClicked: continueConfirmAddressNotFoundClicked,\n        hideConfirmManualLocation: hideConfirmManualLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1796,\n        columnNumber: 55\n      }, _this) : \"\", mapDetails.manual_location_side_bar ? /*#__PURE__*/_jsxDEV(AddCallManually, {\n        onFieldChanged: onFieldChanged,\n        closeSidebar: closeSideBar,\n        selected_manual_call: mapDetails.selected_manual_call,\n        selected_manual_gender: mapDetails.selected_manual_gender,\n        manual_address: mapDetails.manual_address,\n        manual_name: mapDetails.manual_name,\n        onManualCallChanged: onManualCallChanged,\n        onManualGenderChanged: onManualGenderChanged,\n        onSubmitManualCallDetails: onSubmitManualCallDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1797,\n        columnNumber: 54\n      }, _this) : \"\", mapDetails.agent_side_bar_open ? /*#__PURE__*/_jsxDEV(AgentDetails, {\n        removeAgentFromRoute: removeAgentFromRoute,\n        closeAgentSideBar: closeAgentSideBar,\n        addAgentToMonitoring: addAgentToMonitoring,\n        agent: mapDetails.clicked_agent,\n        user: mapDetails.clicked_user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1800,\n        columnNumber: 50\n      }, _this) : \"\", /*#__PURE__*/_jsxDEV(TopPanel, {\n        showMonitoredEmergency: showMonitoredEmergency,\n        openManualLocation: openManualLocation,\n        logout: logout,\n        onCalendarOpen: onCalendarOpen,\n        onDateChange: onDateChange,\n        date: mapDetails.date,\n        selected_call: mapDetails.selected_call,\n        onCallsChanged: onCallsChanged,\n        selected_emergency: mapDetails.selected_emergency,\n        onEmergenciesChanged: onEmergenciesChanged,\n        getAgentsAroundEmergency: getAgentsAroundEmergency\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1803,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Map, {\n        google: google,\n        style: mapStyle,\n        onReady: mapDetails.fetchPlaces,\n        initialCenter: mapDetails.center,\n        center: mapDetails.center,\n        zoom: mapDetails.zoom,\n        children: [getLocationsMarkers(), getEmergenciesMarkers(), getAgentMarkers()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1806,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Loader, {\n        isLoading: mapDetails.isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1819,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Action, {\n        action: mapDetails.action,\n        closeAction: closeAction,\n        message: mapDetails.action_message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1821,\n        columnNumber: 13\n      }, _this), mapDetails.sound, mapDetails.route_responses_from_agents.length > 0 ? /*#__PURE__*/_jsxDEV(RouteStatus, {\n        route_response: mapDetails.route_responses_from_agents[mapDetails.route_responses_from_agents.length - 1],\n        removeAgentFromRouteAndCloseRouteResponse: removeAgentFromRouteAndCloseRouteResponse,\n        closeRouteResponse: closeRouteResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1826,\n        columnNumber: 70\n      }, _this) : \"\", mapDetails.showConfirm.status === true ? /*#__PURE__*/_jsxDEV(ConfirmAction, {\n        yesClicked: mapDetails.showConfirm.action === \"emergency\" ? mapDetails.resolveEmergency : mapDetails.resolveCall,\n        noClicked: hideConfirm,\n        message: mapDetails.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1830,\n        columnNumber: 56\n      }, _this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1792,\n      columnNumber: 8\n    }, _this);\n  }(logout);\n};\n\n_s(Dashboard, \"r3nLiOwOt5IsHriRi9VB73rJtc8=\", false, function () {\n  return [usePubNub];\n});\n\n_c = Dashboard;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI'\n})(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","red_circle","blue_circle","emergency_icon","call_icon","police_car","police_car_using","police_car_using_other","police_car_in_focus","fire_car","fire_car_using","fire_car_using_other","fire_car_in_focus","ambulance","ambulance_using","ambulance_using_other","ambulance_in_focus","alert","Map","Marker","GoogleApiWrapper","io","Sidebar","Action","AgentDetails","LocationSidebar","AddCallManually","ConfirmAddressNotFound","TopPanel","Latest","RouteStatus","ConfirmAction","Utils","Persistence","Sound","usePubNub","Geocode","Loader","API","AuthHelperMethods","Auth","utils","persistence","mapStyle","height","width","socket_io_url","todays_date","Date","toISOString","today","pubnub","browserAdmin","Dashboard","logout","google","mapDetails","setMapDetails","showConfirm","action","status","latest","locations","emergencies","filtered_locations","filtered_emergencies","side_bar_open","agent_side_bar_open","location_side_bar_open","manual_location_side_bar","clicked_user","clicked_agent","center","lat","lng","selected_call","selected_emergency","zoom","show_red_circle","show_blue_circle","clicked_marker_id","play_sound","channels_list","agents_in_focus","laser_agents","monitoring_grid","responses_available","route_responses_from_agents","action_message","tracked_area","date","message","selected_manual_call","selected_manual_gender","manual_name","manual_phone","manual_address","showConfirmManualLocation","isLoading","unsubscribe","channels","getAdmin","subscribe","getMonitoringGridFromServerAndReconcileAssignedAgents","showLoading","hideLoading","showMonitoredEmergency","e","emergency_full_row","getAdminEmergencyMonitored","_id","emergency","item","laser_type","latitude","longitude","showConfirmResolveEmergency","preventDefault","showConfirmResolveLocation","removeAgentFromRoute","agent","result","removeAgentFromBrowserAdminMonitoringGrid","save_result","saveMonitoringGrid","data","assigned_agents","getAssignedAgents","new_assigned_agents","removeAgentFromListOfAssignedAgentsForPersistsnce","length","saveAssignedAgents","deleteAssignedAgents","publish","pn_gcm","notification_body","channel","sendByPost","storeInHistory","firstname","removeAgentFromRouteAndCloseRouteResponse","route_response","route_response_array","splice","indexOf","saveCompletedEmergenciesResponse","addAgentToMonitoring","monitored_result","checkIfEmergencyMonitoredByBrowserAdmin","check_result","checkIfOtherAdminIsUsingAgent","grid_and_agents_array","setAgentOnMonitoringGridAndChangeAgentStatus","new_monitoring_grid","new_laser_agents","emergency_monitored","phone_number","full_name","user","list","push","addAgentToListOfAssignedAgentsForPersistence","startMonitoring","boolean_value","checkIfEmergencyMonitoredByOtherAdmin","setEmergencyOnMonitoringGrid","is_trackable","err","console","log","hideConfirm","closeAction","closeSideBar","selected_location","closeAgentSideBar","closeRouteResponse","array","getSelectedAgentsIds","setSelectedAgentsFromIds","ids","response","getMonitoringGrid","setUpAssignedAgentsIfAny","then","admin_emergency","concat","catch","reconcileAssignedAgentsListWithMonitoringGrid","removeAgentFromEmergencyAfterDecliningRequest","getAgentsAroundEmergency","setAgentsInFocus","latestClicked","openManualLocation","onCalendarOpen","onDateChange","setHours","getHours","getLocationsDate","getEmergenciesDate","onCallsChanged","target","value","name","arr","map","emer","reason","includes","toLowerCase","onEmergenciesChanged","reasons","onCallClicked","location","onEmergencyClicked","onAgentClicked","getLocationsMarkers","locations_ui","loc","url","getEmergenciesMarkers","emergencies_ui","emergencies_to_show","getAgentMarkers","agents_ui","i","full_address","getAgentIcon","anchor","maps","Point","scaledSize","Size","department","getEmergencies","sortDates","getLocations","handleSongFinishedPlaying","onFieldChanged","type","checked","onManualCallChanged","onManualGenderChanged","onSubmitManualCallDetails","lenght","fromAddress","results","geometry","saveManualLocation","error","hideConfirmManualLocation","tryAgainClicked","continueConfirmAddressNotFoundClicked","closeConfirmAddressNotFoundClicked","createManualLocation","show_location_side_bar","fetchPlaces","sound","resolveEmergency","resolveCall","apiKey"],"sources":["/Users/user/laser/laser_dashboard_frontend/client/src/Dashboard.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport red_circle from './icons/emergency_with_circle.gif';\nimport blue_circle from './icons/call_with_circle.gif';\nimport emergency_icon from './icons/emergency.gif';\nimport call_icon from './icons/call.gif';\nimport './App.css'; \n\n//import police_car from './icons/vector/police_car.svg'\n//import police_car_enroute from './icons/vector/police_car_yellow.svg'\n\nimport police_car from './icons/PNG/police_car.png'\nimport police_car_using from './icons/PNG/police_car_using.png'\nimport police_car_using_other from './icons/PNG/police_car_other_using.png'\nimport police_car_in_focus from './icons/PNG/police_car_in_focus.png'\n\nimport fire_car from './icons/PNG/fire_truck.png'\nimport fire_car_using from './icons/PNG/fire_truck_using.png'\nimport fire_car_using_other from './icons/PNG/fire_truck_other_using.png'\nimport fire_car_in_focus from './icons/PNG/fire_truck_in_focus.png'\n\nimport ambulance from './icons/PNG/ambulance.png'\nimport ambulance_using from './icons/PNG/ambulance_using.png'\nimport ambulance_using_other from './icons/PNG/ambulance_other_using.png'\nimport ambulance_in_focus from './icons/PNG/ambulance_in_focus.png'\n\nimport alert from \"./sounds/alert.mp3\";\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nimport io from \"socket.io-client\";\nimport Sidebar from './components/Sidebar';\nimport Action from './components/Action';\nimport AgentDetails from './components/AgentDetails';\nimport LocationSidebar from './components/LocationSideBar';\nimport AddCallManually from './components/AddCallManually';\nimport ConfirmAddressNotFound from './components/ConfirmAddressNotFound';\nimport TopPanel from './components/TopPanel';\nimport Latest from './components/Latest';\nimport RouteStatus from './components/RouteStatus';\nimport ConfirmAction from './components/ConfirmAction';\nimport Utils from './utils/Utils';\nimport Persistence from './utils/Persistence';\nimport Sound from 'react-sound';\n\n//Refactor \nimport { usePubNub } from 'pubnub-react'\n\nimport Geocode from \"react-geocode\";\n\nimport Loader from './components/Loader';\n\nimport * as API from './api/Api';\n\nimport AuthHelperMethods from './auth/AuthHelperMethods';\n\nconst Auth = new AuthHelperMethods();\n\nconst utils = new Utils();\nconst persistence = new Persistence();\n\nconst mapStyle = {\n    height: '100vh', \n    width: '100%'\n}\n\n//const socket_io_url = 'http://18.192.254.193';\nconst socket_io_url = 'http://192.168.211.39:3080';\n\nlet todays_date = new Date().toISOString();\n\nlet today = null;\n\nlet pubnub = null;\n\nlet browserAdmin = null;\n\nconst Dashboard = ({logout, google}) => {\n    pubnub = usePubNub();\n\n    const [mapDetails, setMapDetails] = useState({\n        showConfirm: {\n            action: \"\",\n            status: false\n        },\n        latest: [],\n        locations: [], \n        emergencies: [], \n        filtered_locations: [],\n        filtered_emergencies: [],\n        side_bar_open: false, \n        agent_side_bar_open: false, \n        location_side_bar_open: false, \n        manual_location_side_bar: false,\n        clicked_user: {}, \n        clicked_agent: {},\n        center: {lat: 6.5244,lng: 3.3792}, \n        selected_call:\"Calls (All)\", \n        selected_emergency:\"Emergencies (All)\",\n        zoom : 11,\n        show_red_circle: false,\n        show_blue_circle: false,\n        clicked_marker_id: \"\",\n        play_sound: false,\n        channels_list: [\"lllaser\"],\n\n        agents_in_focus: [],\n        laser_agents:[], //all agents\n        monitoring_grid: [],\n        responses_available: false,\n\n        route_responses_from_agents: [],\n        action: \"loading\",\n        action_message: \"\",\n        tracked_area: \"lllaser\", //the user in which the admin is currently viewing whether the user wants to be tracked or not\n        date: new Date(),\n        message: \"\",\n\n        selected_manual_call:\"Emergency Management(LASEMA)\",\n        selected_manual_gender:\"Male\",\n        manual_name: \"\",\n        manual_phone: \"\",\n        manual_address: \"\",\n        showConfirmManualLocation: false,\n\n        isLoading: false\n    })\n\n    useEffect(() => {\n        pubnub.unsubscribe({\n            channels:   mapDetails.channels_list\n        });\n\n    }, [])\n\n    useEffect(() => {\n        browserAdmin = Auth.getAdmin();\n\n        //Refactor  ---------------------------------------------------------------------\n\n        //subscribe to the parent channel to receive location updates from agents\n        pubnub.subscribe({\n            channels:   mapDetails.channels_list\n        })\n\n        //Refactor End  ---------------------------------------------------------------------\n\n        setMapDetails({...mapDetails,\n            laser_agents: []\n        })\n        \n        getMonitoringGridFromServerAndReconcileAssignedAgents();\n\n        \n\n    }, [])\n\n    function showLoading(){\n        setMapDetails({...mapDetails, isLoading: true})\n    }\n  \n    function hideLoading(){\n        setMapDetails({...mapDetails, isLoading: false})\n    }\n  \n    function logout(){\n        logout();\n    }\n\n    const showMonitoredEmergency = async(e) => {\n        const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n\n        if(emergency_full_row && emergency_full_row.emergency){\n            var item = emergency_full_row.emergency;\n            \n            switch(item.laser_type){\n                case \"emergency\":\n                    setMapDetails({...mapDetails, clicked_user: item,\n                        side_bar_open: true,\n                        location_side_bar_open: false,\n                        agent_side_bar_open: false,\n                        center: {\n                          lat: item.latitude,\n                          lng: item.longitude\n                        },\n                        zoom: 19,\n                        show_red_circle: true,\n                        show_blue_circle: false,\n                        clicked_marker_id: item._id\n                    })\n\n                case \"call\":\n                    setMapDetails({...mapDetails, clicked_user: item,\n                        side_bar_open: false,\n                        location_side_bar_open: true,\n                        agent_side_bar_open: false,\n                        center: {\n                            lat: item.latitude,\n                            lng: item.longitude\n                        },\n                        zoom: 19,\n                        show_red_circle: false,\n                        show_blue_circle: true,\n                        clicked_marker_id: item._id})\n                    break;\n            }\n        }\n        else{\n            setMapDetails({...mapDetails, action: \"message\",\n            action_message: \"You are not monitoring any emergency or call at the moment\",})\n        }\n    }\n    \n\n    function showConfirmResolveEmergency(e){\n        e.preventDefault();\n        setMapDetails({...mapDetails, showConfirm: {\n            action: \"emergency\",\n            status: true\n          },\n          message: \"Are you sure you want to mark this emergency issue as resolved ?\"\n        })\n    }\n\n    function showConfirmResolveLocation(){\n        \n        setMapDetails({...mapDetails, showConfirm: {\n           \n    \n                  action: \"location\",\n                  status: true\n                },\n                message: \"Are you sure you want to mark this call as resolved ?\"\n            })\n    }\n\n\nconst removeAgentFromRoute = async(e, agent) => {\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n\n                //Refactor  ---------------------------------------------------------------------\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                try{\n                    //tell agent to leave the emergency\n                    const result = await pubnub.publish(\n                        {\n                            message: {\n                            pn_gcm: {\n                                data: {\n                                    notification_body: \"You need to abandon route. Tap to open app\",\n                                    data: {},\n                                    action: \"leave_route\"\n                                }\n                            }\n                            },\n                            channel: agent.agent._id,\n                            sendByPost: false, // true to send via POST\n                            storeInHistory: false //override default storage options\n                        }\n                    );\n                }\n                catch(status){\n\n                }\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                //we set state and update the monitoring grid and the laser agents list\n               \n                setMapDetails({...mapDetails, \n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                })\n\n                hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n           hideLoading();\n           setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n  }\n\n  const removeAgentFromRouteAndCloseRouteResponse = async(e, route_response)=>{\n    var agent = route_response.agent;\n\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id,mapDetails.monitoring_grid,mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n                //Refactor  ---------------------------------------------------------------------\n\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                //End Refactor  ---------------------------------------------------------------------\n\n\n                var route_response_array =mapDetails.route_responses_from_agents;\n  \n                route_response_array.splice(route_response_array.indexOf(route_response),1);\n\n                //persist route complete responses array\n                persistence.saveCompletedEmergenciesResponse(route_response_array);\n\n\n                //we set state and update the monitoring grid and the laser agents list\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                    route_responses_from_agents: route_response_array\n                })\n\n               hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n           hideLoading();\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n  }\n  \n  const addAgentToMonitoring = async (e, agent)=>{\n      const monitored_result = utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id,mapDetails.monitoring_grid);\n\n      if(monitored_result){\n        var check_result = await utils.checkIfOtherAdminIsUsingAgent(browserAdmin._id, agent,mapDetails.monitoring_grid);\n      \n        if(check_result){\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"Another admin has assigned agent \" +agent.agent.firstname +\" to an emergency\"\n            })\n        }\n        else{\n                //we continue\n                //add agent to monitoring grid and save on the server\n                const grid_and_agents_array = await utils.setAgentOnMonitoringGridAndChangeAgentStatus(agent,mapDetails.monitoring_grid, browserAdmin._id,mapDetails.laser_agents);\n\n                var new_monitoring_grid = grid_and_agents_array[0];\n                var new_laser_agents = grid_and_agents_array[1];\n\n                const result = await API.saveMonitoringGrid(new_monitoring_grid);\n                \n                if(result.data===\"successful\"){\n                    //we get the emregency monitored from the monitoring grid which is the central source of truth\n                    const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id,mapDetails.monitoring_grid);\n\n                    var emergency_monitored = emergency_full_row.emergency;\n\n                    if(emergency_monitored){\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        //we tell the agent to open the new route and go to the emergency or call\n                        try{\n                            const result = await pubnub.publish({\n                                message: {\n                                    pn_gcm: {\n                                        data: {\n                                            notification_body: \"You have a new route. Tap to open app.\",\n                                            data: emergency_monitored.phone_number ? {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, phone_number: emergency_monitored.phone_number, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude} : {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude},\n                                            action: \"route_request\"\n                                        }\n                                    }\n                                },\n                                channel: agent.agent._id,\n                                sendByPost: false, // true to send via POST\n                                storeInHistory: false //override default storage options\n                            })\n                        }\n                        catch(status){\n\n                        }\n\n\n                        //Refactor End  ---------------------------------------------------------------------\n\n                        //we subscribe the admin to the agents id channel\n                        var list =mapDetails.channels_list;\n\n                        if(list.indexOf(agent.agent._id)===-1){\n                            list.push(agent.agent._id)\n                        }\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        pubnub.subscribe({\n                            channels: list\n                        })\n\n                        //End Refactor  ---------------------------------------------------------------------\n\n\n                        //persist agents incase the user reloads the page or closes the browser\n                        var assigned_agents = persistence.getAssignedAgents();\n\n                        var new_assigned_agents = utils.addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents)\n                        \n                        persistence.saveAssignedAgents(new_assigned_agents);\n\n                        //we then update state\n                        setMapDetails({...mapDetails,\n                            monitoring_grid: new_monitoring_grid,\n                            laser_agents: new_laser_agents,\n                            //channels_list: list,\n                            action: \"message\",\n                            action_message: \"Agent \"+agent.agent.firstname +\" has been successfully assigned to the emergency\"\n                        })\n                    }\n                }\n\n                if(result.data===\"unsuccessful\"){\n                    //the grid was NOT successfully saved \n                        //show message\n                        setMapDetails({...mapDetails,\n                            action: \"message\",\n                            action_message: \"The system could NOT successfully assign the agent to the emergency\"\n                        })\n                }\n        }\n      }\n      else{\n\n      }\n  }\n    \n\n\n  const startMonitoring = async (e, item)=>{\n        \n    try{\n        //check if another admin is monitoring the emergency\n        const boolean_value = await utils.checkIfEmergencyMonitoredByOtherAdmin(  mapDetails.monitoring_grid, item, browserAdmin._id);\n\n        if(boolean_value){\n            //the emergency is being monitored by another admin\n            //tell the browser admin about this\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"Another admin is already monitoring the selected emergency\"\n            })\n        }\n        else{\n            //we continue by editing the monitoring_grid and persisting it\n            const new_monitoring_grid = await utils.setEmergencyOnMonitoringGrid(item,mapDetails.monitoring_grid, browserAdmin._id);\n            \n            const result = await API.saveMonitoringGrid(new_monitoring_grid);\n            \n            if(result.data===\"successful\"){\n                //the grid was successfully saved \n                //change monitoring grid in local state\n                //subscribe to channel if user chose to be tracked\n                //show message\n\n                var list = mapDetails.channels_list ? mapDetails.channels_list : [];\n\n                //we subscribe to the items channel ONLY if the item is trackable\n                if(item.is_trackable){ \n                    if(list.indexOf(item.user)===-1){\n                        //remove old user from list\n                        //unsubscribe from old user\n            \n                        list.push(item.user)\n                    }\n\n                    //Refactor  ---------------------------------------------------------------------\n\n                    pubnub.subscribe({\n                        channels: list\n                    })\n\n                    //Refactor End  ---------------------------------------------------------------------\n                }\n                \n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"You are now monitoring \"+item.full_name,\n                    channels_list: list,\n                    monitoring_grid: new_monitoring_grid\n                })  \n            }\n\n            if(result.data===\"unsuccessful\"){\n                //the grid was NOT successfully saved \n                //show message\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"The system could not initiate the monitoring of that emergency\"\n                })\n            }\n                        \n        }\n    }\n    catch(err){\n        console.log({err})\n        //show message\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"Error occurred initiating monitoring of emergency\"\n        })\n    }\n}\n\n\nconst hideConfirm = () => {\n      setMapDetails({...mapDetails,\n        showConfirm: {\n          action: \"\",\n          status: false\n        },\n        message: \"\"\n    })\n}\n\nconst closeAction = (e) => {\n    setMapDetails({...mapDetails,\n        action: \"close\",\n        action_message: \"\"\n    })\n}\n\nconst closeSideBar = (e) => {\n    setMapDetails({...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        selected_location: {},\n        selected_emergency: {},\n        clicked_marker_id: \"\"\n    })\n}\n\nconst closeAgentSideBar = (e) => {\n    setMapDetails({...mapDetails,\n        clicked_agent: {},\n        agent_side_bar_open: false\n    })\n}\n\nconst closeRouteResponse = (route_response) => {\n    let array = mapDetails.route_responses_from_agents;\n\n    array.splice(array.indexOf(route_response),1);\n\n    setMapDetails({\n        ...mapDetails,\n        route_responses_from_agents: array\n    })\n}\n\nconst getSelectedAgentsIds = () => {\n    \n}\n\nconst setSelectedAgentsFromIds = (ids) => {\n    \n}\n\n//we get the monitoring grid from the server and update our variables\nconst getMonitoringGridFromServerAndReconcileAssignedAgents = async () => {\n        showLoading();\n\n        const response = await API.getMonitoringGrid();\n\n        if(response){\n            setUpAssignedAgentsIfAny(response.data);\n           \n            utils.getAdminEmergencyMonitored(browserAdmin._id, response.data)\n                    .then(emergency_full_row => {\n\n                        var admin_emergency = emergency_full_row.emergency;\n\n                        if(admin_emergency){\n\n                            //we need to subscribe to the emergencies user id to receive location updates\n                            if( mapDetails.channels_list.indexOf(admin_emergency.user) === -1){\n                                \n                                var list = mapDetails.channels_list.concat([admin_emergency.user]);\n                                \n                                //Refactor  ---------------------------------------------------------------------\n\n                                pubnub.subscribe({\n                                    channels: list\n                                })\n\n                                //Refactor End ---------------------------------------------------------------------\n            \n                                setMapDetails({...mapDetails,\n                                    action: \"message\",\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\n                                    monitoring_grid: response.data,\n                                    channels_list: list\n                                })\n\n                                hideLoading();\n                            }\n                            else{\n                                //Refactor  ---------------------------------------------------------------------\n\n                                pubnub.subscribe({\n                                    channels:   mapDetails.channels_list\n                                })\n\n                                //Refactor End  ---------------------------------------------------------------------\n            \n                                setMapDetails({...mapDetails,\n                                    action: \"message\",\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\n                                    monitoring_grid: response.data\n                                });\n                                \n                                hideLoading();\n                            }\n                        }\n                        else{\n                              setMapDetails({...mapDetails,\n                                monitoring_grid: response.data\n                              })\n                              hideLoading();\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                        setMapDetails({...mapDetails,\n                            monitoring_grid: response.data\n                        })\n                        hideLoading();\n                    })\n        }\n        else{\n            //show appropriate message\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred. Please check the network.\"\n            })\n            hideLoading();\n        }\n  }\n\n  const setUpAssignedAgentsIfAny = async(monitoring_grid) => {\n      var assigned_agents = persistence.getAssignedAgents();\n\n      if(assigned_agents && assigned_agents.length > 0){\n            var result = await utils.reconcileAssignedAgentsListWithMonitoringGrid(browserAdmin._id, assigned_agents, monitoring_grid);\n    \n            //result[0] //assigned agents list\n            //result[1] //laser agents\n    \n            if(result[0].length > 0){\n                persistence.saveAssignedAgents(result[0]);\n\n                //we subscribe to the id of each agent\n                let list = mapDetails.channels_list.concat(result[0]);\n                \n                //Refactor  ---------------------------------------------------------------------\n\n                pubnub.subscribe({\n                    channels: list\n                })\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                setMapDetails({...mapDetails,\n                    laser_agents: result[1],\n                    channels_list: list\n                })\n            }\n            else{\n                persistence.deleteAssignedAgents();\n\n                setMapDetails({...mapDetails,\n                    laser_agents: result[1]\n                })\n            }\n      }\n  }\n\n\n  const removeAgentFromEmergencyAfterDecliningRequest = async (agent) =>{\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id,   mapDetails.monitoring_grid,   mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n                //Refactor  ---------------------------------------------------------------------\n\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                //we set state and update the monitoring grid and the laser agents list\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" declined the request to attend to the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                })\n\n                hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n            hideLoading();\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n}\n\n\n\n  //this is not showing the agents in the same lga\n  const getAgentsAroundEmergency = async () => {\n    //show the agents around an emergency\n    //search to see if an emergency is being monitored by the admin browser\n    utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid)\n                .then( async (boolean_value) => {\n                    if(boolean_value){\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        //ideally this should be sent to those agents in the emergency's LGA\n                        //for now we are publishing to all agents \n                     try{\n                        await pubnub.publish(\n                        {\n                            message: {\n                                pn_gcm: {\n                                    data: {\n                                        notification_body: \"Tap to open the Laser App\",\n                                        data: {},\n                                        action: \"send_location\"\n                                    }\n                                }\n                            },\n                            channel: mapDetails.tracked_area,\n                            sendByPost: false, // true to send via POST\n                            storeInHistory: false //override default storage     \n                        })\n                     }\n\n                    catch(status){}\n\n                        //Refactor End  ---------------------------------------------------------------------\n\n                        utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid)\n                                .then(emergency_monitored => {\n                                    //admin is monitoring an emergency or call\n                                    //check for the agents in emergency LGA\n                                    utils.setAgentsInFocus(mapDetails.agents_in_focus, emergency_monitored.emergency, mapDetails.laser_agents)\n                                        .then(result => {\n                                            //we set the state for the laser agents and the agents in focus\n                                            setMapDetails({...mapDetails, \n                                                laser_agents: result[0],\n                                                agents_in_focus: result[1]\n                                            })\n                                        })\n                                        .catch(err => {\n                                            setMapDetails({\n                                                ...mapDetails,\n                                                action: \"message\",\n                                                action_message: \"An error occurred seeking agents around emergency\"\n                                            })\n                                        })\n                                })\n                                .catch(err => {\n\n                                })\n                    }\n                    else{\n                        setMapDetails({\n                            ...mapDetails,\n                            action: \"message\",\n                            action_message: \"You are NOT monitoring any emergency or call\"\n                        })\n                    }\n                })\n                .catch(err => {\n                    setMapDetails({\n                        ...mapDetails,\n                        action: \"message\",\n                        action_message: \"An error occurred seeking agents around emergency\"\n                    })\n                })\n    }\n\n\n    const latestClicked = (item) => {\n        switch(item.laser_type){\n            case \"emergency\":\n                setMapDetails({\n                    ...mapDetails, \n                    clicked_user: item,\n                    side_bar_open: true,\n                    location_side_bar_open: false,\n                    agent_side_bar_open: false,\n                    center: {\n                      lat: item.latitude,\n                      lng: item.longitude\n                    },\n                    zoom: 19,\n                    show_red_circle: true,\n                    show_blue_circle: false,\n                    clicked_marker_id: item._id\n                })\n                break;\n            case \"call\":\n                setMapDetails({\n                    ...mapDetails,\n                    clicked_user: item,\n                    side_bar_open: false,\n                    location_side_bar_open: true,\n                    agent_side_bar_open: false,\n                    center: {\n                        lat: item.latitude,\n                        lng: item.longitude\n                    },\n                    zoom: 19,\n                    show_red_circle: false,\n                    show_blue_circle: true,\n                    clicked_marker_id: item._id\n                })\n                break;\n        }\n    }\n\n\n    const openManualLocation = () => {\n        setMapDetails({\n            ...mapDetails,\n            manual_location_side_bar: true,\n            side_bar_open: false,\n            location_side_bar_open: false,\n            agent_side_bar_open: false\n        })\n    }\n\n\n    const onCalendarOpen = () => {\n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            side_bar_open: false, \n            location_side_bar_open: false,\n            agent_side_bar_open: false\n        })\n    }\n\n    const onDateChange = (date) => {\n\n        //We add 1 hour to the date because the date axios is sending to the server is 1 hour behind what it should be\n        date = new Date(date);\n        date.setHours(date.getHours() + 1);\n    \n         setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            date: date,\n            show_red_circle: false,\n            show_blue_circle: false,\n            clicked_marker_id: \" \",\n            action: \"loading\",\n            action_message: \"\",\n            selected_call:\"Calls (All)\", \n            selected_emergency:\"Emergencies (All)\"\n         })\n    \n         getLocationsDate(date);\n         getEmergenciesDate(date);\n    }\n\n    const onCallsChanged = (e) => {\n        e.preventDefault();\n        \n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n  \n        let arr = [];\n  \n        if(mapDetails.locations.length>0){\n            if(value===\"Calls (All)\"){\n              setMapDetails({\n                  ...mapDetails,\n                  play_sound: false,\n                  filtered_locations: mapDetails.locations,\n                  side_bar_open: false, \n                  selected_call: value,\n                  agent_side_bar_open: false,\n                  location_side_bar_open: false,\n                  show_blue_circle: false\n              })\n            }\n            else if(value===\"None\"){\n              setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations: [],\n                    side_bar_open: false, \n                    selected_call: value,\n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_blue_circle: false\n              })\n            }\n            else{\n              mapDetails.locations.map(emer => {\n                if(emer.reason.includes(value.toLowerCase())){\n                  arr.push(emer)\n                }\n              })\n              \n              if(arr.length>0){\n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations: arr,\n                    selected_call: value,\n                    side_bar_open: false, \n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_blue_circle: false\n                })\n              }\n              else{\n                //show message that there are no locations found for that parameter\n        \n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations:[],\n                    selected_call: value,\n                    side_bar_open: false, \n                    location_side_bar_open: false,\n                    show_blue_circle: false\n                })\n              }\n            }\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                selected_call: value\n            })\n        }\n    }\n\n    const onEmergenciesChanged = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        \n        let arr = [];\n        if(mapDetails.emergencies.length>0){\n            if(value===\"Emergencies (All)\"){\n              setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_emergencies: mapDetails.emergencies,\n                    side_bar_open: false, \n                    selected_emergency: value,\n                    location_side_bar_open: false,\n                    agent_side_bar_open: false,\n                    show_red_circle: false\n              })\n            }\n            else if(value===\"None\"){\n              setMapDetails({\n                  ...mapDetails,\n                  play_sound: false,\n                  filtered_emergencies:[],\n                  selected_emergency: value,\n                  side_bar_open: false, \n                  agent_side_bar_open: false,\n                  location_side_bar_open: false,\n                  show_red_circle: false\n              })\n            }\n            else{\n              mapDetails.emergencies.map(emer => {\n                if(emer.reasons&&emer.reasons.length>0){\n                  emer.reasons.map(reason => {\n                      if(value.toLowerCase().includes(reason)){\n                          arr.push(emer)\n                      }\n                  })\n                }\n              })\n        \n              if(arr.length>0){\n                    setMapDetails({\n                        ...mapDetails,\n                        play_sound: false,\n                        filtered_emergencies:arr,\n                        selected_emergency: value,\n                        side_bar_open: false, \n                        agent_side_bar_open: false,\n                        location_side_bar_open: false,\n                        show_red_circle: false\n                    })\n              }\n              else{\n                //show message that there are no emregencies found for that parameter\n        \n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_emergencies: [],\n                    side_bar_open: false, \n                    selected_emergency: value,\n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_red_circle: false\n                })\n              }\n            }\n        }    \n        else{\n            setMapDetails({\n                ...mapDetails, \n                selected_emergency: value\n            })\n        }\n    }\n\n    const onCallClicked = (location,e) => {\n            setMapDetails({\n                ...mapDetails,\n                play_sound: false,\n                clicked_user: location,\n                clicked_agent: {},\n                side_bar_open: false,\n                agent_side_bar_open: false,\n                manual_location_side_bar: false,\n                location_side_bar_open: true,\n                center: {\n                  lat: location.latitude,\n                  lng: location.longitude\n                },\n                zoom: 19,\n                show_red_circle: false,\n                show_blue_circle: true,\n                clicked_marker_id: location._id\n            })\n    }\n\n    const onEmergencyClicked = (emergency,e) => {\n       \n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            clicked_user: emergency,\n            clicked_agent: {},\n            side_bar_open: true,\n            manual_location_side_bar: false,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            center: {\n                lat: emergency.latitude,\n                lng: emergency.longitude\n            },\n            zoom: 19,\n            show_red_circle: true,\n            show_blue_circle: false,\n            clicked_marker_id: emergency._id\n        })\n    }\n    \n    const onAgentClicked = (agent,e) => {\n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            clicked_agent: agent,\n            manual_location_side_bar: false,\n            agent_side_bar_open: true\n        })\n    }\n\n    const getLocationsMarkers = () => {\n        let locations_ui;\n\n        if(mapDetails.filtered_locations && mapDetails.filtered_locations.length>0){\n            locations_ui = mapDetails.filtered_locations.map(loc => {\n                return  <Marker key={loc._id} onClick={e => onCallClicked(loc,e)}\n                            name={loc.reason} \n                            title={loc.full_name}\n                            position={{lat: loc.latitude, lng: loc.longitude}}\n                            icon={{\n                                url: (mapDetails.clicked_marker_id===loc._id) ? blue_circle : call_icon\n                            }}/> \n            })\n        }\n        else{\n            locations_ui = \"\";\n        }\n        \n        return locations_ui;\n    }\n\n    const getEmergenciesMarkers = () => {\n        let emergencies_ui;\n\n        let emergencies_to_show = mapDetails.filtered_emergencies.concat(mapDetails.filtered_emergencies);\n        \n        if(emergencies_to_show.length>0){\n            emergencies_ui = emergencies_to_show.map(emer => {\n              \n              return <Marker key={emer._id} onClick={e => onEmergencyClicked(emer,e)}\n                        name={emer.reasons[0]} \n                        title={emer.full_name}\n                        position={{lat: emer.latitude, lng: emer.longitude}}\n                        icon={{\n                          url: (mapDetails.clicked_marker_id===emer._id) ? red_circle : emergency_icon\n                        }}/>\n            })\n        }\n        else{\n            emergencies_ui = \"\";\n        }\n        \n        return emergencies_ui;\n    }\n\n\n    const getAgentMarkers = () => {\n        let agents_ui;\n  \n        if(mapDetails.laser_agents.length>0){\n              agents_ui = mapDetails.laser_agents.map((agent,i) => {\n                  \n                  return <Marker key={i}  onClick={e => onAgentClicked(agent,e)}\n                              name={agent.full_address} \n                              title={agent.full_address}\n                              position={{lat: agent.latitude, lng: agent.longitude}}\n                              //\n                              icon={{\n                                  url: getAgentIcon(agent),\n                                  anchor: new google.maps.Point(40,40),\n                                  scaledSize: new google.maps.Size(40,40)\n                              }}/>\n              })\n        }\n        else{\n              agents_ui = \"\";\n        }\n  \n        return agents_ui;\n    }\n\n    const getAgentIcon = (agent) => {\n\n        if(agent){\n              //we got the icon\n              switch(agent.agent.department){\n                  case \"police\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return police_car;\n                          break;\n                          case \"infocus\":\n                              return police_car_in_focus;\n                          break;\n                          case \"using\":\n                              return police_car_using;\n                          break;\n                          case \"using_by_other\":\n                              return police_car_using_other;\n                          break;\n                      }\n                  break;\n                  case \"fire\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return fire_car;\n                          break;\n                          case \"infocus\":\n                              return fire_car_in_focus;\n                          break;\n                          case \"using\":\n                              return fire_car_using;\n                          break;\n                          case \"using_by_other\":\n                              return fire_car_using_other;\n                          break;\n                      }\n                  break;\n                  case \"hospital\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return ambulance;\n                          break;\n                          case \"infocus\":\n                              return ambulance_in_focus;\n                          break;\n                          case \"using\":\n                              return ambulance_using;\n                          break;\n                          case \"using_by_other\":\n                              return ambulance_using_other;\n                          break;\n                      }\n                  break;\n              }\n        }\n    }\n\n\n  const getEmergencies = async() => {\n    const response = await API.getEmergencies({date: today})\n\n    if(response==\"error\"){\n        //show error message\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_emergency_load\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.emergencies&&response.data.emergencies.length>0){\n        var loc = mapDetails.latest;\n\n        for(var i = 0; i<response.data.emergencies.length; i++){\n            loc.push(response.data.emergencies[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                latest : loc,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                latest : loc,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n    }\n}\n\n\n\nconst getLocations = async() => {\n\n    const response = await API.getLocations({date: today})\n\n    if(response==\"error\"){\n        //show error message\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_calls_load\",\n            locations: [],\n            filtered_locations: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.locations&&response.data.locations.length>0){\n        var loc = mapDetails.latest;\n\n        for(var i = 0; i<response.data.locations.length; i++){\n            loc.push(response.data.locations[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                latest : loc,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                latest : loc,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        } \n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            locations: [],\n            filtered_locations: []\n        })\n    }\n}\n\n\nconst handleSongFinishedPlaying = () => {\n    setMapDetails({\n        ...mapDetails,\n        play_sound: false\n    })\n}\n\nconst onFieldChanged = (e) => {\n  const target = e.target;\n  const value = target.type === 'checkbox' ? target.checked : target.value;\n  const name = target.name;\n\n  setMapDetails({...mapDetails, [name]: value})\n}\n\nconst onManualCallChanged = (e) => {\n  const target = e.target;\n  const value = target.value;\n\n  setMapDetails({\n      ...mapDetails,\n      selected_manual_call: value\n  })\n}\n\nconst onManualGenderChanged = (e) => {\n  const target = e.target;\n  const value = target.value;\n\n  setMapDetails({\n      ...mapDetails,\n      selected_manual_gender: value\n  })\n}\n\nconst onSubmitManualCallDetails = (e) => {\n    e.preventDefault();\n\n    if(mapDetails.selected_manual_call.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid reason for call from the drop down\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_phone.lenght <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid phone number\"\n        })\n        return;\n    }\n\n    if(mapDetails.selected_manual_gender.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid gender\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_name.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid name\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_address.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter an address\"\n        })\n        return;\n    }\n\n    //show loading\n    //translate address to longitude and latitude\n    setMapDetails({\n        ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n    })\n\n    Geocode.fromAddress(mapDetails.manual_address).then(\n          response => {\n                const { lat, lng } = response.results[0].geometry.location;\n\n                var location = {\n                    action: mapDetails.selected_manual_call,\n                    longitude: lng,\n                    latitude: lat,\n                    full_address: mapDetails.manual_address,\n                    full_name: mapDetails.manual_name,\n                    phone_number: mapDetails.manual_phone\n                }\n\n                saveManualLocation(location);\n\n          },\n          error => {\n          console.error(error);\n\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"We could not find that address\",\n              showConfirmManualLocation: true\n          })\n          }\n    );\n}\n\nconst showConfirmManualLocation = () => {\n    setMapDetails({...mapDetails,showConfirmManualLocation: true})\n}\n\nconst hideConfirmManualLocation = () => {\n    setMapDetails({\n        ...mapDetails,\n        showConfirmManualLocation: false\n    })\n}\n\nconst tryAgainClicked = () => {\n    this.hideConfirmManualLocation();\n\n    setMapDetails({\n        ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n    })\n\n    Geocode.fromAddress(mapDetails.manual_address).then(\n      response => {\n        const { lat, lng } = response.results[0].geometry.location;\n\n        var location = {\n              action: mapDetails.selected_manual_call,\n              longitude: lng,\n              latitude: lat,\n              full_address: mapDetails.manual_address,\n              full_name: mapDetails.manual_name,\n              phone_number: mapDetails.manual_phone\n        }\n\n        this.saveManualLocation(location);\n      },\n      error => {\n\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"We could not find that address\"\n        })\n      }\n    );\n}\n\n\nconst continueConfirmAddressNotFoundClicked = () => {\n      this.hideConfirmManualLocation();\n      /*\n\n      this.setState({\n          action: \"loading\",\n          action_message: \"\"\n      });\n\n      var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n      }\n\n      this.saveManualLocation(location);*/\n}\n\nconst closeConfirmAddressNotFoundClicked = () => {\n    setMapDetails({\n        ...mapDetails,\n        action: \"message\",\n        action_message: \"\"\n    })\n    this.hideConfirmManualLocation();\n}\n\nconst saveManualLocation = async(location) => {\n      const response = await API.createManualLocation(location)\n      \n      if(response==\"error\"){\n          //show error message\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred saving the location. Please try again\"\n          })\n\n          return;\n      }\n      \n      if(response&&response.data){\n          if(response.data.response===\"out_of_lagos\"){\n              setMapDetails({\n                  ...mapDetails,\n                  action: \"message\",\n                  action_message: \"That location is outside Lagos State\"\n              })\n              return;\n          }\n\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"The location has been saved and is displayed on the map\",\n              selected_manual_call:\"Emergency Management(LASEMA)\",\n              selected_manual_gender:\"Male\",\n              manual_name: \"\",\n              manual_phone: \"\",\n              manual_address: \"\",\n              manual_location_side_bar: false\n          })\n\n          /*this.setState(state => {\n              let arr = state.locations;\n              let lat = state.latest;\n              \n              lat.push(response.data.response);\n              arr.push(response.data.response)\n\n              return {\n                  play_sound: true,\n                  latest: lat,\n                  clicked_marker_id: response.data.response._id,\n                  zoom: 18,\n                  locations: arr,\n                  center: {\n                      lat: response.data.response.latitude,\n                      lng: response.data.response.longitude\n                  }\n              }\n          })*/\n      }\n}\n\n\nconst getLocationsDate = async(date) => {\n    const response = await API.getLocations({date})\n    \n    if(response==\"error\"){\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_calls_load\",\n            locations: [],\n            filtered_locations: []\n        })\n\n        return;\n    }\n\n    if(response&&response.data&&response.data.locations){\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            locations: [],\n            filtered_locations: []\n        })\n    }\n}\n\nconst getEmergenciesDate = async(date) => {\n    const response = await API.getEmergencies({date})\n    \n    if(response==\"error\"){\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_emergency_load\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.emergencies){\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n    }\n}\n\n\nreturn <div className=\"laser-parent-div\" style={mapStyle}>\n            <Latest latest={  mapDetails.latest} latestClicked={latestClicked}/>\n            {  mapDetails.show_location_side_bar}\n            {  mapDetails.side_bar_open && <Sidebar closeSidebar={closeSideBar} startMonitoring={startMonitoring} emergency={mapDetails.clicked_user} resolve={showConfirmResolveEmergency} /> }\n            {  mapDetails.showConfirmManualLocation ? <ConfirmAddressNotFound closeConfirmAddressNotFoundClicked={continueConfirmAddressNotFoundClicked} tryAgainClicked={continueConfirmAddressNotFoundClicked} hideConfirmManualLocation={hideConfirmManualLocation} /> : \"\"}\n            {  mapDetails.manual_location_side_bar ? <AddCallManually onFieldChanged={onFieldChanged} closeSidebar={closeSideBar} selected_manual_call={  mapDetails.selected_manual_call} selected_manual_gender={  mapDetails.selected_manual_gender} manual_address={  mapDetails.manual_address} manual_name={  mapDetails.manual_name} onManualCallChanged={onManualCallChanged} onManualGenderChanged={onManualGenderChanged}  onSubmitManualCallDetails={onSubmitManualCallDetails}/> : \"\" }\n            \n            { \n                mapDetails.agent_side_bar_open ? <AgentDetails removeAgentFromRoute={removeAgentFromRoute} closeAgentSideBar={closeAgentSideBar} addAgentToMonitoring={addAgentToMonitoring} agent={  mapDetails.clicked_agent} user={  mapDetails.clicked_user}/> : \"\" \n            }\n\n            <TopPanel showMonitoredEmergency={showMonitoredEmergency} openManualLocation={openManualLocation} logout={logout} onCalendarOpen={onCalendarOpen} onDateChange={onDateChange} date={  mapDetails.date} selected_call={  mapDetails.selected_call} \n            onCallsChanged={onCallsChanged} selected_emergency={  mapDetails.selected_emergency} onEmergenciesChanged={onEmergenciesChanged} getAgentsAroundEmergency={getAgentsAroundEmergency}/>\n\n            <Map google={google} \n                style={mapStyle}\n                onReady={mapDetails.fetchPlaces}\n                initialCenter={  mapDetails.center}\n                center={  mapDetails.center}\n                zoom={  mapDetails.zoom}>\n        \n                {getLocationsMarkers()}\n                {getEmergenciesMarkers()}\n                {getAgentMarkers()}\n\n            </Map>\n            \n            <Loader isLoading={  mapDetails.isLoading}/>\n\n            <Action action={  mapDetails.action} closeAction={closeAction} message={  mapDetails.action_message}/>\n\n            {mapDetails.sound}\n\n            {\n                mapDetails.route_responses_from_agents.length > 0 ?  <RouteStatus route_response={  mapDetails.route_responses_from_agents[  mapDetails.route_responses_from_agents.length - 1]} removeAgentFromRouteAndCloseRouteResponse={removeAgentFromRouteAndCloseRouteResponse} closeRouteResponse={closeRouteResponse} /> : \"\"\n            }\n\n            {\n                mapDetails.showConfirm.status===true ? <ConfirmAction  yesClicked={  mapDetails.showConfirm.action===\"emergency\" ? mapDetails.resolveEmergency : mapDetails.resolveCall} noClicked={hideConfirm} message={  mapDetails.message} /> : \"\"\n            }\n    </div>\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI')\n})(Dashboard)"],"mappings":"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"},"metadata":{},"sourceType":"module"}