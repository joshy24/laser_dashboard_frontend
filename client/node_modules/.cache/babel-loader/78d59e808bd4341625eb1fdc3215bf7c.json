{"ast":null,"code":"import axios from 'axios';\nimport decode from 'jwt-decode';\nconst login_url = '/login';\nexport default class AuthHelperMethods {\n  constructor() {\n    this.login = (username, password) => {\n      return this.axios(login_url, {\n        username,\n        password\n      }).then(res => {\n        if (res.data.token && res.data.admin && res.data.priviledge) {\n          this.setToken(res.data.token);\n          this.setPriviledge(res.data.priviledge);\n          this.setAdmin(res.data.admin);\n        }\n\n        return res;\n      }).catch(err => {\n        return \"error\";\n      });\n    };\n\n    this.loggedIn = () => {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken(); // Getting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    };\n\n    this.isTokenExpired = token => {\n      try {\n        const decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired.\n          return true;\n        } else return false;\n      } catch (err) {\n        console.log(\"expired check failed! Line 42: AuthService.js\");\n        return false;\n      }\n    };\n\n    this.setAdmin = admin => {\n      // Saves user token to localStorage\n      localStorage.setItem(\"admin\", JSON.stringify(admin));\n    };\n\n    this.getAdmin = () => {\n      // Retrieves the user token from localStorage\n      return JSON.parse(localStorage.getItem(\"admin\"));\n    };\n\n    this.setToken = idToken => {\n      // Saves user token to localStorage\n      localStorage.setItem(\"id_token\", idToken);\n    };\n\n    this.getToken = () => {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n    };\n\n    this.logout = () => {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem(\"id_token\");\n    };\n\n    this.getConfirm = () => {\n      // Using jwt-decode npm package to decode the token\n      let answer = decode(this.getToken());\n      console.log(\"Recieved answer!\");\n      return answer;\n    };\n\n    this.setPriviledge = priviledge => {\n      localStorage.setItem(\"priviledge\", priviledge);\n    };\n\n    this.getPriviledge = () => {\n      return localStorage.getItem(\"priviledge\");\n    };\n\n    this.axios = (url, data, method) => {\n      if (!method) {\n        method = \"post\";\n      } // performs api calls sending the required authentication headers\n\n\n      const headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }; // Setting Authorization header\n      // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      if (this.loggedIn()) {\n        headers[\"Authorization\"] = \"Bearer:\" + this.getToken();\n      }\n\n      return axios({\n        url: url,\n        method: method,\n        data: data,\n        //baseURL: 'http://18.192.254.193/admin',\n        baseURL: 'http://localhost:3077/admin',\n        timeout: 30000,\n        headers: headers\n      }).then(this._checkStatus).then(response => response).catch(err => err);\n    };\n\n    this._checkStatus = response => {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      }\n\n      if (response.status == 403) {} else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    };\n  }\n\n}","map":{"version":3,"names":["axios","decode","login_url","AuthHelperMethods","login","username","password","then","res","data","token","admin","priviledge","setToken","setPriviledge","setAdmin","catch","err","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","console","log","localStorage","setItem","JSON","stringify","getAdmin","parse","getItem","idToken","logout","removeItem","getConfirm","answer","getPriviledge","url","method","headers","baseURL","timeout","_checkStatus","response","status","error","Error","statusText"],"sources":["/Users/user/laser/laser_dashboard_frontend/client/src/auth/AuthHelperMethods.js"],"sourcesContent":["import axios from 'axios';\n\nimport decode from 'jwt-decode'\n\nconst login_url = '/login'\n\nexport default class AuthHelperMethods{\n\n    login = (username, password) => {\n        return  this.axios(login_url, {username, password})\n                    .then(res => {\n                        if(res.data.token && res.data.admin && res.data.priviledge){\n                            this.setToken(res.data.token);\n                            this.setPriviledge(res.data.priviledge);\n                            this.setAdmin(res.data.admin);\n                        }\n                        \n                        return res;\n                    })\n                    .catch(err => {\n                        return \"error\";\n                    })\n    }\n\n    loggedIn = () => {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken(); // Getting token from localstorage\n        return !!token && !this.isTokenExpired(token); // handwaiving here\n    };\n\n    isTokenExpired = token => {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n            // Checking if token is expired.\n            return true;\n            } else return false;\n        } catch (err) {\n            console.log(\"expired check failed! Line 42: AuthService.js\");\n            return false;\n        }\n    };\n\n\n    setAdmin = admin => {\n        // Saves user token to localStorage\n        localStorage.setItem(\"admin\", JSON.stringify(admin));\n    };\n\n    getAdmin = () => {\n        // Retrieves the user token from localStorage\n        return JSON.parse(localStorage.getItem(\"admin\"));\n    };\n\n    setToken = idToken => {\n        // Saves user token to localStorage\n        localStorage.setItem(\"id_token\", idToken);\n    };\n\n    getToken = () => {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem(\"id_token\");\n    };\n\n    logout = () => {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem(\"id_token\");\n    };\n\n    getConfirm = () => {\n        // Using jwt-decode npm package to decode the token\n        let answer = decode(this.getToken());\n        console.log(\"Recieved answer!\");\n        return answer;\n    };\n\n    setPriviledge = priviledge => {\n        localStorage.setItem(\"priviledge\", priviledge);\n    }\n\n    getPriviledge = () => {\n        return localStorage.getItem(\"priviledge\");\n    }\n    \n    axios = (url, data, method) => {\n        if(!method){\n            method = \"post\";\n        }\n        // performs api calls sending the required authentication headers\n        const headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        };\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers[\"Authorization\"] = \"Bearer:\" + this.getToken();\n        }\n\n        return axios({\n            url:url,\n            method: method,\n            data: data, \n            //baseURL: 'http://18.192.254.193/admin',\n            baseURL: 'http://localhost:3077/admin',\n            timeout: 30000,\n            headers: headers\n        })\n        .then(this._checkStatus)\n        .then(response => response)\n        .catch(err => err)\n    };\n\n    _checkStatus = response => {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            // Success status lies between 200 to 300\n            return response;\n        } \n        if(response.status == 403){\n            \n        }\n        else {\n            var error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n        }\n    };\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}