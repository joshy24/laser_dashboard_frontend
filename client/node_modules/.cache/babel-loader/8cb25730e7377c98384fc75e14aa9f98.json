{"ast":null,"code":"var _jsxFileName = \"/Users/user/laser/laser_dashboard_frontend/client/src/Dashboard.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport red_circle from './icons/emergency_with_circle.gif';\nimport blue_circle from './icons/call_with_circle.gif';\nimport emergency_icon from './icons/emergency.gif';\nimport call_icon from './icons/call.gif';\nimport './App.css'; //import police_car from './icons/vector/police_car.svg'\n//import police_car_enroute from './icons/vector/police_car_yellow.svg'\n\nimport police_car from './icons/PNG/police_car.png';\nimport police_car_using from './icons/PNG/police_car_using.png';\nimport police_car_using_other from './icons/PNG/police_car_other_using.png';\nimport police_car_in_focus from './icons/PNG/police_car_in_focus.png';\nimport fire_car from './icons/PNG/fire_truck.png';\nimport fire_car_using from './icons/PNG/fire_truck_using.png';\nimport fire_car_using_other from './icons/PNG/fire_truck_other_using.png';\nimport fire_car_in_focus from './icons/PNG/fire_truck_in_focus.png';\nimport ambulance from './icons/PNG/ambulance.png';\nimport ambulance_using from './icons/PNG/ambulance_using.png';\nimport ambulance_using_other from './icons/PNG/ambulance_other_using.png';\nimport ambulance_in_focus from './icons/PNG/ambulance_in_focus.png';\nimport alert from \"./sounds/alert.mp3\";\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport io from \"socket.io-client\";\nimport Sidebar from './components/Sidebar';\nimport Action from './components/Action';\nimport AgentDetails from './components/AgentDetails';\nimport LocationSidebar from './components/LocationSideBar';\nimport AddCallManually from './components/AddCallManually';\nimport ConfirmAddressNotFound from './components/ConfirmAddressNotFound';\nimport TopPanel from './components/TopPanel';\nimport Latest from './components/Latest';\nimport RouteStatus from './components/RouteStatus';\nimport ConfirmAction from './components/ConfirmAction';\nimport Utils from './utils/Utils';\nimport Persistence from './utils/Persistence';\nimport Sound from 'react-sound'; //Refactor \n\nimport { usePubNub } from 'pubnub-react';\nimport Geocode from \"react-geocode\";\nimport Loader from './components/Loader';\nimport * as API from './api/Api';\nimport AuthHelperMethods from './auth/AuthHelperMethods';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Auth = new AuthHelperMethods();\nconst utils = new Utils();\nconst persistence = new Persistence();\nconst mapStyle = {\n  height: '100vh',\n  width: '100%'\n}; //const socket_io_url = 'http://18.192.254.193';\n\nconst socket_io_url = 'http://192.168.233.39:3080';\nlet todays_date = new Date().toISOString();\nlet today = null;\nlet pubnub = null;\nlet browserAdmin = null;\n\nconst Dashboard = _ref => {\n  _s();\n\n  let {\n    logout,\n    google\n  } = _ref;\n  return function (logout) {\n    pubnub = usePubNub();\n    const [mapDetails, setMapDetails] = useState({\n      showConfirm: {\n        action: \"\",\n        status: false\n      },\n      latest: [],\n      locations: [],\n      emergencies: [],\n      filtered_locations: [],\n      filtered_emergencies: [],\n      side_bar_open: false,\n      agent_side_bar_open: false,\n      location_side_bar_open: false,\n      manual_location_side_bar: false,\n      clicked_user: {},\n      clicked_agent: {},\n      center: {\n        lat: 6.5244,\n        lng: 3.3792\n      },\n      selected_call: \"Calls (All)\",\n      selected_emergency: \"Emergencies (All)\",\n      zoom: 11,\n      show_red_circle: false,\n      show_blue_circle: false,\n      clicked_marker_id: \"\",\n      play_sound: false,\n      channels_list: [\"lllaser\"],\n      agents_in_focus: [],\n      laser_agents: [],\n      //all agents\n      monitoring_grid: [],\n      responses_available: false,\n      route_responses_from_agents: [],\n      action: \"loading\",\n      action_message: \"\",\n      tracked_area: \"lllaser\",\n      //the user in which the admin is currently viewing whether the user wants to be tracked or not\n      date: new Date(),\n      message: \"\",\n      selected_manual_call: \"Emergency Management(LASEMA)\",\n      selected_manual_gender: \"Male\",\n      manual_name: \"\",\n      manual_phone: \"\",\n      manual_address: \"\",\n      showConfirmManualLocation: false,\n      isLoading: false\n    });\n    useEffect(() => {\n      pubnub.unsubscribe({\n        channels: mapDetails.channels_list\n      });\n    }, []);\n    useEffect(() => {\n      browserAdmin = Auth.getAdmin(); //Refactor  ---------------------------------------------------------------------\n      //subscribe to the parent channel to receive location updates from agents\n\n      pubnub.subscribe({\n        channels: mapDetails.channels_list\n      }); //Refactor End  ---------------------------------------------------------------------\n\n      setMapDetails({ ...mapDetails,\n        laser_agents: []\n      });\n      getMonitoringGridFromServerAndReconcileAssignedAgents();\n      var responses = persistence.getCompletedEmergenciesResponse();\n\n      if (responses && responses.length > 0) {\n        setMapDetails({ ...mapDetails,\n          route_responses_from_agents: responses\n        });\n      } //Refactor  ---------------------------------------------------------------------\n\n\n      pubnub.addListener({\n        status: st => {\n          if (st.category === \"PNNetworkUpCategory\") {\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"You are back online.\"\n            });\n            getMonitoringGridFromServerAndReconcileAssignedAgents();\n          }\n\n          if (st.category === \"PNConnectedCategory\") {//intentionally left blank\n          }\n\n          if (st.category === \"PNReconnectedCategory\") {\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"You are back online.\"\n            });\n            getMonitoringGridFromServerAndReconcileAssignedAgents();\n          }\n\n          if (st.category === \"PNNetworkIssuesCategory\") {\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"It appears there is a network issue.\"\n            });\n          }\n\n          if (st.category === \"PNNetworkDownCategory\") {\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"It appears the network is down.\"\n            });\n          }\n\n          if (st.category === \"PNTimeoutCategory\") {\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Could not connect to the internet.\"\n            });\n          }\n        },\n        message: event => {\n          const message = event.message;\n          /*var tracked_user_id =   mapDetails.tracked_users.find(id => id === message.channel);\n           if(tracked_user_id){\n                  //the message is from a user currently being monitored\n                  if(message.userMetadata && message.userMetadata.action === \"user_location_update\"){\n                      var arr =   mapDetails.emergencies.map(emergency => {\n                          if(emergency.user === tracked_user_id){\n                              emergency.latitude = message.message.latitude;\n                              emergency.longitude = message.message.longitude;\n                              return emergency;\n                          }\n                          else{\n                              return emergency;\n                          }\n                      })\n                       //var found_emergency =   mapDetails.emergencies.find(emergency => emergency.user ===   mapDetails.tracked_user_id);\n                       (state => {\n                          return{\n                              emergencies: arr\n                          }\n                      })\n                  }\n          }*/\n\n          utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid).then(emergency_full_row => {\n            var emergency_monitored = emergency_full_row.emergency;\n\n            if (message.channel === emergency_monitored._id) {\n              if (message.userMetadata && message.userMetadata.action === \"user_location_update\") {\n                var arr = mapDetails.emergencies.map(emergency => {\n                  if (emergency.user === emergency_monitored.user) {\n                    emergency.latitude = message.message.latitude;\n                    emergency.longitude = message.message.longitude;\n                    return emergency;\n                  } else {\n                    return emergency;\n                  }\n                }); //var found_emergency =   mapDetails.emergencies.find(emergency => emergency.user ===   mapDetails.tracked_user_id);\n\n                setMapDetails({ ...mapDetails,\n                  emergencies: arr\n                });\n              }\n            }\n          }).catch(err => {}); //if(message.channel ===   mapDetails.tracked_area ){\n\n          if (message.userMetadata && message.userMetadata.action === \"agent_location_update\") {\n            try {\n              console.log(message.message.agent);\n            } catch (err) {}\n\n            utils.updateAgentLocation(message.message, mapDetails.laser_agents, mapDetails.monitoring_grid, browserAdmin._id).then(sorted_agents => {\n              setMapDetails({ ...mapDetails,\n                laser_agents: sorted_agents\n              });\n            }).catch(err => {\n              console.log(err);\n            });\n          } //}\n          //we check the response of an agent that has been assigned, whether the agent sent a message to decilne\n\n\n          if (message.userMetadata && message.userMetadata.action === \"route_request_response\") {\n            //we check which agent is responding to the emergency request\n            var emergency_agent = message.message;\n\n            if (message.channel === emergency_agent._id) {\n              showLoading();\n              var assigned_agents = persistence.getAssignedAgents(); //we get the agent full profile from the persisted listof assigned agents\n\n              utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, emergency_agent._id).then(agent_found => {\n                //we proceed to remove the agent from the emergency and update the monitoring grid and all other parts of the system\n                removeAgentFromEmergencyAfterDecliningRequest(agent_found);\n              }).catch(err => {\n                setMapDetails({ ...mapDetails,\n                  action: \"message\",\n                  action_message: \"Agent \" + emergency_agent.firstname + \" declined to attend to emergency but an error occurred updating the system. Please manually remove the agent from emergency\"\n                });\n              });\n            }\n          }\n\n          if (message.userMetadata && message.userMetadata.action === \"route_completed\") {\n            //show message that agent has completed route\n            var responses = persistence.getCompletedEmergenciesResponse();\n            utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid).then(emergency_monitored => {\n              var assigned_agents = persistence.getAssignedAgents(); //we get the agent full profile from the persisted listof assigned agents\n\n              utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, message.message._id).then(agent_found => {\n                if (responses && responses.length > 0) {\n                  responses.push({\n                    agent: agent_found,\n                    user: emergency_monitored.emergency\n                  });\n                } else {\n                  responses = [{\n                    agent: agent_found,\n                    user: emergency_monitored.emergency\n                  }];\n                }\n\n                persistence.saveCompletedEmergenciesResponse(responses);\n                setMapDetails({ ...mapDetails,\n                  route_responses_from_agents: responses\n                });\n              }).catch(err => {});\n            }).catch(err => {});\n          }\n        }\n      }); //Refactor End  ---------------------------------------------------------------------\n\n      /*const socket = socketIOClient(socket_io_url, {\n          //withCredentials: true\n      });*/\n\n      const socket = io(socket_io_url);\n      socket.on(\"connect\", () => console.log(\"connected to socket io\"));\n      socket.on(\"reconnect\", attempt => {\n        console.log(\"Socket IO Reconnected\"); //successfully reconnected\n        //get the lastest data\n      }); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      socket.on(\"emergency\", data => {\n        if (data) {\n          let arr = mapDetails.emergencies;\n          let lat = mapDetails.latest;\n          let fe = mapDetails.filtered_emergencies;\n          fe.push(data);\n          lat.push(data);\n          arr.push(data);\n          setMapDetails({ ...mapDetails,\n            play_sound: true,\n            latest: lat,\n            clicked_marker_id: data._id,\n            zoom: 18,\n            emergencies: arr,\n            filtered_emergencies: fe,\n            center: {\n              lat: data.latitude,\n              lng: data.longitude\n            }\n          });\n        }\n      });\n      socket.on(\"call\", data => {\n        if (data) {\n          let arr = mapDetails.locations;\n          let lat = mapDetails.latest;\n          lat.push(data);\n          arr.push(data);\n          setMapDetails({ ...mapDetails,\n            play_sound: true,\n            latest: lat,\n            clicked_marker_id: data._id,\n            zoom: 18,\n            locations: arr,\n            center: {\n              lat: data.latitude,\n              lng: data.longitude\n            }\n          });\n        }\n      });\n      socket.on(\"monitoring_update\", id => {\n        if (id !== browserAdmin._id) {\n          //pull the monitoring grid and re-evaluate variables\n          //show loading UI\n          showLoading();\n          var monitoring_grid = [];\n          API.getMonitoringGrid().then(response => {\n            monitoring_grid = response.data;\n            utils.reconcileAllAgentsWithMonitoringGrid(mapDetails.laser_agents, response.data, browserAdmin._id).then(lasers => {\n              setMapDetails({ ...mapDetails,\n                monitoring_grid: monitoring_grid,\n                laser_agents: lasers\n              });\n              hideLoading();\n            }).catch(err => {\n              setMapDetails({ ...mapDetails,\n                monitoring_grid: monitoring_grid\n              });\n              hideLoading();\n            });\n          }).catch(err => {\n            setMapDetails({ ...mapDetails,\n              monitoring_grid: monitoring_grid\n            });\n            hideLoading();\n          });\n        }\n      });\n      getLocations();\n      getEmergencies();\n    }, []);\n\n    function showLoading() {\n      setMapDetails({ ...mapDetails,\n        isLoading: true\n      });\n    }\n\n    function hideLoading() {\n      setMapDetails({ ...mapDetails,\n        isLoading: false\n      });\n    }\n\n    function logout() {\n      logout();\n    }\n\n    const showMonitoredEmergency = async e => {\n      console.log(\"monitoring grid - \" + mapDetails.monitorign_grid);\n      const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n\n      if (emergency_full_row && emergency_full_row.emergency) {\n        var item = emergency_full_row.emergency;\n\n        switch (item.laser_type) {\n          case \"emergency\":\n            setMapDetails({ ...mapDetails,\n              clicked_user: item,\n              side_bar_open: true,\n              location_side_bar_open: false,\n              agent_side_bar_open: false,\n              center: {\n                lat: item.latitude,\n                lng: item.longitude\n              },\n              zoom: 19,\n              show_red_circle: true,\n              show_blue_circle: false,\n              clicked_marker_id: item._id\n            });\n\n          case \"call\":\n            setMapDetails({ ...mapDetails,\n              clicked_user: item,\n              side_bar_open: false,\n              location_side_bar_open: true,\n              agent_side_bar_open: false,\n              center: {\n                lat: item.latitude,\n                lng: item.longitude\n              },\n              zoom: 19,\n              show_red_circle: false,\n              show_blue_circle: true,\n              clicked_marker_id: item._id\n            });\n            break;\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"You are not monitoring any emergency or call at the moment\"\n        });\n      }\n    };\n\n    function showConfirmResolveEmergency(e) {\n      e.preventDefault();\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"emergency\",\n          status: true\n        },\n        message: \"Are you sure you want to mark this emergency issue as resolved ?\"\n      });\n    }\n\n    function showConfirmResolveLocation() {\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"location\",\n          status: true\n        },\n        message: \"Are you sure you want to mark this call as resolved ?\"\n      });\n    }\n\n    const removeAgentFromRoute = async (e, agent) => {\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            });\n\n            try {\n              //tell agent to leave the emergency\n              const result = await pubnub.publish({\n                message: {\n                  pn_gcm: {\n                    data: {\n                      notification_body: \"You need to abandon route. Tap to open app\",\n                      data: {},\n                      action: \"leave_route\"\n                    }\n                  }\n                },\n                channel: agent.agent._id,\n                sendByPost: false,\n                // true to send via POST\n                storeInHistory: false //override default storage options\n\n              });\n            } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n            //we set state and update the monitoring grid and the laser agents list\n\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" was successfully removed from monitoring the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {}\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    };\n\n    const removeAgentFromRouteAndCloseRouteResponse = async (e, route_response) => {\n      var agent = route_response.agent;\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            }); //End Refactor  ---------------------------------------------------------------------\n\n            var route_response_array = mapDetails.route_responses_from_agents;\n            route_response_array.splice(route_response_array.indexOf(route_response), 1); //persist route complete responses array\n\n            persistence.saveCompletedEmergenciesResponse(route_response_array); //we set state and update the monitoring grid and the laser agents list\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" was successfully removed from monitoring the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {},\n              route_responses_from_agents: route_response_array\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    };\n\n    const addAgentToMonitoring = async (e, agent) => {\n      const monitored_result = utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid);\n\n      if (monitored_result) {\n        var check_result = await utils.checkIfOtherAdminIsUsingAgent(browserAdmin._id, agent, mapDetails.monitoring_grid);\n\n        if (check_result) {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"Another admin has assigned agent \" + agent.agent.firstname + \" to an emergency\"\n          });\n        } else {\n          //we continue\n          //add agent to monitoring grid and save on the server\n          const grid_and_agents_array = await utils.setAgentOnMonitoringGridAndChangeAgentStatus(agent, mapDetails.monitoring_grid, browserAdmin._id, mapDetails.laser_agents);\n          var new_monitoring_grid = grid_and_agents_array[0];\n          var new_laser_agents = grid_and_agents_array[1];\n          const result = await API.saveMonitoringGrid(new_monitoring_grid);\n\n          if (result.data === \"successful\") {\n            //we get the emregency monitored from the monitoring grid which is the central source of truth\n            const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n            var emergency_monitored = emergency_full_row.emergency;\n\n            if (emergency_monitored) {\n              //Refactor  ---------------------------------------------------------------------\n              //we tell the agent to open the new route and go to the emergency or call\n              try {\n                const result = await pubnub.publish({\n                  message: {\n                    pn_gcm: {\n                      data: {\n                        notification_body: \"You have a new route. Tap to open app.\",\n                        data: emergency_monitored.phone_number ? {\n                          full_name: emergency_monitored.full_name,\n                          _id: emergency_monitored.user,\n                          phone_number: emergency_monitored.phone_number,\n                          latitude: emergency_monitored.latitude,\n                          longitude: emergency_monitored.longitude\n                        } : {\n                          full_name: emergency_monitored.full_name,\n                          _id: emergency_monitored.user,\n                          latitude: emergency_monitored.latitude,\n                          longitude: emergency_monitored.longitude\n                        },\n                        action: \"route_request\"\n                      }\n                    }\n                  },\n                  channel: agent.agent._id,\n                  sendByPost: false,\n                  // true to send via POST\n                  storeInHistory: false //override default storage options\n\n                });\n              } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n              //we subscribe the admin to the agents id channel\n\n\n              var list = mapDetails.channels_list;\n\n              if (list.indexOf(agent.agent._id) === -1) {\n                list.push(agent.agent._id);\n              } //Refactor  ---------------------------------------------------------------------\n\n\n              pubnub.subscribe({\n                channels: list\n              }); //End Refactor  ---------------------------------------------------------------------\n              //persist agents incase the user reloads the page or closes the browser\n\n              var assigned_agents = persistence.getAssignedAgents();\n              var new_assigned_agents = utils.addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents);\n              persistence.saveAssignedAgents(new_assigned_agents); //we then update state\n\n              setMapDetails({ ...mapDetails,\n                monitoring_grid: new_monitoring_grid,\n                laser_agents: new_laser_agents,\n                //channels_list: list,\n                action: \"message\",\n                action_message: \"Agent \" + agent.agent.firstname + \" has been successfully assigned to the emergency\"\n              });\n            }\n          }\n\n          if (result.data === \"unsuccessful\") {\n            //the grid was NOT successfully saved \n            //show message\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"The system could NOT successfully assign the agent to the emergency\"\n            });\n          }\n        }\n      } else {}\n    };\n\n    const startMonitoring = async (e, item) => {\n      try {\n        //check if another admin is monitoring the emergency\n        const boolean_value = await utils.checkIfEmergencyMonitoredByOtherAdmin(mapDetails.monitoring_grid, item, browserAdmin._id);\n\n        if (boolean_value) {\n          //the emergency is being monitored by another admin\n          //tell the browser admin about this\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"Another admin is already monitoring the selected emergency\"\n          });\n        } else {\n          //we continue by editing the monitoring_grid and persisting it\n          const new_monitoring_grid = await utils.setEmergencyOnMonitoringGrid(item, mapDetails.monitoring_grid, browserAdmin._id);\n          const result = await API.saveMonitoringGrid(new_monitoring_grid);\n\n          if (result.data === \"successful\") {\n            //the grid was successfully saved \n            //change monitoring grid in local state\n            //subscribe to channel if user chose to be tracked\n            //show message\n            var list = mapDetails.channels_list ? mapDetails.channels_list : []; //we subscribe to the items channel ONLY if the item is trackable\n\n            if (item.is_trackable) {\n              if (list.indexOf(item.user) === -1) {\n                //remove old user from list\n                //unsubscribe from old user\n                list.push(item.user);\n              } //Refactor  ---------------------------------------------------------------------\n\n\n              pubnub.subscribe({\n                channels: list\n              }); //Refactor End  ---------------------------------------------------------------------\n            }\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"You are now monitoring \" + item.full_name,\n              channels_list: list,\n              monitoring_grid: new_monitoring_grid\n            });\n          }\n\n          if (result.data === \"unsuccessful\") {\n            //the grid was NOT successfully saved \n            //show message\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"The system could not initiate the monitoring of that emergency\"\n            });\n          }\n        }\n      } catch (err) {\n        console.log({\n          err\n        }); //show message\n\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Error occurred initiating monitoring of emergency\"\n        });\n      }\n    };\n\n    const hideConfirm = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirm: {\n          action: \"\",\n          status: false\n        },\n        message: \"\"\n      });\n    };\n\n    const closeAction = e => {\n      setMapDetails({ ...mapDetails,\n        action: \"close\",\n        action_message: \"\"\n      });\n    };\n\n    const closeSideBar = e => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        selected_location: {},\n        selected_emergency: {},\n        clicked_marker_id: \"\"\n      });\n    };\n\n    const closeAgentSideBar = e => {\n      setMapDetails({ ...mapDetails,\n        clicked_agent: {},\n        agent_side_bar_open: false\n      });\n    };\n\n    const closeRouteResponse = route_response => {\n      let array = mapDetails.route_responses_from_agents;\n      array.splice(array.indexOf(route_response), 1);\n      setMapDetails({ ...mapDetails,\n        route_responses_from_agents: array\n      });\n    };\n\n    const getSelectedAgentsIds = () => {};\n\n    const setSelectedAgentsFromIds = ids => {}; //we get the monitoring grid from the server and update our variables\n\n\n    const getMonitoringGridFromServerAndReconcileAssignedAgents = async () => {\n      showLoading();\n      const response = await API.getMonitoringGrid();\n\n      if (response) {\n        setUpAssignedAgentsIfAny(response.data);\n        utils.getAdminEmergencyMonitored(browserAdmin._id, response.data).then(emergency_full_row => {\n          var admin_emergency = emergency_full_row.emergency;\n\n          if (admin_emergency) {\n            //we need to subscribe to the emergencies user id to receive location updates\n            if (mapDetails.channels_list.indexOf(admin_emergency.user) === -1) {\n              var list = mapDetails.channels_list.concat([admin_emergency.user]); //Refactor  ---------------------------------------------------------------------\n\n              pubnub.subscribe({\n                channels: list\n              }); //Refactor End ---------------------------------------------------------------------\n\n              console.log(response.data);\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"You are monitoring \" + admin_emergency.full_name,\n                monitoring_grid: response.data,\n                channels_list: list\n              });\n              console.log(mapDetails.monitoring_grid);\n              hideLoading();\n            } else {\n              //Refactor  ---------------------------------------------------------------------\n              pubnub.subscribe({\n                channels: mapDetails.channels_list\n              }); //Refactor End  ---------------------------------------------------------------------\n\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"You are monitoring \" + admin_emergency.full_name,\n                monitoring_grid: response.data\n              });\n              hideLoading();\n            }\n          } else {\n            setMapDetails({ ...mapDetails,\n              monitoring_grid: response.data\n            });\n            hideLoading();\n          }\n        }).catch(err => {\n          console.log(err);\n          setMapDetails({ ...mapDetails,\n            monitoring_grid: response.data\n          });\n          hideLoading();\n        });\n      } else {\n        //show appropriate message\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred. Please check the network.\"\n        });\n        hideLoading();\n      }\n    };\n\n    const setUpAssignedAgentsIfAny = async monitoring_grid => {\n      var assigned_agents = persistence.getAssignedAgents();\n\n      if (assigned_agents && assigned_agents.length > 0) {\n        var result = await utils.reconcileAssignedAgentsListWithMonitoringGrid(browserAdmin._id, assigned_agents, monitoring_grid); //result[0] //assigned agents list\n        //result[1] //laser agents\n\n        if (result[0].length > 0) {\n          persistence.saveAssignedAgents(result[0]); //we subscribe to the id of each agent\n\n          let list = mapDetails.channels_list.concat(result[0]); //Refactor  ---------------------------------------------------------------------\n\n          pubnub.subscribe({\n            channels: list\n          }); //Refactor End  ---------------------------------------------------------------------\n\n          setMapDetails({ ...mapDetails,\n            laser_agents: result[1],\n            channels_list: list\n          });\n        } else {\n          persistence.deleteAssignedAgents();\n          setMapDetails({ ...mapDetails,\n            laser_agents: result[1]\n          });\n        }\n      }\n    };\n\n    const removeAgentFromEmergencyAfterDecliningRequest = async agent => {\n      showLoading();\n      const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n\n      if (result) {\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if (save_result) {\n          if (save_result.data === \"successful\") {\n            //persist agents incase the user reloads the page or closes the browser\n            var assigned_agents = persistence.getAssignedAgents();\n            var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents);\n\n            if (new_assigned_agents.length > 0) {\n              persistence.saveAssignedAgents(new_assigned_agents);\n            } else {\n              persistence.deleteAssignedAgents();\n            } //Refactor  ---------------------------------------------------------------------\n            //unsubscribe from agents channel\n\n\n            pubnub.unsubscribe({\n              channels: [agent.agent._id]\n            }); //Refactor End  ---------------------------------------------------------------------\n            //we set state and update the monitoring grid and the laser agents list\n\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"Agent \" + agent.agent.firstname + \" declined the request to attend to the emergency\",\n              monitoring_grid: result[0],\n              laser_agents: result[1],\n              agent_side_bar_open: false,\n              clicked_agent: {}\n            });\n            hideLoading();\n          }\n\n          if (save_result.data === \"unsuccessful\") {\n            hideLoading();\n            setMapDetails({ ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred removing the agent from the emergency\"\n            });\n          }\n        } else {\n          hideLoading();\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n          });\n        }\n      } else {\n        hideLoading();\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred removing the agent from the emergency\"\n        });\n      }\n    }; //this is not showing the agents in the same lga\n\n\n    const getAgentsAroundEmergency = async () => {\n      //show the agents around an emergency\n      //search to see if an emergency is being monitored by the admin browser\n      utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid).then(async boolean_value => {\n        if (boolean_value) {\n          //Refactor  ---------------------------------------------------------------------\n          //ideally this should be sent to those agents in the emergency's LGA\n          //for now we are publishing to all agents \n          try {\n            await pubnub.publish({\n              message: {\n                pn_gcm: {\n                  data: {\n                    notification_body: \"Tap to open the Laser App\",\n                    data: {},\n                    action: \"send_location\"\n                  }\n                }\n              },\n              channel: mapDetails.tracked_area,\n              sendByPost: false,\n              // true to send via POST\n              storeInHistory: false //override default storage     \n\n            });\n          } catch (status) {} //Refactor End  ---------------------------------------------------------------------\n\n\n          utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid).then(emergency_monitored => {\n            //admin is monitoring an emergency or call\n            //check for the agents in emergency LGA\n            utils.setAgentsInFocus(mapDetails.agents_in_focus, emergency_monitored.emergency, mapDetails.laser_agents).then(result => {\n              //we set the state for the laser agents and the agents in focus\n              setMapDetails({ ...mapDetails,\n                laser_agents: result[0],\n                agents_in_focus: result[1]\n              });\n            }).catch(err => {\n              setMapDetails({ ...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred seeking agents around emergency\"\n              });\n            });\n          }).catch(err => {});\n        } else {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"You are NOT monitoring any emergency or call\"\n          });\n        }\n      }).catch(err => {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred seeking agents around emergency\"\n        });\n      });\n    };\n\n    const latestClicked = item => {\n      switch (item.laser_type) {\n        case \"emergency\":\n          setMapDetails({ ...mapDetails,\n            clicked_user: item,\n            side_bar_open: true,\n            location_side_bar_open: false,\n            agent_side_bar_open: false,\n            center: {\n              lat: item.latitude,\n              lng: item.longitude\n            },\n            zoom: 19,\n            show_red_circle: true,\n            show_blue_circle: false,\n            clicked_marker_id: item._id\n          });\n          break;\n\n        case \"call\":\n          setMapDetails({ ...mapDetails,\n            clicked_user: item,\n            side_bar_open: false,\n            location_side_bar_open: true,\n            agent_side_bar_open: false,\n            center: {\n              lat: item.latitude,\n              lng: item.longitude\n            },\n            zoom: 19,\n            show_red_circle: false,\n            show_blue_circle: true,\n            clicked_marker_id: item._id\n          });\n          break;\n      }\n    };\n\n    const openManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        manual_location_side_bar: true,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        agent_side_bar_open: false\n      });\n    };\n\n    const onCalendarOpen = () => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        agent_side_bar_open: false\n      });\n    };\n\n    const onDateChange = date => {\n      //We add 1 hour to the date because the date axios is sending to the server is 1 hour behind what it should be\n      date = new Date(date);\n      date.setHours(date.getHours() + 1);\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        date: date,\n        show_red_circle: false,\n        show_blue_circle: false,\n        clicked_marker_id: \" \",\n        action: \"loading\",\n        action_message: \"\",\n        selected_call: \"Calls (All)\",\n        selected_emergency: \"Emergencies (All)\"\n      });\n      getLocationsDate(date);\n      getEmergenciesDate(date);\n    };\n\n    const onCallsChanged = e => {\n      e.preventDefault();\n      const target = e.target;\n      const value = target.value;\n      const name = target.name;\n      let arr = [];\n\n      if (mapDetails.locations.length > 0) {\n        if (value === \"Calls (All)\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_locations: mapDetails.locations,\n            side_bar_open: false,\n            selected_call: value,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_blue_circle: false\n          });\n        } else if (value === \"None\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_locations: [],\n            side_bar_open: false,\n            selected_call: value,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_blue_circle: false\n          });\n        } else {\n          mapDetails.locations.map(emer => {\n            if (emer.reason.includes(value.toLowerCase())) {\n              arr.push(emer);\n            }\n          });\n\n          if (arr.length > 0) {\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_locations: arr,\n              selected_call: value,\n              side_bar_open: false,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_blue_circle: false\n            });\n          } else {\n            //show message that there are no locations found for that parameter\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_locations: [],\n              selected_call: value,\n              side_bar_open: false,\n              location_side_bar_open: false,\n              show_blue_circle: false\n            });\n          }\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          selected_call: value\n        });\n      }\n    };\n\n    const onEmergenciesChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      const name = target.name;\n      let arr = [];\n\n      if (mapDetails.emergencies.length > 0) {\n        if (value === \"Emergencies (All)\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_emergencies: mapDetails.emergencies,\n            side_bar_open: false,\n            selected_emergency: value,\n            location_side_bar_open: false,\n            agent_side_bar_open: false,\n            show_red_circle: false\n          });\n        } else if (value === \"None\") {\n          setMapDetails({ ...mapDetails,\n            play_sound: false,\n            filtered_emergencies: [],\n            selected_emergency: value,\n            side_bar_open: false,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            show_red_circle: false\n          });\n        } else {\n          mapDetails.emergencies.map(emer => {\n            if (emer.reasons && emer.reasons.length > 0) {\n              emer.reasons.map(reason => {\n                if (value.toLowerCase().includes(reason)) {\n                  arr.push(emer);\n                }\n              });\n            }\n          });\n\n          if (arr.length > 0) {\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_emergencies: arr,\n              selected_emergency: value,\n              side_bar_open: false,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_red_circle: false\n            });\n          } else {\n            //show message that there are no emregencies found for that parameter\n            setMapDetails({ ...mapDetails,\n              play_sound: false,\n              filtered_emergencies: [],\n              side_bar_open: false,\n              selected_emergency: value,\n              agent_side_bar_open: false,\n              location_side_bar_open: false,\n              show_red_circle: false\n            });\n          }\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          selected_emergency: value\n        });\n      }\n    };\n\n    const onCallClicked = (location, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_user: location,\n        clicked_agent: {},\n        side_bar_open: false,\n        agent_side_bar_open: false,\n        manual_location_side_bar: false,\n        location_side_bar_open: true,\n        center: {\n          lat: location.latitude,\n          lng: location.longitude\n        },\n        zoom: 19,\n        show_red_circle: false,\n        show_blue_circle: true,\n        clicked_marker_id: location._id\n      });\n    };\n\n    const onEmergencyClicked = (emergency, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_user: emergency,\n        clicked_agent: {},\n        side_bar_open: true,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        location_side_bar_open: false,\n        center: {\n          lat: emergency.latitude,\n          lng: emergency.longitude\n        },\n        zoom: 19,\n        show_red_circle: true,\n        show_blue_circle: false,\n        clicked_marker_id: emergency._id\n      });\n    };\n\n    const onAgentClicked = (agent, e) => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false,\n        clicked_agent: agent,\n        manual_location_side_bar: false,\n        agent_side_bar_open: true\n      });\n    };\n\n    const getLocationsMarkers = () => {\n      let locations_ui;\n\n      if (mapDetails.filtered_locations && mapDetails.filtered_locations.length > 0) {\n        locations_ui = mapDetails.filtered_locations.map(loc => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onCallClicked(loc, e),\n            name: loc.reason,\n            title: loc.full_name,\n            position: {\n              lat: loc.latitude,\n              lng: loc.longitude\n            },\n            icon: {\n              url: mapDetails.clicked_marker_id === loc._id ? blue_circle : call_icon\n            }\n          }, loc._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1551,\n            columnNumber: 25\n          }, _this);\n        });\n      } else {\n        locations_ui = \"\";\n      }\n\n      return locations_ui;\n    };\n\n    const getEmergenciesMarkers = () => {\n      let emergencies_ui;\n      let emergencies_to_show = mapDetails.filtered_emergencies.concat(mapDetails.filtered_emergencies);\n\n      if (emergencies_to_show.length > 0) {\n        emergencies_ui = emergencies_to_show.map(emer => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onEmergencyClicked(emer, e),\n            name: emer.reasons[0],\n            title: emer.full_name,\n            position: {\n              lat: emer.latitude,\n              lng: emer.longitude\n            },\n            icon: {\n              url: mapDetails.clicked_marker_id === emer._id ? red_circle : emergency_icon\n            }\n          }, emer._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1575,\n            columnNumber: 22\n          }, _this);\n        });\n      } else {\n        emergencies_ui = \"\";\n      }\n\n      return emergencies_ui;\n    };\n\n    const getAgentMarkers = () => {\n      let agents_ui;\n\n      if (mapDetails.laser_agents.length > 0) {\n        agents_ui = mapDetails.laser_agents.map((agent, i) => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            onClick: e => onAgentClicked(agent, e),\n            name: agent.full_address,\n            title: agent.full_address,\n            position: {\n              lat: agent.latitude,\n              lng: agent.longitude\n            } //\n            ,\n            icon: {\n              url: getAgentIcon(agent),\n              anchor: new google.maps.Point(40, 40),\n              scaledSize: new google.maps.Size(40, 40)\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1598,\n            columnNumber: 26\n          }, _this);\n        });\n      } else {\n        agents_ui = \"\";\n      }\n\n      return agents_ui;\n    };\n\n    const getAgentIcon = agent => {\n      if (agent) {\n        //we got the icon\n        switch (agent.agent.department) {\n          case \"police\":\n            switch (agent.status) {\n              case \"idle\":\n                return police_car;\n                break;\n\n              case \"infocus\":\n                return police_car_in_focus;\n                break;\n\n              case \"using\":\n                return police_car_using;\n                break;\n\n              case \"using_by_other\":\n                return police_car_using_other;\n                break;\n            }\n\n            break;\n\n          case \"fire\":\n            switch (agent.status) {\n              case \"idle\":\n                return fire_car;\n                break;\n\n              case \"infocus\":\n                return fire_car_in_focus;\n                break;\n\n              case \"using\":\n                return fire_car_using;\n                break;\n\n              case \"using_by_other\":\n                return fire_car_using_other;\n                break;\n            }\n\n            break;\n\n          case \"hospital\":\n            switch (agent.status) {\n              case \"idle\":\n                return ambulance;\n                break;\n\n              case \"infocus\":\n                return ambulance_in_focus;\n                break;\n\n              case \"using\":\n                return ambulance_using;\n                break;\n\n              case \"using_by_other\":\n                return ambulance_using_other;\n                break;\n            }\n\n            break;\n        }\n      }\n    };\n\n    const getEmergencies = async () => {\n      const response = await API.getEmergencies({\n        date: today\n      });\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"err_emergency_load\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.emergencies && response.data.emergencies.length > 0) {\n        var loc = mapDetails.latest;\n\n        for (var i = 0; i < response.data.emergencies.length; i++) {\n          loc.push(response.data.emergencies[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            latest: loc,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            latest: loc,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n      }\n    };\n\n    const getLocations = async () => {\n      const response = await API.getLocations({\n        date: today\n      });\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"err_calls_load\",\n          locations: [],\n          filtered_locations: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.locations && response.data.locations.length > 0) {\n        var loc = mapDetails.latest;\n\n        for (var i = 0; i < response.data.locations.length; i++) {\n          loc.push(response.data.locations[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            latest: loc,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            latest: loc,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          locations: [],\n          filtered_locations: []\n        });\n      }\n    };\n\n    const handleSongFinishedPlaying = () => {\n      setMapDetails({ ...mapDetails,\n        play_sound: false\n      });\n    };\n\n    const onFieldChanged = e => {\n      const target = e.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      setMapDetails({ ...mapDetails,\n        [name]: value\n      });\n    };\n\n    const onManualCallChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      setMapDetails({ ...mapDetails,\n        selected_manual_call: value\n      });\n    };\n\n    const onManualGenderChanged = e => {\n      const target = e.target;\n      const value = target.value;\n      setMapDetails({ ...mapDetails,\n        selected_manual_gender: value\n      });\n    };\n\n    const onSubmitManualCallDetails = e => {\n      e.preventDefault();\n\n      if (mapDetails.selected_manual_call.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid reason for call from the drop down\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_phone.lenght <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid phone number\"\n        });\n        return;\n      }\n\n      if (mapDetails.selected_manual_gender.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid gender\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_name.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter a valid name\"\n        });\n        return;\n      }\n\n      if (mapDetails.manual_address.length <= 0) {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"Please enter an address\"\n        });\n        return;\n      } //show loading\n      //translate address to longitude and latitude\n\n\n      setMapDetails({ ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n      });\n      Geocode.fromAddress(mapDetails.manual_address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n        };\n        saveManualLocation(location);\n      }, error => {\n        console.error(error);\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"We could not find that address\",\n          showConfirmManualLocation: true\n        });\n      });\n    };\n\n    const showConfirmManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirmManualLocation: true\n      });\n    };\n\n    const hideConfirmManualLocation = () => {\n      setMapDetails({ ...mapDetails,\n        showConfirmManualLocation: false\n      });\n    };\n\n    const tryAgainClicked = () => {\n      _this.hideConfirmManualLocation();\n\n      setMapDetails({ ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n      });\n      Geocode.fromAddress(mapDetails.manual_address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n        };\n\n        _this.saveManualLocation(location);\n      }, error => {\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"We could not find that address\"\n        });\n      });\n    };\n\n    const continueConfirmAddressNotFoundClicked = () => {\n      _this.hideConfirmManualLocation();\n      /*\n       this.setState({\n          action: \"loading\",\n          action_message: \"\"\n      });\n       var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n      }\n       this.saveManualLocation(location);*/\n\n    };\n\n    const closeConfirmAddressNotFoundClicked = () => {\n      setMapDetails({ ...mapDetails,\n        action: \"message\",\n        action_message: \"\"\n      });\n\n      _this.hideConfirmManualLocation();\n    };\n\n    const saveManualLocation = async location => {\n      const response = await API.createManualLocation(location);\n\n      if (response == \"error\") {\n        //show error message\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"An error occurred saving the location. Please try again\"\n        });\n        return;\n      }\n\n      if (response && response.data) {\n        if (response.data.response === \"out_of_lagos\") {\n          setMapDetails({ ...mapDetails,\n            action: \"message\",\n            action_message: \"That location is outside Lagos State\"\n          });\n          return;\n        }\n\n        setMapDetails({ ...mapDetails,\n          action: \"message\",\n          action_message: \"The location has been saved and is displayed on the map\",\n          selected_manual_call: \"Emergency Management(LASEMA)\",\n          selected_manual_gender: \"Male\",\n          manual_name: \"\",\n          manual_phone: \"\",\n          manual_address: \"\",\n          manual_location_side_bar: false\n        });\n        /*this.setState(state => {\n            let arr = state.locations;\n            let lat = state.latest;\n            \n            lat.push(response.data.response);\n            arr.push(response.data.response)\n             return {\n                play_sound: true,\n                latest: lat,\n                clicked_marker_id: response.data.response._id,\n                zoom: 18,\n                locations: arr,\n                center: {\n                    lat: response.data.response.latitude,\n                    lng: response.data.response.longitude\n                }\n            }\n        })*/\n      }\n    };\n\n    const getLocationsDate = async date => {\n      const response = await API.getLocations({\n        date\n      });\n\n      if (response == \"error\") {\n        setMapDetails({ ...mapDetails,\n          action: \"err_calls_load\",\n          locations: [],\n          filtered_locations: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.locations) {\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            locations: response.data.locations,\n            filtered_locations: response.data.locations\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          locations: [],\n          filtered_locations: []\n        });\n      }\n    };\n\n    const getEmergenciesDate = async date => {\n      const response = await API.getEmergencies({\n        date\n      });\n\n      if (response == \"error\") {\n        setMapDetails({ ...mapDetails,\n          action: \"err_emergency_load\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n        return;\n      }\n\n      if (response && response.data && response.data.emergencies) {\n        if (mapDetails.action === \"loading\") {\n          setMapDetails({ ...mapDetails,\n            action: \"close\",\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        } else {\n          setMapDetails({ ...mapDetails,\n            emergencies: response.data.emergencies,\n            filtered_emergencies: response.data.emergencies\n          });\n        }\n      } else {\n        setMapDetails({ ...mapDetails,\n          action: \"close\",\n          emergencies: [],\n          filtered_emergencies: []\n        });\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"laser-parent-div\",\n      style: mapStyle,\n      children: [/*#__PURE__*/_jsxDEV(Latest, {\n        latest: mapDetails.latest,\n        latestClicked: latestClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2120,\n        columnNumber: 13\n      }, _this), mapDetails.show_location_side_bar, mapDetails.side_bar_open && /*#__PURE__*/_jsxDEV(Sidebar, {\n        closeSidebar: closeSideBar,\n        startMonitoring: startMonitoring,\n        emergency: mapDetails.clicked_user,\n        resolve: showConfirmResolveEmergency\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2122,\n        columnNumber: 44\n      }, _this), mapDetails.showConfirmManualLocation ? /*#__PURE__*/_jsxDEV(ConfirmAddressNotFound, {\n        closeConfirmAddressNotFoundClicked: continueConfirmAddressNotFoundClicked,\n        tryAgainClicked: continueConfirmAddressNotFoundClicked,\n        hideConfirmManualLocation: hideConfirmManualLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2123,\n        columnNumber: 55\n      }, _this) : \"\", mapDetails.manual_location_side_bar ? /*#__PURE__*/_jsxDEV(AddCallManually, {\n        onFieldChanged: onFieldChanged,\n        closeSidebar: closeSideBar,\n        selected_manual_call: mapDetails.selected_manual_call,\n        selected_manual_gender: mapDetails.selected_manual_gender,\n        manual_address: mapDetails.manual_address,\n        manual_name: mapDetails.manual_name,\n        onManualCallChanged: onManualCallChanged,\n        onManualGenderChanged: onManualGenderChanged,\n        onSubmitManualCallDetails: onSubmitManualCallDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2124,\n        columnNumber: 54\n      }, _this) : \"\", mapDetails.agent_side_bar_open ? /*#__PURE__*/_jsxDEV(AgentDetails, {\n        removeAgentFromRoute: removeAgentFromRoute,\n        closeAgentSideBar: closeAgentSideBar,\n        addAgentToMonitoring: addAgentToMonitoring,\n        agent: mapDetails.clicked_agent,\n        user: mapDetails.clicked_user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2127,\n        columnNumber: 50\n      }, _this) : \"\", /*#__PURE__*/_jsxDEV(TopPanel, {\n        showMonitoredEmergency: showMonitoredEmergency,\n        openManualLocation: openManualLocation,\n        logout: logout,\n        onCalendarOpen: onCalendarOpen,\n        onDateChange: onDateChange,\n        date: mapDetails.date,\n        selected_call: mapDetails.selected_call,\n        onCallsChanged: onCallsChanged,\n        selected_emergency: mapDetails.selected_emergency,\n        onEmergenciesChanged: onEmergenciesChanged,\n        getAgentsAroundEmergency: getAgentsAroundEmergency\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2130,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Map, {\n        google: google,\n        style: mapStyle,\n        onReady: mapDetails.fetchPlaces,\n        initialCenter: mapDetails.center,\n        center: mapDetails.center,\n        zoom: mapDetails.zoom,\n        children: [getLocationsMarkers(), getEmergenciesMarkers(), getAgentMarkers()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2133,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Loader, {\n        isLoading: mapDetails.isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2146,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Action, {\n        action: mapDetails.action,\n        closeAction: closeAction,\n        message: mapDetails.action_message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2148,\n        columnNumber: 13\n      }, _this), mapDetails.sound, mapDetails.route_responses_from_agents.length > 0 ? /*#__PURE__*/_jsxDEV(RouteStatus, {\n        route_response: mapDetails.route_responses_from_agents[mapDetails.route_responses_from_agents.length - 1],\n        removeAgentFromRouteAndCloseRouteResponse: removeAgentFromRouteAndCloseRouteResponse,\n        closeRouteResponse: closeRouteResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2153,\n        columnNumber: 70\n      }, _this) : \"\", mapDetails.showConfirm.status === true ? /*#__PURE__*/_jsxDEV(ConfirmAction, {\n        yesClicked: mapDetails.showConfirm.action === \"emergency\" ? mapDetails.resolveEmergency : mapDetails.resolveCall,\n        noClicked: hideConfirm,\n        message: mapDetails.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2157,\n        columnNumber: 56\n      }, _this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2119,\n      columnNumber: 8\n    }, _this);\n  }(logout);\n};\n\n_s(Dashboard, \"r3nLiOwOt5IsHriRi9VB73rJtc8=\", false, function () {\n  return [usePubNub];\n});\n\n_c = Dashboard;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI'\n})(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","red_circle","blue_circle","emergency_icon","call_icon","police_car","police_car_using","police_car_using_other","police_car_in_focus","fire_car","fire_car_using","fire_car_using_other","fire_car_in_focus","ambulance","ambulance_using","ambulance_using_other","ambulance_in_focus","alert","Map","Marker","GoogleApiWrapper","io","Sidebar","Action","AgentDetails","LocationSidebar","AddCallManually","ConfirmAddressNotFound","TopPanel","Latest","RouteStatus","ConfirmAction","Utils","Persistence","Sound","usePubNub","Geocode","Loader","API","AuthHelperMethods","Auth","utils","persistence","mapStyle","height","width","socket_io_url","todays_date","Date","toISOString","today","pubnub","browserAdmin","Dashboard","logout","google","mapDetails","setMapDetails","showConfirm","action","status","latest","locations","emergencies","filtered_locations","filtered_emergencies","side_bar_open","agent_side_bar_open","location_side_bar_open","manual_location_side_bar","clicked_user","clicked_agent","center","lat","lng","selected_call","selected_emergency","zoom","show_red_circle","show_blue_circle","clicked_marker_id","play_sound","channels_list","agents_in_focus","laser_agents","monitoring_grid","responses_available","route_responses_from_agents","action_message","tracked_area","date","message","selected_manual_call","selected_manual_gender","manual_name","manual_phone","manual_address","showConfirmManualLocation","isLoading","unsubscribe","channels","getAdmin","subscribe","getMonitoringGridFromServerAndReconcileAssignedAgents","responses","getCompletedEmergenciesResponse","length","addListener","st","category","event","getAdminEmergencyMonitored","_id","then","emergency_full_row","emergency_monitored","emergency","channel","userMetadata","arr","map","user","latitude","longitude","catch","err","console","log","agent","updateAgentLocation","sorted_agents","emergency_agent","showLoading","assigned_agents","getAssignedAgents","getAgentFromAssignedAgentsInPersistence","agent_found","removeAgentFromEmergencyAfterDecliningRequest","firstname","push","saveCompletedEmergenciesResponse","socket","on","attempt","data","fe","id","getMonitoringGrid","response","reconcileAllAgentsWithMonitoringGrid","lasers","hideLoading","getLocations","getEmergencies","showMonitoredEmergency","e","monitorign_grid","item","laser_type","showConfirmResolveEmergency","preventDefault","showConfirmResolveLocation","removeAgentFromRoute","result","removeAgentFromBrowserAdminMonitoringGrid","save_result","saveMonitoringGrid","new_assigned_agents","removeAgentFromListOfAssignedAgentsForPersistsnce","saveAssignedAgents","deleteAssignedAgents","publish","pn_gcm","notification_body","sendByPost","storeInHistory","removeAgentFromRouteAndCloseRouteResponse","route_response","route_response_array","splice","indexOf","addAgentToMonitoring","monitored_result","checkIfEmergencyMonitoredByBrowserAdmin","check_result","checkIfOtherAdminIsUsingAgent","grid_and_agents_array","setAgentOnMonitoringGridAndChangeAgentStatus","new_monitoring_grid","new_laser_agents","phone_number","full_name","list","addAgentToListOfAssignedAgentsForPersistence","startMonitoring","boolean_value","checkIfEmergencyMonitoredByOtherAdmin","setEmergencyOnMonitoringGrid","is_trackable","hideConfirm","closeAction","closeSideBar","selected_location","closeAgentSideBar","closeRouteResponse","array","getSelectedAgentsIds","setSelectedAgentsFromIds","ids","setUpAssignedAgentsIfAny","admin_emergency","concat","reconcileAssignedAgentsListWithMonitoringGrid","getAgentsAroundEmergency","setAgentsInFocus","latestClicked","openManualLocation","onCalendarOpen","onDateChange","setHours","getHours","getLocationsDate","getEmergenciesDate","onCallsChanged","target","value","name","emer","reason","includes","toLowerCase","onEmergenciesChanged","reasons","onCallClicked","location","onEmergencyClicked","onAgentClicked","getLocationsMarkers","locations_ui","loc","url","getEmergenciesMarkers","emergencies_ui","emergencies_to_show","getAgentMarkers","agents_ui","i","full_address","getAgentIcon","anchor","maps","Point","scaledSize","Size","department","sortDates","handleSongFinishedPlaying","onFieldChanged","type","checked","onManualCallChanged","onManualGenderChanged","onSubmitManualCallDetails","lenght","fromAddress","results","geometry","saveManualLocation","error","hideConfirmManualLocation","tryAgainClicked","continueConfirmAddressNotFoundClicked","closeConfirmAddressNotFoundClicked","createManualLocation","show_location_side_bar","fetchPlaces","sound","resolveEmergency","resolveCall","apiKey"],"sources":["/Users/user/laser/laser_dashboard_frontend/client/src/Dashboard.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport red_circle from './icons/emergency_with_circle.gif';\nimport blue_circle from './icons/call_with_circle.gif';\nimport emergency_icon from './icons/emergency.gif';\nimport call_icon from './icons/call.gif';\nimport './App.css'; \n\n//import police_car from './icons/vector/police_car.svg'\n//import police_car_enroute from './icons/vector/police_car_yellow.svg'\n\nimport police_car from './icons/PNG/police_car.png'\nimport police_car_using from './icons/PNG/police_car_using.png'\nimport police_car_using_other from './icons/PNG/police_car_other_using.png'\nimport police_car_in_focus from './icons/PNG/police_car_in_focus.png'\n\nimport fire_car from './icons/PNG/fire_truck.png'\nimport fire_car_using from './icons/PNG/fire_truck_using.png'\nimport fire_car_using_other from './icons/PNG/fire_truck_other_using.png'\nimport fire_car_in_focus from './icons/PNG/fire_truck_in_focus.png'\n\nimport ambulance from './icons/PNG/ambulance.png'\nimport ambulance_using from './icons/PNG/ambulance_using.png'\nimport ambulance_using_other from './icons/PNG/ambulance_other_using.png'\nimport ambulance_in_focus from './icons/PNG/ambulance_in_focus.png'\n\nimport alert from \"./sounds/alert.mp3\";\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nimport io from \"socket.io-client\";\nimport Sidebar from './components/Sidebar';\nimport Action from './components/Action';\nimport AgentDetails from './components/AgentDetails';\nimport LocationSidebar from './components/LocationSideBar';\nimport AddCallManually from './components/AddCallManually';\nimport ConfirmAddressNotFound from './components/ConfirmAddressNotFound';\nimport TopPanel from './components/TopPanel';\nimport Latest from './components/Latest';\nimport RouteStatus from './components/RouteStatus';\nimport ConfirmAction from './components/ConfirmAction';\nimport Utils from './utils/Utils';\nimport Persistence from './utils/Persistence';\nimport Sound from 'react-sound';\n\n//Refactor \nimport { usePubNub } from 'pubnub-react'\n\nimport Geocode from \"react-geocode\";\n\nimport Loader from './components/Loader';\n\nimport * as API from './api/Api';\n\nimport AuthHelperMethods from './auth/AuthHelperMethods';\n\nconst Auth = new AuthHelperMethods();\n\nconst utils = new Utils();\nconst persistence = new Persistence();\n\nconst mapStyle = {\n    height: '100vh', \n    width: '100%'\n}\n\n//const socket_io_url = 'http://18.192.254.193';\nconst socket_io_url = 'http://192.168.233.39:3080';\n\nlet todays_date = new Date().toISOString();\n\nlet today = null;\n\nlet pubnub = null;\n\nlet browserAdmin = null;\n\nconst Dashboard = ({logout, google}) => {\n    pubnub = usePubNub();\n\n    const [mapDetails, setMapDetails] = useState({\n        showConfirm: {\n            action: \"\",\n            status: false\n        },\n        latest: [],\n        locations: [], \n        emergencies: [], \n        filtered_locations: [],\n        filtered_emergencies: [],\n        side_bar_open: false, \n        agent_side_bar_open: false, \n        location_side_bar_open: false, \n        manual_location_side_bar: false,\n        clicked_user: {}, \n        clicked_agent: {},\n        center: {lat: 6.5244,lng: 3.3792}, \n        selected_call:\"Calls (All)\", \n        selected_emergency:\"Emergencies (All)\",\n        zoom : 11,\n        show_red_circle: false,\n        show_blue_circle: false,\n        clicked_marker_id: \"\",\n        play_sound: false,\n        channels_list: [\"lllaser\"],\n\n        agents_in_focus: [],\n        laser_agents:[], //all agents\n        monitoring_grid: [],\n        responses_available: false,\n\n        route_responses_from_agents: [],\n        action: \"loading\",\n        action_message: \"\",\n        tracked_area: \"lllaser\", //the user in which the admin is currently viewing whether the user wants to be tracked or not\n        date: new Date(),\n        message: \"\",\n\n        selected_manual_call:\"Emergency Management(LASEMA)\",\n        selected_manual_gender:\"Male\",\n        manual_name: \"\",\n        manual_phone: \"\",\n        manual_address: \"\",\n        showConfirmManualLocation: false,\n\n        isLoading: false\n    })\n\n    useEffect(() => {\n        pubnub.unsubscribe({\n            channels:   mapDetails.channels_list\n        });\n\n    }, [])\n\n    useEffect(() => {\n        browserAdmin = Auth.getAdmin();\n\n        //Refactor  ---------------------------------------------------------------------\n\n        //subscribe to the parent channel to receive location updates from agents\n        pubnub.subscribe({\n            channels:   mapDetails.channels_list\n        })\n\n        //Refactor End  ---------------------------------------------------------------------\n\n        setMapDetails({...mapDetails,\n            laser_agents: []\n        })\n        \n        getMonitoringGridFromServerAndReconcileAssignedAgents();\n\n        var responses = persistence.getCompletedEmergenciesResponse();\n\n        if(responses && responses.length > 0){\n            setMapDetails({...mapDetails,\n                route_responses_from_agents: responses\n            })\n        }\n\n        //Refactor  ---------------------------------------------------------------------\n\n        pubnub.addListener({\n\n            status: (st) => {\n\n                if(st.category === \"PNNetworkUpCategory\"){\n                    setMapDetails({...mapDetails,\n                        action: \"message\",\n                        action_message: \"You are back online.\"\n                    })\n                    getMonitoringGridFromServerAndReconcileAssignedAgents();\n                }\n\n                if(st.category === \"PNConnectedCategory\"){\n                    //intentionally left blank\n                }\n\n                if (st.category === \"PNReconnectedCategory\") {\n                    setMapDetails({...mapDetails,\n                        action: \"message\",\n                        action_message: \"You are back online.\"\n                    })\n                    getMonitoringGridFromServerAndReconcileAssignedAgents();\n                }\n\n                if (st.category === \"PNNetworkIssuesCategory\") {\n                    setMapDetails({...mapDetails,\n                        action: \"message\",\n                        action_message: \"It appears there is a network issue.\"\n                    })\n                }\n\n                if (st.category === \"PNNetworkDownCategory\") {\n                    setMapDetails({...mapDetails,\n                        action: \"message\",\n                        action_message: \"It appears the network is down.\"\n                    })\n                }\n\n                if (st.category === \"PNTimeoutCategory\") {\n                    setMapDetails({...mapDetails,\n                        action: \"message\",\n                        action_message: \"Could not connect to the internet.\"\n                    })\n                }\n        },\n        message: (event) => {\n\n            const message = event.message;\n\n            /*var tracked_user_id =   mapDetails.tracked_users.find(id => id === message.channel);\n\n            if(tracked_user_id){\n                    //the message is from a user currently being monitored\n                    if(message.userMetadata && message.userMetadata.action === \"user_location_update\"){\n                        var arr =   mapDetails.emergencies.map(emergency => {\n                            if(emergency.user === tracked_user_id){\n                                emergency.latitude = message.message.latitude;\n                                emergency.longitude = message.message.longitude;\n                                return emergency;\n                            }\n                            else{\n                                return emergency;\n                            }\n                        })\n\n                        //var found_emergency =   mapDetails.emergencies.find(emergency => emergency.user ===   mapDetails.tracked_user_id);\n\n                        (state => {\n                            return{\n                                emergencies: arr\n                            }\n                        })\n                    }\n            }*/\n\n            utils.getAdminEmergencyMonitored(browserAdmin._id,   mapDetails.monitoring_grid)\n                            .then(emergency_full_row => {\n                                var emergency_monitored = emergency_full_row.emergency;\n\n                                if(message.channel === emergency_monitored._id ){\n                                    if(message.userMetadata && message.userMetadata.action === \"user_location_update\"){\n                                        \n                                        var arr =   mapDetails.emergencies.map(emergency => {\n                                            if(emergency.user === emergency_monitored.user){\n                                                emergency.latitude = message.message.latitude;\n                                                emergency.longitude = message.message.longitude;\n                                                return emergency;\n                                            }\n                                            else{\n                                                return emergency;\n                                            }\n                                        })\n                    \n                                        //var found_emergency =   mapDetails.emergencies.find(emergency => emergency.user ===   mapDetails.tracked_user_id);\n                    \n                                    setMapDetails({\n                                        ...mapDetails,\n                                        emergencies: arr\n                                    })\n                                    }\n                                }\n                            })\n                            .catch(err => {\n\n                            })\n            \n            //if(message.channel ===   mapDetails.tracked_area ){\n            \n            if(message.userMetadata && message.userMetadata.action === \"agent_location_update\"){\n                try{\n                    console.log(message.message.agent)\n                }\n                catch(err){\n                    \n                }\n\n                utils.updateAgentLocation(message.message,   mapDetails.laser_agents,   mapDetails.monitoring_grid, browserAdmin._id)\n                            .then(sorted_agents => {\n                                setMapDetails({\n                                    ...mapDetails,\n                                        laser_agents: sorted_agents\n                                    \n                                })\n                            }) \n                            .catch(err => {\n                                console.log(err)\n                            })\n            }\n            //}\n\n            //we check the response of an agent that has been assigned, whether the agent sent a message to decilne\n            if(message.userMetadata && message.userMetadata.action === \"route_request_response\"){\n                    //we check which agent is responding to the emergency request\n                    var emergency_agent = message.message;\n\n                    if(message.channel === emergency_agent._id ){\n                        showLoading();\n\n                        var assigned_agents = persistence.getAssignedAgents();\n\n                        //we get the agent full profile from the persisted listof assigned agents\n                        utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, emergency_agent._id)\n                                    .then(agent_found =>{\n                                        //we proceed to remove the agent from the emergency and update the monitoring grid and all other parts of the system\n                                        removeAgentFromEmergencyAfterDecliningRequest(agent_found);\n                                    })\n                                    .catch(err => {\n                                    \n                                        setMapDetails({\n                                            ...mapDetails,\n                                            action: \"message\",\n                                            action_message: \"Agent \" +emergency_agent.firstname +\" declined to attend to emergency but an error occurred updating the system. Please manually remove the agent from emergency\"\n                                        })\n                                    })\n                    }\n            }\n\n            if(message.userMetadata && message.userMetadata.action === \"route_completed\"){\n                    //show message that agent has completed route\n\n                    var responses = persistence.getCompletedEmergenciesResponse();\n\n                    utils.getAdminEmergencyMonitored(browserAdmin._id,   mapDetails.monitoring_grid)\n                            .then(emergency_monitored => {\n\n                                var assigned_agents = persistence.getAssignedAgents();\n\n                                //we get the agent full profile from the persisted listof assigned agents\n                                utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, message.message._id)\n                                            .then(agent_found =>{\n                                                if(responses && responses.length > 0){\n                                                    responses.push({agent:agent_found, user: emergency_monitored.emergency});\n                                                }\n                                                else{\n                                                    responses = [{agent:agent_found, user: emergency_monitored.emergency}];\n                                                }\n                                \n                                                persistence.saveCompletedEmergenciesResponse(responses);\n                                \n                                                setMapDetails({\n                                                    ...mapDetails,\n                                                    route_responses_from_agents: responses\n                                                })\n                                            })\n                                            .catch(err => {\n                                                \n                                            })\n\n                            })\n                            .catch(err => {\n                                \n                            })\n            } \n            \n        }\n        });\n\n        //Refactor End  ---------------------------------------------------------------------\n\n        /*const socket = socketIOClient(socket_io_url, {\n            //withCredentials: true\n        });*/\n\n        const socket = io(socket_io_url)\n\n        socket.on(\"connect\", \n            () => console.log(\"connected to socket io\")\n        );\n\n        socket.on(\"reconnect\", attempt => {\n            console.log(\"Socket IO Reconnected\")\n            //successfully reconnected\n            //get the lastest data\n        })\n\n        //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n        socket.on(\"emergency\", data => {\n            if(data){\n                \n                let arr =   mapDetails.emergencies;\n                let lat =   mapDetails.latest;\n\n                let fe = mapDetails.filtered_emergencies\n                fe.push(data)\n                \n                lat.push(data);\n                arr.push(data) \n\n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: true,\n                    latest: lat,\n                    clicked_marker_id: data._id,\n                    zoom: 18,\n                    emergencies: arr,\n                    filtered_emergencies: fe,\n                    center: {\n                        lat: data.latitude,\n                        lng: data.longitude\n                    }\n                })\n            }\n        }\n        );\n\n        socket.on(\"call\", data => {\n            if(data){\n                let arr =   mapDetails.locations;\n                let lat =   mapDetails.latest;\n                \n                lat.push(data);\n                arr.push(data)\n                \n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: true,\n                    latest: lat,\n                    clicked_marker_id: data._id,\n                    zoom: 18,\n                    locations: arr,\n                    center: {\n                    lat: data.latitude,\n                    lng: data.longitude\n                    }\n                })\n            }\n        }\n        );\n\n        socket.on(\"monitoring_update\", (id) => {\n            if(id !== browserAdmin._id){\n                //pull the monitoring grid and re-evaluate variables\n                //show loading UI\n                showLoading();\n\n                var monitoring_grid = [];\n\n                API.getMonitoringGrid()\n                    .then(response => {\n                        monitoring_grid = response.data;\n\n                        utils.reconcileAllAgentsWithMonitoringGrid(  mapDetails.laser_agents, response.data, browserAdmin._id)\n                                .then(lasers => {\n                                    \n                                    setMapDetails({\n                                        ...mapDetails,\n                                        monitoring_grid: monitoring_grid,\n                                        laser_agents: lasers      \n                                    })\n\n                                    hideLoading();\n                                })\n                                .catch(err => {\n                                    setMapDetails({\n                                        ...mapDetails,\n                                        monitoring_grid: monitoring_grid         \n                                    })\n\n                                    hideLoading();\n                                })\n                    })\n                    .catch(err => {\n                        setMapDetails({\n                            ...mapDetails,\n                            monitoring_grid: monitoring_grid         \n                        })\n\n                        hideLoading();\n                    })\n            }\n        });\n\n        getLocations();\n        getEmergencies();\n\n    }, [])\n\n    function showLoading(){\n        setMapDetails({...mapDetails, isLoading: true})\n    }\n  \n    function hideLoading(){\n        setMapDetails({...mapDetails, isLoading: false})\n    }\n  \n    function logout(){\n        logout();\n    }\n\n    const showMonitoredEmergency = async(e) => {\n        console.log(\"monitoring grid - \"+mapDetails.monitorign_grid)\n        const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid);\n\n        if(emergency_full_row && emergency_full_row.emergency){\n            var item = emergency_full_row.emergency;\n            \n            switch(item.laser_type){\n                case \"emergency\":\n                    setMapDetails({...mapDetails, clicked_user: item,\n                        side_bar_open: true,\n                        location_side_bar_open: false,\n                        agent_side_bar_open: false,\n                        center: {\n                          lat: item.latitude,\n                          lng: item.longitude\n                        },\n                        zoom: 19,\n                        show_red_circle: true,\n                        show_blue_circle: false,\n                        clicked_marker_id: item._id\n                    })\n\n                case \"call\":\n                    setMapDetails({...mapDetails, clicked_user: item,\n                        side_bar_open: false,\n                        location_side_bar_open: true,\n                        agent_side_bar_open: false,\n                        center: {\n                            lat: item.latitude,\n                            lng: item.longitude\n                        },\n                        zoom: 19,\n                        show_red_circle: false,\n                        show_blue_circle: true,\n                        clicked_marker_id: item._id})\n                    break;\n            }\n        }\n        else{\n            setMapDetails({...mapDetails, action: \"message\",\n            action_message: \"You are not monitoring any emergency or call at the moment\",})\n        }\n    }\n    \n\n    function showConfirmResolveEmergency(e){\n        e.preventDefault();\n        setMapDetails({...mapDetails, showConfirm: {\n            action: \"emergency\",\n            status: true\n          },\n          message: \"Are you sure you want to mark this emergency issue as resolved ?\"\n        })\n    }\n\n    function showConfirmResolveLocation(){\n        \n        setMapDetails({...mapDetails, showConfirm: {\n           \n    \n                  action: \"location\",\n                  status: true\n                },\n                message: \"Are you sure you want to mark this call as resolved ?\"\n            })\n    }\n\n\nconst removeAgentFromRoute = async(e, agent) => {\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id, mapDetails.monitoring_grid, mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n\n                //Refactor  ---------------------------------------------------------------------\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                try{\n                    //tell agent to leave the emergency\n                    const result = await pubnub.publish(\n                        {\n                            message: {\n                            pn_gcm: {\n                                data: {\n                                    notification_body: \"You need to abandon route. Tap to open app\",\n                                    data: {},\n                                    action: \"leave_route\"\n                                }\n                            }\n                            },\n                            channel: agent.agent._id,\n                            sendByPost: false, // true to send via POST\n                            storeInHistory: false //override default storage options\n                        }\n                    );\n                }\n                catch(status){\n\n                }\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                //we set state and update the monitoring grid and the laser agents list\n               \n                setMapDetails({...mapDetails, \n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                })\n\n                hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n           hideLoading();\n           setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n  }\n\n  const removeAgentFromRouteAndCloseRouteResponse = async(e, route_response)=>{\n    var agent = route_response.agent;\n\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id,mapDetails.monitoring_grid,mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n                //Refactor  ---------------------------------------------------------------------\n\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                //End Refactor  ---------------------------------------------------------------------\n\n\n                var route_response_array =mapDetails.route_responses_from_agents;\n  \n                route_response_array.splice(route_response_array.indexOf(route_response),1);\n\n                //persist route complete responses array\n                persistence.saveCompletedEmergenciesResponse(route_response_array);\n\n\n                //we set state and update the monitoring grid and the laser agents list\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                    route_responses_from_agents: route_response_array\n                })\n\n               hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n           hideLoading();\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n  }\n  \n  const addAgentToMonitoring = async (e, agent)=>{\n      const monitored_result = utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id,mapDetails.monitoring_grid);\n\n      if(monitored_result){\n        var check_result = await utils.checkIfOtherAdminIsUsingAgent(browserAdmin._id, agent,mapDetails.monitoring_grid);\n      \n        if(check_result){\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"Another admin has assigned agent \" +agent.agent.firstname +\" to an emergency\"\n            })\n        }\n        else{\n                //we continue\n                //add agent to monitoring grid and save on the server\n                const grid_and_agents_array = await utils.setAgentOnMonitoringGridAndChangeAgentStatus(agent,mapDetails.monitoring_grid, browserAdmin._id,mapDetails.laser_agents);\n\n                var new_monitoring_grid = grid_and_agents_array[0];\n                var new_laser_agents = grid_and_agents_array[1];\n\n                const result = await API.saveMonitoringGrid(new_monitoring_grid);\n                \n                if(result.data===\"successful\"){\n                    //we get the emregency monitored from the monitoring grid which is the central source of truth\n                    const emergency_full_row = await utils.getAdminEmergencyMonitored(browserAdmin._id,mapDetails.monitoring_grid);\n\n                    var emergency_monitored = emergency_full_row.emergency;\n\n                    if(emergency_monitored){\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        //we tell the agent to open the new route and go to the emergency or call\n                        try{\n                            const result = await pubnub.publish({\n                                message: {\n                                    pn_gcm: {\n                                        data: {\n                                            notification_body: \"You have a new route. Tap to open app.\",\n                                            data: emergency_monitored.phone_number ? {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, phone_number: emergency_monitored.phone_number, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude} : {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude},\n                                            action: \"route_request\"\n                                        }\n                                    }\n                                },\n                                channel: agent.agent._id,\n                                sendByPost: false, // true to send via POST\n                                storeInHistory: false //override default storage options\n                            })\n                        }\n                        catch(status){\n\n                        }\n\n\n                        //Refactor End  ---------------------------------------------------------------------\n\n                        //we subscribe the admin to the agents id channel\n                        var list =mapDetails.channels_list;\n\n                        if(list.indexOf(agent.agent._id)===-1){\n                            list.push(agent.agent._id)\n                        }\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        pubnub.subscribe({\n                            channels: list\n                        })\n\n                        //End Refactor  ---------------------------------------------------------------------\n\n\n                        //persist agents incase the user reloads the page or closes the browser\n                        var assigned_agents = persistence.getAssignedAgents();\n\n                        var new_assigned_agents = utils.addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents)\n                        \n                        persistence.saveAssignedAgents(new_assigned_agents);\n\n                        //we then update state\n                        setMapDetails({...mapDetails,\n                            monitoring_grid: new_monitoring_grid,\n                            laser_agents: new_laser_agents,\n                            //channels_list: list,\n                            action: \"message\",\n                            action_message: \"Agent \"+agent.agent.firstname +\" has been successfully assigned to the emergency\"\n                        })\n                    }\n                }\n\n                if(result.data===\"unsuccessful\"){\n                    //the grid was NOT successfully saved \n                        //show message\n                        setMapDetails({...mapDetails,\n                            action: \"message\",\n                            action_message: \"The system could NOT successfully assign the agent to the emergency\"\n                        })\n                }\n        }\n      }\n      else{\n\n      }\n  }\n    \n\n\n  const startMonitoring = async (e, item)=>{\n        \n    try{\n        //check if another admin is monitoring the emergency\n        const boolean_value = await utils.checkIfEmergencyMonitoredByOtherAdmin(  mapDetails.monitoring_grid, item, browserAdmin._id);\n\n        if(boolean_value){\n            //the emergency is being monitored by another admin\n            //tell the browser admin about this\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"Another admin is already monitoring the selected emergency\"\n            })\n        }\n        else{\n            //we continue by editing the monitoring_grid and persisting it\n            const new_monitoring_grid = await utils.setEmergencyOnMonitoringGrid(item,mapDetails.monitoring_grid, browserAdmin._id);\n            \n            const result = await API.saveMonitoringGrid(new_monitoring_grid);\n            \n            if(result.data===\"successful\"){\n                //the grid was successfully saved \n                //change monitoring grid in local state\n                //subscribe to channel if user chose to be tracked\n                //show message\n\n                var list = mapDetails.channels_list ? mapDetails.channels_list : [];\n\n                //we subscribe to the items channel ONLY if the item is trackable\n                if(item.is_trackable){ \n                    if(list.indexOf(item.user)===-1){\n                        //remove old user from list\n                        //unsubscribe from old user\n            \n                        list.push(item.user)\n                    }\n\n                    //Refactor  ---------------------------------------------------------------------\n\n                    pubnub.subscribe({\n                        channels: list\n                    })\n\n                    //Refactor End  ---------------------------------------------------------------------\n                }\n                \n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"You are now monitoring \"+item.full_name,\n                    channels_list: list,\n                    monitoring_grid: new_monitoring_grid\n                })  \n            }\n\n            if(result.data===\"unsuccessful\"){\n                //the grid was NOT successfully saved \n                //show message\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"The system could not initiate the monitoring of that emergency\"\n                })\n            }\n                        \n        }\n    }\n    catch(err){\n        console.log({err})\n        //show message\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"Error occurred initiating monitoring of emergency\"\n        })\n    }\n}\n\n\nconst hideConfirm = () => {\n      setMapDetails({...mapDetails,\n        showConfirm: {\n          action: \"\",\n          status: false\n        },\n        message: \"\"\n    })\n}\n\nconst closeAction = (e) => {\n    setMapDetails({...mapDetails,\n        action: \"close\",\n        action_message: \"\"\n    })\n}\n\nconst closeSideBar = (e) => {\n    setMapDetails({...mapDetails,\n        play_sound: false,\n        side_bar_open: false,\n        location_side_bar_open: false,\n        manual_location_side_bar: false,\n        agent_side_bar_open: false,\n        selected_location: {},\n        selected_emergency: {},\n        clicked_marker_id: \"\"\n    })\n}\n\nconst closeAgentSideBar = (e) => {\n    setMapDetails({...mapDetails,\n        clicked_agent: {},\n        agent_side_bar_open: false\n    })\n}\n\nconst closeRouteResponse = (route_response) => {\n    let array = mapDetails.route_responses_from_agents;\n\n    array.splice(array.indexOf(route_response),1);\n\n    setMapDetails({\n        ...mapDetails,\n        route_responses_from_agents: array\n    })\n}\n\nconst getSelectedAgentsIds = () =>{\n    \n}\n\nconst setSelectedAgentsFromIds = (ids) => {\n    \n}\n\n//we get the monitoring grid from the server and update our variables\nconst getMonitoringGridFromServerAndReconcileAssignedAgents = async () => {\n        showLoading();\n\n        const response = await API.getMonitoringGrid();\n\n        if(response){\n            setUpAssignedAgentsIfAny(response.data);\n           \n            utils.getAdminEmergencyMonitored(browserAdmin._id, response.data)\n                    .then(emergency_full_row => {\n\n                        var admin_emergency = emergency_full_row.emergency;\n\n                        if(admin_emergency){\n\n                            //we need to subscribe to the emergencies user id to receive location updates\n                            if( mapDetails.channels_list.indexOf(admin_emergency.user) === -1){\n                                \n                                var list = mapDetails.channels_list.concat([admin_emergency.user]);\n                                \n                                //Refactor  ---------------------------------------------------------------------\n\n                                pubnub.subscribe({\n                                    channels: list\n                                })\n\n                                //Refactor End ---------------------------------------------------------------------\n            \n                                console.log(response.data)\n\n                                setMapDetails({...mapDetails,\n                                    action: \"message\",\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\n                                    monitoring_grid: response.data,\n                                    channels_list: list\n                                })\n\n                                console.log(mapDetails.monitoring_grid)\n\n                                hideLoading();\n                            }\n                            else{\n                                //Refactor  ---------------------------------------------------------------------\n\n                                pubnub.subscribe({\n                                    channels:   mapDetails.channels_list\n                                })\n\n                                //Refactor End  ---------------------------------------------------------------------\n            \n                                setMapDetails({...mapDetails,\n                                    action: \"message\",\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\n                                    monitoring_grid: response.data\n                                });\n                                \n                                hideLoading();\n                            }\n                        }\n                        else{\n                              setMapDetails({...mapDetails,\n                                monitoring_grid: response.data\n                              })\n                              hideLoading();\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                        setMapDetails({...mapDetails,\n                            monitoring_grid: response.data\n                        })\n                        hideLoading();\n                    })\n        }\n        else{\n            //show appropriate message\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred. Please check the network.\"\n            })\n            hideLoading();\n        }\n  }\n\n  const setUpAssignedAgentsIfAny = async(monitoring_grid) => {\n      var assigned_agents = persistence.getAssignedAgents();\n\n      if(assigned_agents && assigned_agents.length > 0){\n            var result = await utils.reconcileAssignedAgentsListWithMonitoringGrid(browserAdmin._id, assigned_agents, monitoring_grid);\n    \n            //result[0] //assigned agents list\n            //result[1] //laser agents\n    \n            if(result[0].length > 0){\n                persistence.saveAssignedAgents(result[0]);\n\n                //we subscribe to the id of each agent\n                let list = mapDetails.channels_list.concat(result[0]);\n                \n                //Refactor  ---------------------------------------------------------------------\n\n                pubnub.subscribe({\n                    channels: list\n                })\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                setMapDetails({...mapDetails,\n                    laser_agents: result[1],\n                    channels_list: list\n                })\n            }\n            else{\n                persistence.deleteAssignedAgents();\n\n                setMapDetails({...mapDetails,\n                    laser_agents: result[1]\n                })\n            }\n      }\n  }\n\n  const removeAgentFromEmergencyAfterDecliningRequest = async (agent) =>{\n    showLoading();\n\n    const result = await utils.removeAgentFromBrowserAdminMonitoringGrid(agent, browserAdmin._id,   mapDetails.monitoring_grid,   mapDetails.laser_agents);\n    \n    if(result){\n        //result[0] //monitoring_grid\n        //result[1] //laser agents\n\n        const save_result = await API.saveMonitoringGrid(result[0]);\n\n        if(save_result){\n            if(save_result.data===\"successful\"){\n                //persist agents incase the user reloads the page or closes the browser\n                var assigned_agents = persistence.getAssignedAgents();\n\n                var new_assigned_agents = utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\n                \n                if(new_assigned_agents.length > 0){\n                    persistence.saveAssignedAgents(new_assigned_agents);\n                }\n                else{\n                    persistence.deleteAssignedAgents();\n                }\n\n                //Refactor  ---------------------------------------------------------------------\n\n                //unsubscribe from agents channel\n                pubnub.unsubscribe({\n                    channels: [agent.agent._id]\n                })\n\n                //Refactor End  ---------------------------------------------------------------------\n\n                //we set state and update the monitoring grid and the laser agents list\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"Agent \" +agent.agent.firstname +\" declined the request to attend to the emergency\",\n                    monitoring_grid: result[0],\n                    laser_agents: result[1],\n                    agent_side_bar_open: false,\n                    clicked_agent: {},\n                })\n\n                hideLoading();\n            }\n\n            if(save_result.data === \"unsuccessful\"){\n                hideLoading();\n                setMapDetails({...mapDetails,\n                    action: \"message\",\n                    action_message: \"An error occurred removing the agent from the emergency\"\n                })\n            }\n        }\n        else{\n            hideLoading();\n            setMapDetails({...mapDetails,\n                action: \"message\",\n                action_message: \"An error occurred removing the agent from the emergency\"\n            })\n        }\n\n    }\n    else{\n        hideLoading();\n        setMapDetails({...mapDetails,\n            action: \"message\",\n            action_message: \"An error occurred removing the agent from the emergency\"\n        })\n    }\n}\n\n\n\n  //this is not showing the agents in the same lga\n  const getAgentsAroundEmergency = async () => {\n    //show the agents around an emergency\n    //search to see if an emergency is being monitored by the admin browser\n    utils.checkIfEmergencyMonitoredByBrowserAdmin(browserAdmin._id, mapDetails.monitoring_grid)\n                .then( async (boolean_value) => {\n                    if(boolean_value){\n\n                        //Refactor  ---------------------------------------------------------------------\n\n                        //ideally this should be sent to those agents in the emergency's LGA\n                        //for now we are publishing to all agents \n                     try{\n                        await pubnub.publish(\n                        {\n                            message: {\n                                pn_gcm: {\n                                    data: {\n                                        notification_body: \"Tap to open the Laser App\",\n                                        data: {},\n                                        action: \"send_location\"\n                                    }\n                                }\n                            },\n                            channel: mapDetails.tracked_area,\n                            sendByPost: false, // true to send via POST\n                            storeInHistory: false //override default storage     \n                        })\n                     }\n\n                    catch(status){}\n\n                        //Refactor End  ---------------------------------------------------------------------\n\n                        utils.getAdminEmergencyMonitored(browserAdmin._id, mapDetails.monitoring_grid)\n                                .then(emergency_monitored => {\n                                    //admin is monitoring an emergency or call\n                                    //check for the agents in emergency LGA\n                                    utils.setAgentsInFocus(mapDetails.agents_in_focus, emergency_monitored.emergency, mapDetails.laser_agents)\n                                        .then(result => {\n                                            //we set the state for the laser agents and the agents in focus\n                                            setMapDetails({...mapDetails, \n                                                laser_agents: result[0],\n                                                agents_in_focus: result[1]\n                                            })\n                                        })\n                                        .catch(err => {\n                                            setMapDetails({\n                                                ...mapDetails,\n                                                action: \"message\",\n                                                action_message: \"An error occurred seeking agents around emergency\"\n                                            })\n                                        })\n                                })\n                                .catch(err => {\n\n                                })\n                    }\n                    else{\n                        setMapDetails({\n                            ...mapDetails,\n                            action: \"message\",\n                            action_message: \"You are NOT monitoring any emergency or call\"\n                        })\n                    }\n                })\n                .catch(err => {\n                    setMapDetails({\n                        ...mapDetails,\n                        action: \"message\",\n                        action_message: \"An error occurred seeking agents around emergency\"\n                    })\n                })\n    }\n\n\n    const latestClicked = (item) => {\n        switch(item.laser_type){\n            case \"emergency\":\n                setMapDetails({\n                    ...mapDetails, \n                    clicked_user: item,\n                    side_bar_open: true,\n                    location_side_bar_open: false,\n                    agent_side_bar_open: false,\n                    center: {\n                      lat: item.latitude,\n                      lng: item.longitude\n                    },\n                    zoom: 19,\n                    show_red_circle: true,\n                    show_blue_circle: false,\n                    clicked_marker_id: item._id\n                })\n                break;\n            case \"call\":\n                setMapDetails({\n                    ...mapDetails,\n                    clicked_user: item,\n                    side_bar_open: false,\n                    location_side_bar_open: true,\n                    agent_side_bar_open: false,\n                    center: {\n                        lat: item.latitude,\n                        lng: item.longitude\n                    },\n                    zoom: 19,\n                    show_red_circle: false,\n                    show_blue_circle: true,\n                    clicked_marker_id: item._id\n                })\n                break;\n        }\n    }\n\n\n    const openManualLocation = () => {\n        setMapDetails({\n            ...mapDetails,\n            manual_location_side_bar: true,\n            side_bar_open: false,\n            location_side_bar_open: false,\n            agent_side_bar_open: false\n        })\n    }\n\n\n    const onCalendarOpen = () => {\n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            side_bar_open: false, \n            location_side_bar_open: false,\n            agent_side_bar_open: false\n        })\n    }\n\n    const onDateChange = (date) => {\n\n        //We add 1 hour to the date because the date axios is sending to the server is 1 hour behind what it should be\n        date = new Date(date);\n        date.setHours(date.getHours() + 1);\n    \n         setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            date: date,\n            show_red_circle: false,\n            show_blue_circle: false,\n            clicked_marker_id: \" \",\n            action: \"loading\",\n            action_message: \"\",\n            selected_call:\"Calls (All)\", \n            selected_emergency:\"Emergencies (All)\"\n         })\n    \n         getLocationsDate(date);\n         getEmergenciesDate(date);\n    }\n\n    const onCallsChanged = (e) => {\n        e.preventDefault();\n        \n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n  \n        let arr = [];\n  \n        if(mapDetails.locations.length>0){\n            if(value===\"Calls (All)\"){\n              setMapDetails({\n                  ...mapDetails,\n                  play_sound: false,\n                  filtered_locations: mapDetails.locations,\n                  side_bar_open: false, \n                  selected_call: value,\n                  agent_side_bar_open: false,\n                  location_side_bar_open: false,\n                  show_blue_circle: false\n              })\n            }\n            else if(value===\"None\"){\n              setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations: [],\n                    side_bar_open: false, \n                    selected_call: value,\n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_blue_circle: false\n              })\n            }\n            else{\n              mapDetails.locations.map(emer => {\n                if(emer.reason.includes(value.toLowerCase())){\n                  arr.push(emer)\n                }\n              })\n              \n              if(arr.length>0){\n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations: arr,\n                    selected_call: value,\n                    side_bar_open: false, \n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_blue_circle: false\n                })\n              }\n              else{\n                //show message that there are no locations found for that parameter\n        \n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_locations:[],\n                    selected_call: value,\n                    side_bar_open: false, \n                    location_side_bar_open: false,\n                    show_blue_circle: false\n                })\n              }\n            }\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                selected_call: value\n            })\n        }\n    }\n\n    const onEmergenciesChanged = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        \n        let arr = [];\n        if(mapDetails.emergencies.length>0){\n            if(value===\"Emergencies (All)\"){\n              setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_emergencies: mapDetails.emergencies,\n                    side_bar_open: false, \n                    selected_emergency: value,\n                    location_side_bar_open: false,\n                    agent_side_bar_open: false,\n                    show_red_circle: false\n              })\n            }\n            else if(value===\"None\"){\n              setMapDetails({\n                  ...mapDetails,\n                  play_sound: false,\n                  filtered_emergencies:[],\n                  selected_emergency: value,\n                  side_bar_open: false, \n                  agent_side_bar_open: false,\n                  location_side_bar_open: false,\n                  show_red_circle: false\n              })\n            }\n            else{\n              mapDetails.emergencies.map(emer => {\n                if(emer.reasons&&emer.reasons.length>0){\n                  emer.reasons.map(reason => {\n                      if(value.toLowerCase().includes(reason)){\n                          arr.push(emer)\n                      }\n                  })\n                }\n              })\n        \n              if(arr.length>0){\n                    setMapDetails({\n                        ...mapDetails,\n                        play_sound: false,\n                        filtered_emergencies:arr,\n                        selected_emergency: value,\n                        side_bar_open: false, \n                        agent_side_bar_open: false,\n                        location_side_bar_open: false,\n                        show_red_circle: false\n                    })\n              }\n              else{\n                //show message that there are no emregencies found for that parameter\n        \n                setMapDetails({\n                    ...mapDetails,\n                    play_sound: false,\n                    filtered_emergencies: [],\n                    side_bar_open: false, \n                    selected_emergency: value,\n                    agent_side_bar_open: false,\n                    location_side_bar_open: false,\n                    show_red_circle: false\n                })\n              }\n            }\n        }    \n        else{\n            setMapDetails({\n                ...mapDetails, \n                selected_emergency: value\n            })\n        }\n    }\n\n    const onCallClicked = (location,e) => {\n            setMapDetails({\n                ...mapDetails,\n                play_sound: false,\n                clicked_user: location,\n                clicked_agent: {},\n                side_bar_open: false,\n                agent_side_bar_open: false,\n                manual_location_side_bar: false,\n                location_side_bar_open: true,\n                center: {\n                  lat: location.latitude,\n                  lng: location.longitude\n                },\n                zoom: 19,\n                show_red_circle: false,\n                show_blue_circle: true,\n                clicked_marker_id: location._id\n            })\n    }\n\n    const onEmergencyClicked = (emergency,e) => {\n       \n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            clicked_user: emergency,\n            clicked_agent: {},\n            side_bar_open: true,\n            manual_location_side_bar: false,\n            agent_side_bar_open: false,\n            location_side_bar_open: false,\n            center: {\n                lat: emergency.latitude,\n                lng: emergency.longitude\n            },\n            zoom: 19,\n            show_red_circle: true,\n            show_blue_circle: false,\n            clicked_marker_id: emergency._id\n        })\n    }\n    \n    const onAgentClicked = (agent,e) => {\n        setMapDetails({\n            ...mapDetails,\n            play_sound: false,\n            clicked_agent: agent,\n            manual_location_side_bar: false,\n            agent_side_bar_open: true\n        })\n    }\n\n    const getLocationsMarkers = () => {\n        let locations_ui;\n\n        if(mapDetails.filtered_locations && mapDetails.filtered_locations.length>0){\n            locations_ui = mapDetails.filtered_locations.map(loc => {\n                return  <Marker key={loc._id} onClick={e => onCallClicked(loc,e)}\n                            name={loc.reason} \n                            title={loc.full_name}\n                            position={{lat: loc.latitude, lng: loc.longitude}}\n                            icon={{\n                                url: (mapDetails.clicked_marker_id===loc._id) ? blue_circle : call_icon\n                            }}/> \n            })\n        }\n        else{\n            locations_ui = \"\";\n        }\n        \n        return locations_ui;\n    }\n\n    const getEmergenciesMarkers = () => {\n        let emergencies_ui;\n\n        let emergencies_to_show = mapDetails.filtered_emergencies.concat(mapDetails.filtered_emergencies);\n        \n        if(emergencies_to_show.length>0){\n            emergencies_ui = emergencies_to_show.map(emer => {\n              \n              return <Marker key={emer._id} onClick={e => onEmergencyClicked(emer,e)}\n                        name={emer.reasons[0]} \n                        title={emer.full_name}\n                        position={{lat: emer.latitude, lng: emer.longitude}}\n                        icon={{\n                          url: (mapDetails.clicked_marker_id===emer._id) ? red_circle : emergency_icon\n                        }}/>\n            })\n        }\n        else{\n            emergencies_ui = \"\";\n        }\n        \n        return emergencies_ui;\n    }\n\n\n    const getAgentMarkers = () => {\n        let agents_ui;\n  \n        if(mapDetails.laser_agents.length>0){\n              agents_ui = mapDetails.laser_agents.map((agent,i) => {\n                  \n                  return <Marker key={i}  onClick={e => onAgentClicked(agent,e)}\n                              name={agent.full_address} \n                              title={agent.full_address}\n                              position={{lat: agent.latitude, lng: agent.longitude}}\n                              //\n                              icon={{\n                                  url: getAgentIcon(agent),\n                                  anchor: new google.maps.Point(40,40),\n                                  scaledSize: new google.maps.Size(40,40)\n                              }}/>\n              })\n        }\n        else{\n              agents_ui = \"\";\n        }\n  \n        return agents_ui;\n    }\n\n    const getAgentIcon = (agent) => {\n\n        if(agent){\n              //we got the icon\n              switch(agent.agent.department){\n                  case \"police\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return police_car;\n                          break;\n                          case \"infocus\":\n                              return police_car_in_focus;\n                          break;\n                          case \"using\":\n                              return police_car_using;\n                          break;\n                          case \"using_by_other\":\n                              return police_car_using_other;\n                          break;\n                      }\n                  break;\n                  case \"fire\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return fire_car;\n                          break;\n                          case \"infocus\":\n                              return fire_car_in_focus;\n                          break;\n                          case \"using\":\n                              return fire_car_using;\n                          break;\n                          case \"using_by_other\":\n                              return fire_car_using_other;\n                          break;\n                      }\n                  break;\n                  case \"hospital\":\n                      switch(agent.status){\n                          case \"idle\":\n                              return ambulance;\n                          break;\n                          case \"infocus\":\n                              return ambulance_in_focus;\n                          break;\n                          case \"using\":\n                              return ambulance_using;\n                          break;\n                          case \"using_by_other\":\n                              return ambulance_using_other;\n                          break;\n                      }\n                  break;\n              }\n        }\n    }\n\n\n  const getEmergencies = async() => {\n    const response = await API.getEmergencies({date: today})\n\n    if(response==\"error\"){\n        //show error message\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_emergency_load\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.emergencies&&response.data.emergencies.length>0){\n        var loc = mapDetails.latest;\n\n        for(var i = 0; i<response.data.emergencies.length; i++){\n            loc.push(response.data.emergencies[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                latest : loc,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                latest : loc,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n    }\n}\n\n\n\nconst getLocations = async() => {\n\n    const response = await API.getLocations({date: today})\n\n    if(response==\"error\"){\n        //show error message\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_calls_load\",\n            locations: [],\n            filtered_locations: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.locations&&response.data.locations.length>0){\n        var loc = mapDetails.latest;\n\n        for(var i = 0; i<response.data.locations.length; i++){\n            loc.push(response.data.locations[i]);\n        }\n\n        loc = utils.sortDates(loc);\n\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                latest : loc,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                latest : loc,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        } \n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            locations: [],\n            filtered_locations: []\n        })\n    }\n}\n\n\nconst handleSongFinishedPlaying = () => {\n    setMapDetails({\n        ...mapDetails,\n        play_sound: false\n    })\n}\n\nconst onFieldChanged = (e) => {\n  const target = e.target;\n  const value = target.type === 'checkbox' ? target.checked : target.value;\n  const name = target.name;\n\n  setMapDetails({...mapDetails, [name]: value})\n}\n\nconst onManualCallChanged = (e) => {\n  const target = e.target;\n  const value = target.value;\n\n  setMapDetails({\n      ...mapDetails,\n      selected_manual_call: value\n  })\n}\n\nconst onManualGenderChanged = (e) => {\n  const target = e.target;\n  const value = target.value;\n\n  setMapDetails({\n      ...mapDetails,\n      selected_manual_gender: value\n  })\n}\n\nconst onSubmitManualCallDetails = (e) => {\n    e.preventDefault();\n\n    if(mapDetails.selected_manual_call.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid reason for call from the drop down\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_phone.lenght <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid phone number\"\n        })\n        return;\n    }\n\n    if(mapDetails.selected_manual_gender.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid gender\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_name.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter a valid name\"\n        })\n        return;\n    }\n\n    if(mapDetails.manual_address.length <= 0){\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"Please enter an address\"\n        })\n        return;\n    }\n\n    //show loading\n    //translate address to longitude and latitude\n    setMapDetails({\n        ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n    })\n\n    Geocode.fromAddress(mapDetails.manual_address).then(\n          response => {\n                const { lat, lng } = response.results[0].geometry.location;\n\n                var location = {\n                    action: mapDetails.selected_manual_call,\n                    longitude: lng,\n                    latitude: lat,\n                    full_address: mapDetails.manual_address,\n                    full_name: mapDetails.manual_name,\n                    phone_number: mapDetails.manual_phone\n                }\n\n                saveManualLocation(location);\n\n          },\n          error => {\n          console.error(error);\n\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"We could not find that address\",\n              showConfirmManualLocation: true\n          })\n          }\n    );\n}\n\nconst showConfirmManualLocation = () => {\n    setMapDetails({...mapDetails,showConfirmManualLocation: true})\n}\n\nconst hideConfirmManualLocation = () => {\n    setMapDetails({\n        ...mapDetails,\n        showConfirmManualLocation: false\n    })\n}\n\nconst tryAgainClicked = () => {\n    this.hideConfirmManualLocation();\n\n    setMapDetails({\n        ...mapDetails,\n        action: \"loading\",\n        action_message: \"\"\n    })\n\n    Geocode.fromAddress(mapDetails.manual_address).then(\n      response => {\n        const { lat, lng } = response.results[0].geometry.location;\n\n        var location = {\n              action: mapDetails.selected_manual_call,\n              longitude: lng,\n              latitude: lat,\n              full_address: mapDetails.manual_address,\n              full_name: mapDetails.manual_name,\n              phone_number: mapDetails.manual_phone\n        }\n\n        this.saveManualLocation(location);\n      },\n      error => {\n\n        setMapDetails({\n            ...mapDetails,\n            action: \"message\",\n            action_message: \"We could not find that address\"\n        })\n      }\n    );\n}\n\n\nconst continueConfirmAddressNotFoundClicked = () => {\n      this.hideConfirmManualLocation();\n      /*\n\n      this.setState({\n          action: \"loading\",\n          action_message: \"\"\n      });\n\n      var location = {\n          action: mapDetails.selected_manual_call,\n          longitude: lng,\n          latitude: lat,\n          full_address: mapDetails.manual_address,\n          full_name: mapDetails.manual_name,\n          phone_number: mapDetails.manual_phone\n      }\n\n      this.saveManualLocation(location);*/\n}\n\nconst closeConfirmAddressNotFoundClicked = () => {\n    setMapDetails({\n        ...mapDetails,\n        action: \"message\",\n        action_message: \"\"\n    })\n    this.hideConfirmManualLocation();\n}\n\nconst saveManualLocation = async(location) => {\n      const response = await API.createManualLocation(location)\n      \n      if(response==\"error\"){\n          //show error message\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"An error occurred saving the location. Please try again\"\n          })\n\n          return;\n      }\n      \n      if(response&&response.data){\n          if(response.data.response===\"out_of_lagos\"){\n              setMapDetails({\n                  ...mapDetails,\n                  action: \"message\",\n                  action_message: \"That location is outside Lagos State\"\n              })\n              return;\n          }\n\n          setMapDetails({\n              ...mapDetails,\n              action: \"message\",\n              action_message: \"The location has been saved and is displayed on the map\",\n              selected_manual_call:\"Emergency Management(LASEMA)\",\n              selected_manual_gender:\"Male\",\n              manual_name: \"\",\n              manual_phone: \"\",\n              manual_address: \"\",\n              manual_location_side_bar: false\n          })\n\n          /*this.setState(state => {\n              let arr = state.locations;\n              let lat = state.latest;\n              \n              lat.push(response.data.response);\n              arr.push(response.data.response)\n\n              return {\n                  play_sound: true,\n                  latest: lat,\n                  clicked_marker_id: response.data.response._id,\n                  zoom: 18,\n                  locations: arr,\n                  center: {\n                      lat: response.data.response.latitude,\n                      lng: response.data.response.longitude\n                  }\n              }\n          })*/\n      }\n}\n\n\nconst getLocationsDate = async(date) => {\n    const response = await API.getLocations({date})\n    \n    if(response==\"error\"){\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_calls_load\",\n            locations: [],\n            filtered_locations: []\n        })\n\n        return;\n    }\n\n    if(response&&response.data&&response.data.locations){\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                locations: response.data.locations,\n                filtered_locations: response.data.locations\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            locations: [],\n            filtered_locations: []\n        })\n    }\n}\n\nconst getEmergenciesDate = async(date) => {\n    const response = await API.getEmergencies({date})\n    \n    if(response==\"error\"){\n        setMapDetails({\n            ...mapDetails,\n            action: \"err_emergency_load\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n        return;\n    }\n\n    if(response&&response.data&&response.data.emergencies){\n        if(mapDetails.action === \"loading\"){\n            setMapDetails({\n                ...mapDetails,\n                action: \"close\",\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n        else{\n            setMapDetails({\n                ...mapDetails,\n                emergencies: response.data.emergencies,\n                filtered_emergencies: response.data.emergencies\n            })\n        }\n    }\n    else{\n        setMapDetails({\n            ...mapDetails,\n            action: \"close\",\n            emergencies: [],\n            filtered_emergencies: []\n        })\n    }\n}\n\n\nreturn <div className=\"laser-parent-div\" style={mapStyle}>\n            <Latest latest={  mapDetails.latest} latestClicked={latestClicked}/>\n            {  mapDetails.show_location_side_bar}\n            {  mapDetails.side_bar_open && <Sidebar closeSidebar={closeSideBar} startMonitoring={startMonitoring} emergency={mapDetails.clicked_user} resolve={showConfirmResolveEmergency} /> }\n            {  mapDetails.showConfirmManualLocation ? <ConfirmAddressNotFound closeConfirmAddressNotFoundClicked={continueConfirmAddressNotFoundClicked} tryAgainClicked={continueConfirmAddressNotFoundClicked} hideConfirmManualLocation={hideConfirmManualLocation} /> : \"\"}\n            {  mapDetails.manual_location_side_bar ? <AddCallManually onFieldChanged={onFieldChanged} closeSidebar={closeSideBar} selected_manual_call={  mapDetails.selected_manual_call} selected_manual_gender={  mapDetails.selected_manual_gender} manual_address={  mapDetails.manual_address} manual_name={  mapDetails.manual_name} onManualCallChanged={onManualCallChanged} onManualGenderChanged={onManualGenderChanged}  onSubmitManualCallDetails={onSubmitManualCallDetails}/> : \"\" }\n            \n            { \n                mapDetails.agent_side_bar_open ? <AgentDetails removeAgentFromRoute={removeAgentFromRoute} closeAgentSideBar={closeAgentSideBar} addAgentToMonitoring={addAgentToMonitoring} agent={  mapDetails.clicked_agent} user={  mapDetails.clicked_user}/> : \"\" \n            }\n\n            <TopPanel showMonitoredEmergency={showMonitoredEmergency} openManualLocation={openManualLocation} logout={logout} onCalendarOpen={onCalendarOpen} onDateChange={onDateChange} date={  mapDetails.date} selected_call={  mapDetails.selected_call} \n            onCallsChanged={onCallsChanged} selected_emergency={  mapDetails.selected_emergency} onEmergenciesChanged={onEmergenciesChanged} getAgentsAroundEmergency={getAgentsAroundEmergency}/>\n\n            <Map google={google} \n                style={mapStyle}\n                onReady={mapDetails.fetchPlaces}\n                initialCenter={  mapDetails.center}\n                center={  mapDetails.center}\n                zoom={  mapDetails.zoom}>\n        \n                {getLocationsMarkers()}\n                {getEmergenciesMarkers()}\n                {getAgentMarkers()}\n\n            </Map>\n            \n            <Loader isLoading={  mapDetails.isLoading}/>\n\n            <Action action={  mapDetails.action} closeAction={closeAction} message={  mapDetails.action_message}/>\n\n            {mapDetails.sound}\n\n            {\n                mapDetails.route_responses_from_agents.length > 0 ?  <RouteStatus route_response={  mapDetails.route_responses_from_agents[  mapDetails.route_responses_from_agents.length - 1]} removeAgentFromRouteAndCloseRouteResponse={removeAgentFromRouteAndCloseRouteResponse} closeRouteResponse={closeRouteResponse} /> : \"\"\n            }\n\n            {\n                mapDetails.showConfirm.status===true ? <ConfirmAction  yesClicked={  mapDetails.showConfirm.action===\"emergency\" ? mapDetails.resolveEmergency : mapDetails.resolveCall} noClicked={hideConfirm} message={  mapDetails.message} /> : \"\"\n            }\n    </div>\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI')\n})(Dashboard)"],"mappings":"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"},"metadata":{},"sourceType":"module"}