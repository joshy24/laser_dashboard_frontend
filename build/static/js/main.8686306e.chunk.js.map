{"version":3,"sources":["icons/emergency_with_circle.gif","icons/call_with_circle.gif","icons/emergency.gif","icons/call.gif","icons/PNG/police_car.png","icons/PNG/police_car_using.png","icons/PNG/police_car_other_using.png","icons/PNG/police_car_in_focus.png","icons/PNG/fire_truck.png","icons/PNG/fire_truck_using.png","icons/PNG/fire_truck_other_using.png","icons/PNG/fire_truck_in_focus.png","icons/PNG/ambulance.png","icons/PNG/ambulance_using.png","icons/PNG/ambulance_other_using.png","icons/PNG/ambulance_in_focus.png","sounds/alert.mp3","icons/manual_call.png","icons/locate_agents.png","icons/emergency_monitored.png","icons/logout.png","logo.svg","icons/car_test.png","icons/burger_menu.png","icons/phone_white.png","utils/Utils.js","auth/AuthHelperMethods.js","components/Sidebar.js","components/Text.js","components/Action.js","components/AgentDetails.js","components/LocationSideBar.js","components/AddCallManually.js","components/ConfirmAddressNotFound.js","components/TopPanel.js","components/LatestItem.js","components/Latest.js","components/RouteStatus.js","components/ConfirmAction.js","utils/Persistence.js","components/Loader.js","api/Api.js","NewApp.js","components/agents/Agent.js","components/agents/AddAgent.js","components/agents/Agents.js","components/agents/Admin.js","components/agents/AddAdmin.js","components/agents/EditAdmin.js","components/agents/Admins.js","components/agents/Department.js","components/agents/AddDepartment.js","components/agents/Departments.js","components/Login.js","Laser.js","serviceWorker.js","index.js"],"names":["module","exports","Util","str","moment","utc","format","arr","sort","a","b","Date","created","agent","laser_agents","monitoring_grid","browser_admin_id","Promise","resolve","reject","agent_found","new_laser_agents","length","checkWhoIsUsingTheAgent","then","stat","new_agent","Object","assign","status","push","catch","err","map","laser_agent","index","_id","parseLaserAgents","result","emergency","found","row","admin_id","new_monitoring_grid","agents","indexOf","i","monitoring","agents_in_focus","sub_admin_address","assigned_agents_array","assigned_agent","splice","monitoring_grid_agents_list","new_assigned_agents_array","concat","who","j","assigned_agents_list","agent_id","AuthHelperMethods","login","username","password","axios","res","setToken","data","token","setPriviledge","priviledge","setAdmin","admin","console","log","loggedIn","getToken","isTokenExpired","decode","exp","now","localStorage","setItem","JSON","stringify","getAdmin","parse","getItem","idToken","logout","removeItem","getConfirm","answer","getPriviledge","url","method","headers","baseURL","timeout","_checkStatus","response","error","Error","statusText","utils","Utils","Auth","Sidebar","props","className","onClick","e","closeSidebar","startMonitoring","is_trackable","getTime","full_name","emergency_numbers","item","key","email","phone_number","device","full_address","reasons","getReasons","style","width","Text","closeAction","text","Action","action","message","getText","background","border","color","padding","borderRadius","style_remove_btn","AgentDetails","closeAgentSideBar","firstname","lastname","department","is_on_route","removeAgentFromRoute","user","addAgentToMonitoring","LocationSidebar","location","reason","controls_style","marginLeft","marginRight","AddCallManually","htmlFor","required","autoComplete","id","type","name","onChange","onFieldChanged","value","manual_name","placeholder","manual_phone","manual_address","selected_manual_call","onManualCallChanged","selected_manual_gender","onManualGenderChanged","onSubmitManualCallDetails","ReactModal","setAppElement","btn_style_left","btn_style_right","ConfirmAddressNotFound","isOpen","overlayClassName","contentLabel","tryAgainClicked","closeConfirmAddressNotFoundClicked","dateStyle","zIndex","TopPanel","openManualLocation","src","manual_call","height","showMonitoredEmergency","emergency_monitored","getAgentsAroundEmergency","locate_agents","onCalendarOpen","this","maxDate","onDateChange","date","selected_call","onCallsChanged","selected_emergency","onEmergenciesChanged","Component","LatestItem","itemClicked","getColor","laser_type","textAlign","styling","Latest","state","bind","preventDefault","latestClicked","latest","box_style","margin","float","OrderStatus","closeRouteResponse","route_response","removeAgentFromRouteAndCloseRouteResponse","ConfirmAction","yesClicked","noClicked","Persistence","selected_agents","all_responses","override","display","Loader","isLoading","css","sizeUnit","size","loading","Axios","getLocations","getEmergencies","createAgent","getDepartments","createAdmin","saveMonitoringGrid","monitorings","getMonitoringGrid","persistence","mapStyle","todays_date","toISOString","today","App","showConfirm","locations","emergencies","filtered_locations","filtered_emergencies","side_bar_open","agent_side_bar_open","location_side_bar_open","manual_location_side_bar","clicked_user","clicked_agent","center","lat","lng","zoom","show_red_circle","show_blue_circle","clicked_marker_id","play_sound","channels_list","responses_available","route_responses_from_agents","action_message","tracked_area","showConfirmManualLocation","pubnub","PubNubReact","publishKey","subscribeKey","init","closeSideBar","onAgentClicked","getAgentIcon","handleSongFinishedPlaying","getLocationsDate","getEmergenciesDate","getLatestEmergencies","getLatestLocations","getSelectedAgentsIds","setSelectedAgentsFromIds","resolveCall","resolveEmergency","hideConfirm","showConfirmResolveEmergency","showConfirmResolveLocation","getMonitoringGridFromServerAndReconcileAssignedAgents","setUpAssignedAgentsIfAny","removeAgentFromEmergencyAfterDecliningRequest","hideConfirmManualLocation","continueConfirmAddressNotFoundClicked","saveManualLocation","showLoading","hideLoading","year","split","Geocode","setApiKey","setLanguage","setRegion","enableDebug","browserAdmin","setState","getAdminEmergencyMonitored","emergency_full_row","latitude","longitude","removeAgentFromBrowserAdminMonitoringGrid","API","save_result","assigned_agents","getAssignedAgents","new_assigned_agents","removeAgentFromListOfAssignedAgentsForPersistsnce","saveAssignedAgents","deleteAssignedAgents","unsubscribe","channels","publish","pn_gcm","notification_body","channel","sendByPost","storeInHistory","route_response_array","saveCompletedEmergenciesResponse","checkIfEmergencyMonitoredByBrowserAdmin","checkIfOtherAdminIsUsingAgent","setAgentOnMonitoringGridAndChangeAgentStatus","grid_and_agents_array","list","subscribe","addAgentToListOfAssignedAgentsForPersistence","checkIfEmergencyMonitoredByOtherAdmin","setEmergencyOnMonitoringGrid","boolean_value","setAgentsInFocus","setHours","getHours","event","target","emer","includes","toLowerCase","loc","onCallClicked","title","position","icon","blue_circle","call_icon","onEmergencyClicked","red_circle","emergency_icon","anchor","google","maps","Point","scaledSize","Size","police_car","police_car_in_focus","police_car_using","police_car_using_other","fire_car","fire_car_in_focus","fire_car_using","fire_car_using_other","ambulance","ambulance_in_focus","ambulance_using","ambulance_using_other","selected_location","array","ids","admin_emergency","reconcileAssignedAgentsListWithMonitoringGrid","responses","getCompletedEmergenciesResponse","addListener","st","category","userMetadata","updateAgentLocation","sorted_agents","emergency_agent","getAgentFromAssignedAgentsInPersistence","socket","socketIOClient","on","attempt","reconcileAllAgentsWithMonitoringGrid","lasers","self","sortDates","checked","lenght","fromAddress","results","geometry","sound","show_location_side_bar","show_side_bar","alert","playStatus","Sound","PLAYING","playFromPosition","onLoading","handleSongLoading","onPlaying","handleSongPlaying","onFinishedPlaying","onReady","fetchPlaces","initialCenter","getLocationsMarkers","getEmergenciesMarkers","getAgentMarkers","GoogleApiWrapper","apiKey","space","Agent","getDate","deleteClicked","editClicked","Agents","password_again","submitClicked","closeModalGetAgents","departments","dep","closeModal","agents_filter","selected_department","selected_agent","showAddAgent","showDeleteAgent","showEditAgent","confirmMessage","getAgents","getAgentsDepartment","deleteAgent","onDepartmentChanged","filter","deps","to","Admin","Admins","admins","selected_admin","showAddAdmin","showDeleteAdmin","showEditAdmin","getAdmins","deleteAdmin","closeModalGetAdmins","count","Department","AddDepartment","saveDepartment","Departments","showAddDepartment","showDeleteDepartment","showEditDepartment","deleteDepartment","zero_margin","marginBottom","marginTop","Login","history","Laser","isLogin","path","exact","render","NewApp","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8686306e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emergency_with_circle.0153b7ea.gif\";","module.exports = __webpack_public_path__ + \"static/media/call_with_circle.34c87478.gif\";","module.exports = __webpack_public_path__ + \"static/media/emergency.445ccffb.gif\";","module.exports = __webpack_public_path__ + \"static/media/call.37865c67.gif\";","module.exports = __webpack_public_path__ + \"static/media/police_car.d5d82e20.png\";","module.exports = __webpack_public_path__ + \"static/media/police_car_using.303f7897.png\";","module.exports = __webpack_public_path__ + \"static/media/police_car_other_using.fa5d0303.png\";","module.exports = __webpack_public_path__ + \"static/media/police_car_in_focus.97936b46.png\";","module.exports = __webpack_public_path__ + \"static/media/fire_truck.1171957d.png\";","module.exports = __webpack_public_path__ + \"static/media/fire_truck_using.a665c769.png\";","module.exports = __webpack_public_path__ + \"static/media/fire_truck_other_using.ac03affc.png\";","module.exports = __webpack_public_path__ + \"static/media/fire_truck_in_focus.6613578d.png\";","module.exports = __webpack_public_path__ + \"static/media/ambulance.2c93e510.png\";","module.exports = __webpack_public_path__ + \"static/media/ambulance_using.8b74e8df.png\";","module.exports = __webpack_public_path__ + \"static/media/ambulance_other_using.a3b0b90e.png\";","module.exports = __webpack_public_path__ + \"static/media/ambulance_in_focus.49e0e4aa.png\";","module.exports = __webpack_public_path__ + \"static/media/alert.77e4ae16.mp3\";","module.exports = __webpack_public_path__ + \"static/media/manual_call.8e6b2365.png\";","module.exports = __webpack_public_path__ + \"static/media/locate_agents.97c154a2.png\";","module.exports = __webpack_public_path__ + \"static/media/emergency_monitored.e09b1624.png\";","module.exports = __webpack_public_path__ + \"static/media/logout.64c75d4b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/car_test.4b63a07a.png\";","module.exports = __webpack_public_path__ + \"static/media/burger_menu.f128647b.png\";","module.exports = __webpack_public_path__ + \"static/media/phone_white.60b8def5.png\";","import moment from 'moment';\r\n\r\nexport default class Util{\r\n    getDate(str){\r\n        var date = moment(str);\r\n        var dateComponent = date.utc().format('YYYY - MM - DD');\r\n\r\n        return dateComponent;\r\n    }\r\n\r\n    getTime(str){\r\n        var date = moment(str);\r\n        var timeComponent = date.utc().format('HH:mm:ss');\r\n\r\n        return timeComponent;\r\n    }\r\n\r\n    sortDates(arr){\r\n        arr.sort(function compare(a, b) {\r\n            var dateA = new Date(a.created);\r\n            var dateB = new Date(b.created);\r\n            return dateA - dateB;\r\n        });\r\n          \r\n        return arr;\r\n    }\r\n\r\n    //idle\r\n    //infocus\r\n    //using\r\n    //using_by_other\r\n\r\n    /*checkAgentState(agent, monitoring_grid, browser_admin_id, agents_in_focus, laser_agents){\r\n        return new Promise((resolve, reject) => {\r\n            const id = agent.agent._id;\r\n\r\n            monitoring_grid.map(row => {\r\n                if(row){\r\n                    //Object.keys(row)[0] - this gives us the admin id\r\n                    //row[Object.keys(row)[0]];- this gives us the admin content ({user: ...., agents: [...]})\r\n\r\n                    var admin_content = row[Object.keys(row)[0]];\r\n                    var admin_id = Object.keys(row)[0];\r\n\r\n                    var agent_found_in_admin = false;\r\n\r\n                    admin_content.agents.map( (agent_id, index)  => {\r\n                        if(id===agent_id){\r\n                            agent_found_in_admin = true;\r\n                            //check if its the browsers admin that is using the agent\r\n                            if(admin_id===browser_admin_id){\r\n                                //set the status\r\n                                Object.assign(agent.agent, {status: \"using\"});\r\n                            }\r\n                            else{\r\n                                //its not the browsers admin that is using the agent, its another admin\r\n                                Object.assign(agent.agent, {status: \"using_by_other\"});\r\n                            }\r\n\r\n                            //replace the agent in the list of agents\r\n                            var new_laser_agents = laser_agents.map(laser_agent => {\r\n                                if(laser_agent.agent._id === id){\r\n                                    return agent;\r\n                                }\r\n                                else{\r\n                                    return laser_agent;\r\n                                }\r\n                            })\r\n\r\n                            resolve(new_laser_agents);\r\n                        }\r\n\r\n                        if(index === (admin_content.agents.length-1)){\r\n                            //last index\r\n                            //if we get here it means the agent was not found in one of the admins agents array\r\n                            //we check if the agent was found in the agents_in_focus  array\r\n\r\n                            var found_agent_in_focus_array = false\r\n\r\n                            agents_in_focus.map((agent_in_focus_id, ind) => {\r\n                                if(id === agent_in_focus_id){\r\n                                    Object.assign(agent, {status: \"infocus\"});\r\n                                    found_agent_in_focus_array = true;\r\n                                }\r\n\r\n                                if(ind === (agents_in_focus.length - 1)){ //this is the last index\r\n                                    if(!found_agent_in_focus_array){\r\n                                        //the agent was not found in the agents in focus array\r\n                                        Object.assign(agent.agent, {status: \"idle\"});\r\n                                    }\r\n\r\n                                    var new_laser_agents = laser_agents.map(laser_agent => {\r\n                                        if(laser_agent.agent._id === id){\r\n                                            return agent;\r\n                                        }\r\n                                        else{\r\n                                            return laser_agent;\r\n                                        }\r\n                                    })\r\n            \r\n                                    resolve(new_laser_agents);\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n                else{\r\n                    //the monitoring grid is possibly empty\r\n                }\r\n            });\r\n        })\r\n    }*/\r\n\r\n    //All we are doing here is updting the location while inheriting the status\r\n    updateAgentLocation(agent, laser_agents, monitoring_grid, browser_admin_id){\r\n        return new Promise((resolve, reject) => {\r\n            parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id)\r\n                    .then(result => {\r\n                        resolve(result);\r\n                    })\r\n                    .catch(err => {\r\n                        reject(err);\r\n                    })\r\n        })\r\n    }\r\n\r\n    checkIfEmergencyMonitoredByOtherAdmin(monitoring_grid, emergency, browser_admin_id){\r\n        return new Promise((resolve, reject) => {\r\n            var found = false;\r\n            if(monitoring_grid && monitoring_grid.length > 0){\r\n                monitoring_grid.map((row, index) => {\r\n                    if(row){\r\n                        if(row.admin_id !== browser_admin_id){\r\n                            if(row.emergency._id === emergency._id){\r\n                                found = true;\r\n                            }\r\n                        }\r\n    \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            resolve(found);\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                resolve(found);\r\n            }\r\n        })\r\n    }\r\n\r\n    setEmergencyOnMonitoringGrid(emergency, monitoring_grid, admin_id){ //to return a fresh monitoring grid\r\n        return new Promise((resolve,reject) => {\r\n            var found = false;\r\n\r\n            if(monitoring_grid && monitoring_grid.length > 0 ){\r\n                \r\n                var new_monitoring_grid = [];\r\n\r\n                monitoring_grid.map((row, index) => {\r\n                    if(row){\r\n                        \r\n                        if(row.admin_id === admin_id){\r\n                            found = true;\r\n\r\n                            row = {admin_id: admin_id, emergency: emergency, agents: row.agents};\r\n\r\n                            new_monitoring_grid.push(row);\r\n                        }\r\n                        else{\r\n                            new_monitoring_grid.push(row);\r\n                        }\r\n                        \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            if(!found){\r\n                                new_monitoring_grid.push({admin_id:admin_id, emergency: emergency, agents: []});\r\n                            }\r\n                            //we are at the final index\r\n                            resolve(new_monitoring_grid);\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                monitoring_grid.push({admin_id: admin_id, emergency: emergency, agents: []});\r\n                \r\n                resolve(monitoring_grid);\r\n            }\r\n        })\r\n    }\r\n\r\n    setAgentOnMonitoringGridAndChangeAgentStatus(agent, monitoring_grid, admin_id, laser_agents){ //to return a fresh monitoring grid\r\n        return new Promise((resolve,reject) => {\r\n            var found = false;\r\n            \r\n            if(monitoring_grid.length > 0 ){\r\n                \r\n                var new_monitoring_grid = [];\r\n\r\n                monitoring_grid.map((row, index) => {\r\n                    if(row){\r\n                        if(row.admin_id === admin_id){\r\n                            found = true;\r\n\r\n                            if(row.agents.indexOf(agent.agent._id)===-1){\r\n                                //the agents id does not exist in the list of agents, so we add it\r\n                                row.agents.push(agent.agent._id);\r\n                            }\r\n\r\n                            new_monitoring_grid.push(row);\r\n                        }\r\n                        else{\r\n                            new_monitoring_grid.push(row);\r\n                        }\r\n                        \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            //we are at the final index\r\n                            //we change the status of the agent on the laser_agents array and return the laser_agents array as well\r\n                            for(var i = 0; i < laser_agents.length; i++){\r\n                                if(laser_agents[i].agent._id === agent.agent._id){\r\n                                    //we have found the agent to update\r\n                                    laser_agents[i].status = \"using\";\r\n                                    break;\r\n                                }\r\n                            }\r\n                           \r\n                            resolve([new_monitoring_grid, laser_agents]);\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                resolve(monitoring_grid, laser_agents);\r\n            }\r\n        })\r\n    }\r\n\r\n    checkIfEmergencyMonitoredByBrowserAdmin(browser_admin_id, monitoring_grid){\r\n        //here we are just checking if the browser admin is actually monitoring an emergency\r\n\r\n        return new Promise((resolve,reject) => {\r\n            var monitoring = false;\r\n\r\n            if(monitoring_grid.length > 0){\r\n                monitoring_grid.map((row, index) => {\r\n                    if(row){\r\n                        if(row.admin_id === browser_admin_id){\r\n                            if(row.emergency){\r\n                                //yes we are monitoring an emergency\r\n                                monitoring = true;\r\n                            }\r\n                        }\r\n                        \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            //we are at the final index\r\n                            resolve(monitoring);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                resolve(monitoring);\r\n            }\r\n        })\r\n    }\r\n\r\n    setAgentsInFocus(agents_in_focus, emergency, laser_agents){\r\n        return new Promise((resolve,reject) => {\r\n\r\n            var new_laser_agents = [];\r\n\r\n            laser_agents.map((agent,index) => {\r\n                \r\n                if(agent.sub_admin_address && emergency.sub_admin_address && (agent.sub_admin_address === emergency.sub_admin_address)){\r\n                    //the agent is in the same subadmin address as the emergency\r\n                    //we check if the agent is being used by the current admin or anothe admin\r\n                    if(agent.status !== \"using\" && agent.status !== \"using_by_other\"){\r\n                        agent.status = \"infocus\"\r\n                    }\r\n\r\n                    if(agents_in_focus.indexOf(agent.agent._id)===-1){\r\n                        //agent is not in agents_in_focus array\r\n                        agents_in_focus.push(agent.agent._id);\r\n                    }\r\n\r\n                    new_laser_agents.push(agent);\r\n                    \r\n                }\r\n                else{\r\n                    new_laser_agents.push(agent);\r\n                }\r\n                \r\n                if(index === (laser_agents.length-1)){\r\n                    //last index\r\n                    resolve([new_laser_agents, agents_in_focus]);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    checkIfOtherAdminIsUsingAgent(browser_admin_id, agent, monitoring_grid){\r\n        return new Promise((resolve,reject) => {\r\n            var found = false;\r\n    \r\n            if(monitoring_grid.length > 0){\r\n                for(var index = 0; index< monitoring_grid.length; index++){\r\n                    var row = monitoring_grid[0];\r\n    \r\n                    if(row){\r\n                        if(row.admin_id !== browser_admin_id){\r\n                            if(row.agents.indexOf(agent.agent._id) !== -1){\r\n                                found = true;\r\n    \r\n                                resolve(found);\r\n    \r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            resolve(found);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                resolve(found);\r\n            }\r\n        })\r\n    }\r\n\r\n    getAdminEmergencyMonitored(browser_admin_id, monitoring_grid){\r\n        return new Promise((resolve,reject) => {\r\n            if(monitoring_grid.length > 0){\r\n                \r\n                for(var index = 0; index < monitoring_grid.length; index++){\r\n                    var row = monitoring_grid[index];\r\n    \r\n                    if(row){\r\n                        if(row.admin_id === browser_admin_id){\r\n                            resolve(row);\r\n                            break;\r\n                        }\r\n                        \r\n                        if(index === (monitoring_grid.length - 1)){\r\n                            resolve(null);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                resolve(null);\r\n            }\r\n        })\r\n    }\r\n\r\n    addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents_array){\r\n        if(assigned_agents_array && assigned_agents_array.length > 0 ){\r\n            var found  = false;\r\n\r\n            assigned_agents_array.map( (assigned_agent, index) => {\r\n                if(assigned_agent.agent._id === agent.agent._id){\r\n                    found = true;\r\n\r\n                    assigned_agents_array.splice(index, 1, agent);\r\n                }\r\n            })\r\n\r\n            if(!found){\r\n                assigned_agents_array.push(agent);\r\n            }\r\n        }\r\n        else{\r\n            assigned_agents_array = [];\r\n            assigned_agents_array.push(agent);\r\n        }\r\n\r\n        return assigned_agents_array;\r\n    }\r\n\r\n    removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents_array){\r\n        if(assigned_agents_array && assigned_agents_array.length > 0 ){\r\n            assigned_agents_array.map( (assigned_agent, index) => {\r\n                if(assigned_agent.agent._id === agent.agent._id){\r\n                    assigned_agents_array.splice(index, 1);\r\n                }\r\n            })\r\n\r\n        }\r\n        else{\r\n            assigned_agents_array = [];\r\n            assigned_agents_array.push(agent);\r\n        }\r\n\r\n        return assigned_agents_array;\r\n    }\r\n\r\n    reconcileAssignedAgentsListWithMonitoringGrid(browser_admin_id, assigned_agents_array, monitoring_grid){\r\n        return new Promise((resolve,reject) => {\r\n            var laser_agents = [];\r\n\r\n            if(monitoring_grid.length > 0){\r\n                var monitoring_grid_agents_list;\r\n                var new_assigned_agents_array = [];\r\n\r\n                for(var i = 0; i < monitoring_grid.length; i++){\r\n                    if(monitoring_grid[i].admin_id === browser_admin_id){\r\n                        monitoring_grid_agents_list = monitoring_grid[i].agents.concat([])\r\n                        break;\r\n                    }\r\n                }\r\n               \r\n                //we have our agents from the monitoring grid\r\n                if(monitoring_grid_agents_list && monitoring_grid_agents_list.length > 0){\r\n                    //there are agents in the monitoring grid for the admin, meaning agents were assigned\r\n                    assigned_agents_array.map(assigned_agent => {\r\n                        if(monitoring_grid_agents_list.indexOf(assigned_agent.agent._id) !== -1){\r\n                            //means the assigned agent is present in the monitoring grid. The agent is good to proceed into the laser_agents array\r\n                            laser_agents.push(assigned_agent);\r\n                            new_assigned_agents_array.push(assigned_agent);\r\n                        }\r\n                    })\r\n\r\n                    resolve([new_assigned_agents_array, laser_agents])\r\n                }\r\n                else{\r\n                    laser_agents = [];\r\n\r\n                    resolve([new_assigned_agents_array, laser_agents]);\r\n                }\r\n            }\r\n            else{\r\n                resolve([assigned_agents_array, laser_agents])\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    reconcileAllAgentsWithMonitoringGrid(laser_agents, monitoring_grid, browser_admin_id){\r\n        return new Promise((resolve,reject) => {\r\n            var new_laser_agents = [];\r\n\r\n            if(laser_agents.length > 0){\r\n                laser_agents.map((laser_agent, index) => {\r\n                    checkWhoIsUsingTheAgent(browser_admin_id, laser_agent, monitoring_grid)\r\n                            .then(who => {\r\n                                var new_agent = Object.assign(laser_agent, {status:who});\r\n\r\n                                new_laser_agents.push(new_agent);\r\n\r\n                                if(index === (laser_agents.length - 1)){\r\n                                    resolve(new_laser_agents);\r\n                                }\r\n                            })\r\n                            .catch(err => {\r\n                                new_laser_agents.push(laser_agent);\r\n\r\n                                if(index === (laser_agents.length - 1)){\r\n                                    resolve(new_laser_agents);\r\n                                }\r\n                            })\r\n                })\r\n            }\r\n            else{\r\n                resolve([]);\r\n            }\r\n        })\r\n    }\r\n\r\n    removeAgentFromBrowserAdminMonitoringGrid(agent, browser_admin_id, monitoring_grid, laser_agents){\r\n        return new Promise((resolve,reject) => {\r\n            if(monitoring_grid.length > 0){\r\n                var new_monitoring_grid = [];\r\n\r\n                for(var i = 0; i < monitoring_grid.length; i++){\r\n                    if(monitoring_grid[i].admin_id === browser_admin_id){\r\n                        if(monitoring_grid[i].agents.indexOf(agent.agent._id) !== -1){\r\n                            monitoring_grid[i].agents.splice(monitoring_grid[i].agents.indexOf(agent.agent._id),1);\r\n                        }\r\n\r\n                        new_monitoring_grid.push(monitoring_grid[i]);\r\n\r\n                        if(laser_agents.length > 0){\r\n                            for(var j = 0; j < laser_agents.length; j++){\r\n                                if(laser_agents[j].agent._id === agent.agent._id){\r\n                                    agent.status = \"idle\"\r\n                                    laser_agents.splice(j, 1, agent);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else{\r\n                        new_monitoring_grid.push(monitoring_grid[i]);\r\n                    }\r\n\r\n                    if(i === (monitoring_grid.length - 1)){\r\n                        resolve([new_monitoring_grid, laser_agents]);\r\n                    }\r\n                }\r\n               \r\n            }\r\n            else{\r\n                resolve([monitoring_grid, laser_agents]);\r\n            }\r\n        })\r\n    }\r\n\r\n    getAgentFromAssignedAgentsInPersistence(assigned_agents_list, agent_id){\r\n        return new Promise((resolve, reject) => {\r\n            for(var i = 0; i < assigned_agents_list.length; i++){\r\n                if(assigned_agents_list[i].agent._id === agent_id){\r\n                    resolve(assigned_agents_list[i]);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            resolve(null);\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction parseLaserAgents(agent, laser_agents, monitoring_grid, browser_admin_id){\r\n    return new Promise((resolve, reject) =>{\r\n        var agent_found = false;\r\n\r\n        var new_laser_agents = [];\r\n\r\n        if(laser_agents.length === 0){\r\n\r\n            checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid)\r\n                        .then(stat => {\r\n                            var new_agent = Object.assign(agent, {status: stat});\r\n    \r\n                            new_laser_agents.push(new_agent);\r\n\r\n                            resolve(new_laser_agents);\r\n                        })\r\n                        .catch(err => {\r\n                            var new_agent = Object.assign(agent, {status: \"idle\"});\r\n    \r\n                            new_laser_agents.push(new_agent);\r\n\r\n                            resolve(new_laser_agents);\r\n                        })\r\n        }\r\n        else{\r\n            laser_agents.map((laser_agent,index) => {\r\n                if(laser_agent.agent._id === agent.agent._id){\r\n                    agent_found = true;\r\n    \r\n                    var new_agent = Object.assign(agent, {status:laser_agent.status}); //inherit the status\r\n    \r\n                    new_laser_agents.push(new_agent);\r\n                }\r\n                else{\r\n                    new_laser_agents.push(laser_agent);\r\n                }\r\n    \r\n                if(index === (laser_agents.length-1)){\r\n                    //we are on the last index\r\n                    \r\n                    if(agent_found){\r\n                        checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid)\r\n                                .then(stat => {\r\n                                    var new_agent = Object.assign(agent, {status: stat});\r\n            \r\n                                    new_laser_agents.push(new_agent);\r\n\r\n                                    resolve(new_laser_agents);\r\n                                })\r\n                                .catch(err => {\r\n                                    var new_agent = Object.assign(agent, {status: \"idle\"});\r\n            \r\n                                    new_laser_agents.push(new_agent);\r\n\r\n                                    resolve(new_laser_agents);\r\n                                })\r\n                    }\r\n                    else{\r\n                        resolve(new_laser_agents)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nfunction checkWhoIsUsingTheAgent(browser_admin_id, agent, monitoring_grid){\r\n    return new Promise((resolve, reject) => {\r\n        var status = \"idle\";\r\n        if(monitoring_grid.length > 0){\r\n            for(var index = 0; index < monitoring_grid.length; index++){\r\n                var row = monitoring_grid[index];\r\n\r\n                if(row){\r\n                    if(row.admin_id === browser_admin_id){\r\n                        //admins row\r\n                        if(row.agents.indexOf(agent.agent._id) !== -1){\r\n                            resolve(\"using\")\r\n                            break;\r\n                        }\r\n                    }\r\n                    else{\r\n                        //other admins row\r\n                        if(row.agents.indexOf(agent.agent._id) !== -1){\r\n                            resolve(\"using_by_other\");\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(index === (monitoring_grid.length - 1)){\r\n                        resolve(status);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            resolve(status);\r\n        }\r\n    })\r\n}\r\n","import axios from 'axios';\r\n\r\nimport decode from 'jwt-decode'\r\n\r\nconst login_url = '/login'\r\n\r\nexport default class AuthHelperMethods{\r\n\r\n    login = (username, password) => {\r\n        return  this.axios(login_url, {username, password})\r\n                    .then(res => {\r\n                        this.setToken(res.data.token);\r\n                        this.setPriviledge(res.data.priviledge);\r\n                        this.setAdmin(res.data.admin);\r\n                        console.log(res.data)\r\n                        return res;\r\n                    })\r\n                    .catch(err => {\r\n                        return \"error\";\r\n                    })\r\n    }\r\n\r\n    loggedIn = () => {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken(); // Getting token from localstorage\r\n        return !!token && !this.isTokenExpired(token); // handwaiving here\r\n    };\r\n\r\n    isTokenExpired = token => {\r\n        try {\r\n            const decoded = decode(token);\r\n            if (decoded.exp < Date.now() / 1000) {\r\n            // Checking if token is expired.\r\n            return true;\r\n            } else return false;\r\n        } catch (err) {\r\n            console.log(\"expired check failed! Line 42: AuthService.js\");\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    setAdmin = admin => {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem(\"admin\", JSON.stringify(admin));\r\n    };\r\n\r\n    getAdmin = () => {\r\n        // Retrieves the user token from localStorage\r\n        return JSON.parse(localStorage.getItem(\"admin\"));\r\n    };\r\n\r\n    setToken = idToken => {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem(\"id_token\", idToken);\r\n    };\r\n\r\n    getToken = () => {\r\n        // Retrieves the user token from localStorage\r\n        return localStorage.getItem(\"id_token\");\r\n    };\r\n\r\n    logout = () => {\r\n        // Clear user token and profile data from localStorage\r\n        localStorage.removeItem(\"id_token\");\r\n    };\r\n\r\n    getConfirm = () => {\r\n        // Using jwt-decode npm package to decode the token\r\n        let answer = decode(this.getToken());\r\n        console.log(\"Recieved answer!\");\r\n        return answer;\r\n    };\r\n\r\n    setPriviledge = priviledge => {\r\n        localStorage.setItem(\"priviledge\", priviledge);\r\n    }\r\n\r\n    getPriviledge = () => {\r\n        return localStorage.getItem(\"priviledge\");\r\n    }\r\n    \r\n    axios = (url, data, method) => {\r\n        if(!method){\r\n            method = \"post\";\r\n        }\r\n        // performs api calls sending the required authentication headers\r\n        const headers = {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n\r\n        // Setting Authorization header\r\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\r\n        if (this.loggedIn()) {\r\n            headers[\"Authorization\"] = \"Bearer:\" + this.getToken();\r\n        }\r\n\r\n        return axios({\r\n            url:url,\r\n            method: method,\r\n            data: data, \r\n            baseURL: 'http://18.192.254.193/admin',\r\n            //baseURL: 'http://localhost:3077/admin',\r\n            timeout: 30000,\r\n            headers: headers\r\n        })\r\n        .then(this._checkStatus)\r\n        .then(response => response)\r\n        .catch(err => err)\r\n    };\r\n\r\n    _checkStatus = response => {\r\n        // raises an error in case response status is not a success\r\n        if (response.status >= 200 && response.status < 300) {\r\n            // Success status lies between 200 to 300\r\n            return response;\r\n        } else {\r\n            var error = new Error(response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    };\r\n\r\n}","\r\nimport React from 'react';\r\n\r\nimport Utils from '../utils/Utils';\r\n\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst utils = new Utils();\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nexport default function Sidebar(props){\r\n    return <div className=\"laser-side-bar\">\r\n                <h1 className=\"close_btn\" onClick={e => props.closeSidebar(e)}>&#10005;</h1>\r\n                <br/>\r\n                <h4 className=\"text-center laser-red-text\"><b>Emergency Location Details</b></h4>\r\n                <br/>\r\n                {\r\n                    (Auth.getPriviledge() === \"full_control\") ? \r\n                    <div>\r\n                        <button className=\"laser-red-bg laserbtn\" onClick={e => props.startMonitoring(e, props.emergency)}>Start Monitoring</button>\r\n                        <br/>\r\n                        <br/>                \r\n                        <button className=\"laser-blue-bg laserbtn\" onClick={e => props.resolve(e)}>Resolve</button>\r\n                    </div> : \"\"\r\n                }\r\n                <br/>\r\n                <h5><b>Trackable</b> - {props.emergency.is_trackable ? \"Yes\" : \"No\" }</h5>\r\n                <br/>\r\n                <h5><b>Time</b> - {utils.getTime(props.emergency.created)}</h5>\r\n                <br/>\r\n                <h5><b>Persons Name</b> - {props.emergency.full_name}</h5>\r\n                <br/>\r\n                <h5><b>Person's Emergency Contacts</b> - {(props.emergency.emergency_numbers && props.emergency.emergency_numbers.length>0) ? ParseContacts(props.emergency.emergency_numbers) : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Email Address</b> - {props.emergency.email ? props.emergency.email : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Phone Number</b> - {props.emergency.phone_number ? props.emergency.phone_number : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Device</b> - {props.emergency.device ? props.emergency.device : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Emergency Full Address</b> - {props.emergency.full_address ? props.emergency.full_address : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Emergency Admin Address</b> - {props.emergency.sub_admin_address ? props.emergency.sub_admin_address : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Reason For Emergency</b> - {props.emergency.reasons ? getReasons(props.emergency.reasons) : \"\"}</h5>\r\n           </div>\r\n}\r\n\r\nfunction ParseContacts(arr){\r\n    return arr.map((item,index) => {\r\n        return <p key={index}>{item}</p>\r\n    })\r\n}\r\n\r\nfunction getReasons(reasons){\r\n    switch(reasons.length){\r\n        case 0:\r\n          return \"\";\r\n        case 1:\r\n          return reasons[0]+\" emergency\";\r\n        case 2:\r\n          return reasons[0] +\" emergency, \" +reasons[1] +\" emergency\";\r\n        case 3:\r\n          return reasons[0] +\" emergency, \" +reasons[1] +\" emergency, \" +reasons[2] +\" emergency\";\r\n    }\r\n}","import React from 'react';\r\n\r\nconst style = {\r\n    width: \"100%\"\r\n}\r\n\r\nexport default function Text(props){\r\n    return  <div className=\"laser-action_div laser-shadow\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <h1 style={style}><span onClick={e => props.closeAction(e)} className=\"action_close_btn\">&#10005;</span></h1>\r\n                    </div>\r\n                    <div className=\"col-md-12\">\r\n                        <h5>{props.text}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>;\r\n}","import React from \"react\"\r\n\r\nimport Text from \"./Text\";\r\n\r\nexport default function Action(props){\r\n\r\n    return <div>{getText(props.action, props.message, props.closeAction)}</div>\r\n\r\n}\r\n\r\nfunction getText(action, message, closeAction){\r\n    switch(action){\r\n        case \"loading\":\r\n        \r\n        return <Text text={\"Loading...\"} closeAction={closeAction}/>\r\n\r\n       \r\n        case \"close\":\r\n        \r\n        return \"\";\r\n\r\n        case \"err_calls_load\":\r\n        \r\n        return <Text text={\"An Error occurred loading latest calls\"} closeAction={closeAction}/>;\r\n\r\n        case \"err_emergency_load\":\r\n        \r\n        return <Text text={\"An Error occurred loading latest emergencies\"} closeAction={closeAction}/>;\r\n\r\n        case \"message\":\r\n\r\n        return <Text text={message} closeAction={closeAction}/> \r\n    }\r\n}","import React from \"react\"\r\n\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nconst style = {\r\n    background: \"#2E86C1\",\r\n    border: \"0px solid #000000\",\r\n    color: \"#FFFFFF\",\r\n    padding: \"8px\",\r\n    borderRadius: \"4px\"\r\n}\r\n\r\nconst style_remove_btn = {\r\n    background: \"#000000\",\r\n    border: \"0px solid #000000\",\r\n    color: \"#FFFFFF\",\r\n    padding: \"8px\",\r\n    borderRadius: \"4px\"\r\n}\r\n\r\nexport default function AgentDetails(props){\r\n    \r\n    return <div className=\"laser-agent_side-bar\">\r\n                <h1 className=\"close_btn\" onClick={e => props.closeAgentSideBar(e)}>&#10005;</h1>\r\n                <br/>\r\n                <h4 className=\"text-center laser-black-text\"><b>Agents Details</b></h4>\r\n                <br/>\r\n                <h5><b>Agents Name</b> - {props.agent.agent.firstname} {props.agent.agent.lastname}</h5>\r\n                <br/>\r\n                <h5><b>Phone Number</b> - {props.agent.agent.phone_number}</h5>\r\n                <br/>\r\n                <h5><b>Agency</b> - {props.agent.agent.department}</h5>\r\n                <br/>\r\n                <h5><b>Current Location</b> - {props.agent.full_address}</h5>\r\n                <br/>\r\n                {\r\n                    (Auth.getPriviledge() === \"full_control\") ? <div>\r\n                                                                    <h5><b>Availability</b> - {props.agent.is_on_route ? props.agent.agent.firstname+\" is currently monitoring an emergency\"   : props.agent.agent.firstname+\" is available\"}</h5>\r\n                                                                    <p>{props.agent.status === \"using\" ? <button style={style_remove_btn} onClick={e => props.removeAgentFromRoute(e, props.agent)} className=\"\">Remove agent from route</button> : \"\"}</p>\r\n                                                                    <br/>\r\n                                                                    {props.user.full_name ?  <button style={style} onClick={e => props.addAgentToMonitoring(e, props.agent)} className=\"\">Send Agent {props.agent.agent.firstname} {props.agent.agent.lastname} to {props.user.full_name}'s location </button> : \"\"}\r\n                                                                </div> : \"\"\r\n                }\r\n           </div>\r\n\r\n}","import React from 'react';\r\n\r\nimport Utils from '../utils/Utils';\r\n\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst utils = new Utils();\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nexport default function LocationSidebar(props){\r\n    return <div className=\"laser-side-bar\">\r\n                <h1 className=\"close_btn\" onClick={e => props.closeSidebar(e)}>&#10005;</h1>\r\n                <br/>\r\n                <h4 className=\"text-center laser-blue-text\"><b>Call Location Details</b></h4> \r\n                <br/>\r\n                {\r\n                    (Auth.getPriviledge() === \"full_control\") ? \r\n                    <div>\r\n                        <button className=\"laser-red-bg laserbtn\" onClick={e => props.startMonitoring(e, props.location)}>Start Monitoring</button>\r\n                        <br/>\r\n                        <br/>                \r\n                        <button className=\"laser-blue-bg laserbtn\" onClick={e => props.resolve(e)}>Resolve</button>\r\n                    </div> : \"\"\r\n                }\r\n                <br/>                \r\n                <h5><b>Time</b> - {utils.getTime(props.location.created)}</h5>\r\n                <br/>\r\n                <h5><b>Persons Name</b> - {props.location.full_name}</h5>\r\n                <br/>\r\n                <h5><b>Email Address</b> - {props.location.email ? props.location.email : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Phone Number</b> - {props.location.phone_number ? props.location.phone_number : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Call Full Address</b> - {props.location.full_address ? props.location.full_address : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Call Admin Address</b> - {props.location.sub_admin_address ? props.location.sub_admin_address : \"\"}</h5>\r\n                <br/>\r\n                <h5><b>Reason For Call</b> - {props.location.reason ? props.location.reason : \"\"}</h5>\r\n           </div>\r\n}\r\n","import React from 'react';\r\n\r\nimport Utils from '../utils/Utils';\r\n\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst utils = new Utils();\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nconst controls_style = {\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default function AddCallManually(props){\r\n    return <div className=\"laser-side-bar\">\r\n                <h1 className=\"close_btn\" onClick={e => props.closeSidebar(e)}>&#10005;</h1>\r\n                <br/>\r\n                <h4 className=\"text-center laser-blue-text\"><b>Add Call Manually</b></h4> \r\n                <br/>\r\n                <br/>\r\n                <label className=\"laser-black-text\" htmlFor=\"category\"><h5>Full Name</h5></label>\r\n                <input required autoComplete=\"off\" id=\"manual_name\" type=\"text\" name=\"manual_name\" onChange={props.onFieldChanged} value={props.manual_name} className=\"form-control bt-login-input\" placeholder=\"Full Name\"/>\r\n                <label className=\"laser-black-text\" htmlFor=\"category\"><h5>Phone Number</h5></label>\r\n                <input required autoComplete=\"off\" id=\"manual_phone\" type=\"text\" name=\"manual_phone\" onChange={props.onFieldChanged} value={props.manual_phone} className=\"form-control bt-login-input\" placeholder=\"Phone Number\"/>\r\n                <label className=\"laser-black-text\" htmlFor=\"category\"><h5>Address</h5></label>\r\n                <input required autoComplete=\"off\" id=\"manual_address\" type=\"text\" name=\"manual_address\" onChange={props.onFieldChanged} value={props.manual_address} className=\"form-control bt-login-input\" placeholder=\"Address\"/>\r\n                <br/>\r\n                <label className=\"laser-black-text\" htmlFor=\"category\"><h5>Reason For Call</h5></label>\r\n                <select style={controls_style} className=\"form-control laser-inline laser-150-width\" id=\"selected_manual_call\" name=\"selected_manual_call\" value={props.selected_manual_call} onChange={props.onManualCallChanged}>\r\n                    <option>Emergency Management(LASEMA)</option>\r\n                    <option>Police</option>\r\n                    <option>Distress</option>\r\n                    <option>Environmental and Special Offences Task Force</option>\r\n                    <option>Fire / Safety Services</option>\r\n                    <option>Environmental / Noise Pollution</option>\r\n                    <option>Broken Pipe / Water Leakage</option>\r\n                    <option>Pothole / Collapsed Road</option>\r\n                    <option>Domestic / Sexual Violence</option>\r\n                    <option>None</option>\r\n                </select>\r\n                <br/>\r\n                <br/>\r\n                <label className=\"laser-black-text\" htmlFor=\"category\"><h5>Caller Gender</h5></label>\r\n                <select style={controls_style} className=\"form-control laser-inline laser-150-width\" id=\"selected_manual_gender\" name=\"selected_manual_gender\" value={props.selected_manual_gender} onChange={props.onManualGenderChanged}>\r\n                    <option>Male</option>\r\n                    <option>Female</option>\r\n                </select>        \r\n                <br/>\r\n                <br/>\r\n                <button className=\"laser-blue-bg laserbtn\" onClick={e => props.onSubmitManualCallDetails(e)}>Submit</button>\r\n           </div>\r\n}","import React from 'react';\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginLeft: \"16px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nexport default function ConfirmAddressNotFound(props){\r\n    return  <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"ConfirmModal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Address Not Found</h4>\r\n                    <br/>\r\n                    <h5 className=\"text-center\">An Error occurred while attempting to locate that address. It could be that the address is wrong.</h5>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-red-bg laserbtn\" style={btn_style_right} onClick={props.tryAgainClicked}>retry</button>\r\n                    <button className=\"laser-inline laser-grey-bg laserbtn\" style={btn_style_left} onClick={props.closeConfirmAddressNotFoundClicked}>cancel</button>\r\n                </ReactModal>\r\n            </div>\r\n}","import React, {Component} from 'react';\r\n\r\nimport DatePicker from 'react-date-picker';\r\n\r\nimport burger_menu from \"../icons/burger_menu.png\";\r\nimport phone_white from '../icons/phone_white.png';\r\n\r\nimport manual_call from '../icons/manual_call.png'\r\nimport locate_agents from '../icons/locate_agents.png'\r\nimport emergency_monitored from '../icons/emergency_monitored.png'\r\nimport logout from '../icons/logout.png'\r\n\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nconst dateStyle = {\r\n    color: \"#111111\",\r\n    border: \"0px solid #FFFFFF\",\r\n    zIndex: \"6000\",\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\",\r\n    padding: \"8px\"\r\n}\r\n\r\nconst controls_style = {\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class TopPanel extends Component{\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"laser-top-panel\">\r\n                \r\n                <h4 className=\"laser-inline laser-header-text\"> Laser Emergency Admin - Monitoring and Dispatch</h4>\r\n                \r\n                <div className=\"laser-controls\">\r\n                    {\r\n                        (Auth.getPriviledge() === \"full_control\") ? <button onClick={e => this.props.openManualLocation(e)} className=\"laser-inline laserbtn laser-transparent-btn laser-white-bg\"><img src={manual_call} width=\"35\" height=\"35\"/></button> : \"\"\r\n                    }\r\n                    {\r\n                        (Auth.getPriviledge() === \"full_control\") ? <button onClick={e => this.props.showMonitoredEmergency(e)} className=\"laser-inline laser-transparent-btn laserbtn laser-white-bg\"><img src={emergency_monitored} width=\"35\" height=\"35\"/></button> : \"\"\r\n                    }\r\n                    {\r\n                        (Auth.getPriviledge() === \"full_control\") ? <button onClick={e => this.props.getAgentsAroundEmergency(e)} className=\"laser-inline laser-transparent-btn laserbtn laser-white-bg\"><img src={locate_agents} width=\"35\" height=\"35\"/></button> : \"\"\r\n                    }\r\n                    \r\n                    <div className=\"laser-inline\" style={dateStyle}>\r\n                        <DatePicker\r\n                            onCalendarOpen={this.props.onCalendarOpen}\r\n                            maxDate={new Date()}\r\n                            style={dateStyle}\r\n                            onChange={this.props.onDateChange}\r\n                            value={this.props.date}/>\r\n                    </div>  \r\n\r\n                    <select style={controls_style} className=\"form-control laser-inline laser-150-width\" id=\"calls\" name=\"calls\" value={this.props.selected_call} onChange={this.props.onCallsChanged}>\r\n                        <option>Calls (All)</option>\r\n                        <option>Emergency Management(LASEMA)</option>\r\n                        <option>Police</option>\r\n                        <option>Distress</option>\r\n                        <option>Environmental and Special Offences Task Force</option>\r\n                        <option>Fire / Safety Services</option>\r\n                        <option>Environmental / Noise Pollution</option>\r\n                        <option>Broken Pipe / Water Leakage</option>\r\n                        <option>Pothole / Collapsed Road</option>\r\n                        <option>Domestic / Sexual Violence</option>\r\n                        <option>None</option>\r\n                    </select>\r\n                    \r\n                    <select style={controls_style} className=\"form-control laser-inline laser-150-width\" id=\"emergencies\" name=\"emergencies\" value={this.props.selected_emergency} onChange={this.props.onEmergenciesChanged}>\r\n                        <option>Emergencies (All)</option>\r\n                        <option>Police Cases</option>\r\n                        <option>Hospital Cases</option>\r\n                        <option>Fire Cases</option>\r\n                        <option>None</option>\r\n                    </select>\r\n\r\n                    <button onClick={e => this.props.logout(e)} className=\"laser-inline laser-transparent-bg laserbtn laser-white-bg\"><img src={logout} width=\"35\" height=\"35\"/></button>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from 'react';\r\n\r\nimport Utils from '../utils/Utils';\r\n\r\nconst utils = new Utils();\r\n\r\nconst style = {\r\n    background: \"rgba(0,0,0,0)\",\r\n    border: \"0px solid #000000\"\r\n}\r\n\r\nexport default function LatestItem(props){\r\n    return <button className=\"laserItem\" style={style} onClick={e => props.itemClicked(e, props.item)}>\r\n                <h5 style={getColor(props.item.laser_type)}>{props.item.full_name} - {utils.getTime(props.item.created)} - {props.item.sub_admin_address}</h5>\r\n           </button>\r\n}\r\n\r\nfunction getColor(laser_type){\r\n    switch(laser_type){\r\n        case \"emergency\":\r\n            return {\r\n                color: \"#E74C3C\",\r\n                textAlign: \"left\"\r\n            }\r\n        case \"call\":\r\n            return {\r\n                color: \"#3498DB\",\r\n                textAlign: \"left\"\r\n            }\r\n        default:\r\n            return {\r\n                color: \"#000000\",\r\n                textAlign: \"left\"\r\n            }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport LatestItem from './LatestItem';\r\n\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\n\r\nconst styling = {\r\n    width: \"380px\",\r\n    height: \"400px\"\r\n}\r\n\r\nexport default class Latest extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state= {\r\n\r\n        }\r\n\r\n\r\n        this.itemClicked = this.itemClicked.bind(this);\r\n    }\r\n\r\n    itemClicked(e, item){\r\n        e.preventDefault();\r\n        this.props.latestClicked(item);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"laser-latest-div laser-shadow\">\r\n                <h4 className=\"text-center laser-black-text\">Latest Reports</h4>    \r\n                <ScrollToBottom style={styling}>\r\n                    {\r\n                        this.props.latest.map(item => {\r\n                            return <LatestItem key={item._id} itemClicked={this.itemClicked} item={item}/>\r\n                        })\r\n                    }\r\n                </ScrollToBottom>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nconst box_style = {\r\n    margin: \"16px\"\r\n}\r\n\r\n\r\nconst style = {\r\n    background: \"#2E86C1\",\r\n    border: \"0px solid #000000\",\r\n    color: \"#FFFFFF\",\r\n    padding: \"8px\",\r\n    borderRadius: \"4px\",\r\n    float: \"left\",\r\n    marginLeft: \"20px\"\r\n}\r\n\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nexport default function OrderStatus(props){\r\n    \r\n    return <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"Modal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center\">Message From Agent</h4>\r\n                    <button className=\"grey-bg bt-btn pull-right\" style={box_style} onClick={props.closeRouteResponse}>close</button>\r\n                    <br/>\r\n                    <br/>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 col-sm-8\">\r\n                            <h5 className=\"black-text\">{props.route_response.agent.agent.firstname} {props.route_response.agent.agent.lastname} has completed the route to {props.route_response.user.full_name}'s location</h5>\r\n                        </div>\r\n                        <div className=\"col-md-4 col-sm-4\">\r\n                            <h5><b>Phone Number</b></h5>\r\n                            <h5>{props.route_response.agent.agent.phone_number}</h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <h5><button className=\"green-bg bt-btn\" style={style} onClick={e => props.removeAgentFromRouteAndCloseRouteResponse(e, props.route_response)}>Remove Agent From Route</button></h5>\r\n                    </div>\r\n\r\n                </ReactModal>\r\n           </div>\r\n}","import React from 'react';\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginLeft: \"16px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nexport default function ConfirmAction(props){\r\n    return  <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"ConfirmModal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Confirmation</h4>\r\n                    <br/>\r\n                    <h5 className=\"text-center\">{props.message}</h5>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-blue-bg laserbtn\" style={btn_style_left} onClick={props.yesClicked}>yes</button>\r\n                    <button className=\"laser-inline grey-bg laserbtn\" style={btn_style_right} onClick={props.noClicked}>no</button>\r\n                </ReactModal>\r\n            </div>\r\n}","\r\nexport default class Persistence{\r\n    saveAssignedAgents(selected_agents){\r\n        localStorage.setItem(\"assigned_agents\", JSON.stringify(selected_agents));\r\n    }\r\n\r\n    getAssignedAgents(){\r\n        return JSON.parse(localStorage.getItem(\"assigned_agents\"));\r\n    }\r\n\r\n    deleteAssignedAgents(){\r\n        localStorage.removeItem(\"assigned_agents\");\r\n    }\r\n\r\n    saveCompletedEmergenciesResponse(all_responses){\r\n        localStorage.setItem(\"route_completed\", JSON.stringify(all_responses));\r\n    }\r\n\r\n    getCompletedEmergenciesResponse(){\r\n        return JSON.parse(localStorage.getItem(\"route_completed\"));\r\n    }\r\n}","import React from 'react';\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nimport BarLoader from 'react-spinners/BarLoader';\r\n\r\nimport MoonLoader from 'react-spinners/MoonLoader';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst override = {\r\n    display: \"block\",\r\n    margin: \"0 auto\",\r\n    border: \"0px solid #000000\"\r\n}\r\n\r\nexport default function Loader(props){\r\n    return  <div>\r\n                <ReactModal \r\n                    isOpen={props.isLoading}\r\n                    className=\"LoadingModal\"\r\n                    overlayClassName=\"LoadingOverlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n\r\n                    <MoonLoader\r\n                        css={override}\r\n                        sizeUnit={\"px\"}\r\n                        size={80}\r\n                        color={'#2E86C1'}\r\n                        loading={props.isLoading}\r\n                    />\r\n\r\n                    <h4 className=\"text-center\">Please Wait</h4>\r\n\r\n                </ReactModal>\r\n            </div>\r\n}","\r\n//Our Auth Service\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nconst Axios = Auth.axios;\r\n\r\nconst locations_url = \"/getLocations\";\r\nconst emergencies_url = \"/getEmergencies\";\r\nconst resolve_emergenciy_url = \"/resolveEmergency\";\r\nconst resolve_location_url = \"/resolveCall\";\r\n\r\nconst createAgentUrl = \"/create_agent\";\r\nconst editAgentUrl = \"/edit_agent\";\r\nconst deleteAgentUrl = \"/delete_agent\";\r\nconst getAgentsUrl = \"/get_agents\";\r\nconst getAgentsDepartmentUrl = \"/get_agents_departments\";\r\n\r\nconst createDepartmentUrl = \"/create_department\";\r\nconst editDepartmentUrl = \"/edit_department\";\r\nconst deleteDepartmentUrl = \"/delete_department\";\r\nconst getDepartmentsUrl = \"/get_departments\";\r\n\r\nconst createAdminUrl = \"/create_admin\";\r\nconst editAdminUrl = \"/edit_admin\";\r\nconst deleteAdminUrl = \"/delete_admin\";\r\nconst getAdminsUrl = \"/get_admins\";\r\n\r\nconst createManualLocationUrl = \"/create_manual_location\";\r\n\r\nconst saveMonitoringGridUrl = \"/setMonitorings\";\r\nconst getMonitoringGridUrl = \"/getMonitorings\";\r\n\r\nexport const createManualLocation = (data) => {\r\n    return  Axios(createManualLocationUrl, data)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const getLocations = (data) => {\r\n    return  Axios(locations_url, data)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const getEmergencies = (data) => {\r\n    return  Axios(emergencies_url, data)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const resolveLocation = (id) => {\r\n    return  Axios(resolve_location_url, id)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const resolveEmergency = (data) => {\r\n    return  Axios(resolve_emergenciy_url, data)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const getAgents = () => {\r\n    return  Axios(getAgentsUrl)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const getAgentsDepartment = (department) => {\r\n    return  Axios(getAgentsDepartmentUrl, {department})\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    console.log({err});\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const createAgent = (data) => {\r\n    return Axios(createAgentUrl, data)\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const editAgent = (data) => {\r\n    return Axios(editAgentUrl, data)\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const deleteAgent = (id) => {\r\n    return Axios(deleteAgentUrl, {id})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const getDepartments = () => {\r\n    return  Axios(getDepartmentsUrl)\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const createDepartment = (name) => {\r\n    return Axios(createDepartmentUrl, {name})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const editDepartment = (data) => {\r\n    return Axios(editDepartmentUrl, data)\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const deleteDepartment = (id) => {\r\n    return Axios(deleteDepartmentUrl, {id})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\n\r\n\r\n//admin routes\r\nexport const getAdmins = (count) => {\r\n    return  Axios(getAdminsUrl, {count})\r\n                .then(res => {\r\n                    return res;\r\n                })\r\n                .catch(err => {\r\n                    return \"error\";\r\n                })\r\n}\r\n\r\nexport const createAdmin = (name) => {\r\n    return Axios(createAdminUrl, {name})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const editAdmin = (data) => {\r\n    return Axios(editAdminUrl, data)\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const deleteAdmin = (id) => {\r\n    return Axios(deleteAdminUrl, {id})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const saveMonitoringGrid = (monitoring_grid) => {\r\n    return Axios(saveMonitoringGridUrl, {monitorings:monitoring_grid})\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}\r\n\r\nexport const getMonitoringGrid = () => {\r\n    return Axios(getMonitoringGridUrl, {}, \"get\")\r\n            .then(res => {\r\n                return res;\r\n            })\r\n            .catch(err => {\r\n                return \"error\";\r\n            })\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport red_circle from './icons/emergency_with_circle.gif';\r\nimport blue_circle from './icons/call_with_circle.gif';\r\nimport emergency_icon from './icons/emergency.gif';\r\nimport call_icon from './icons/call.gif';\r\nimport car_test from './icons/car_test.png';\r\n\r\n//import police_car from './icons/vector/police_car.svg'\r\n//import police_car_enroute from './icons/vector/police_car_yellow.svg'\r\n\r\nimport police_car from './icons/PNG/police_car.png'\r\nimport police_car_using from './icons/PNG/police_car_using.png'\r\nimport police_car_using_other from './icons/PNG/police_car_other_using.png'\r\nimport police_car_in_focus from './icons/PNG/police_car_in_focus.png'\r\n\r\nimport fire_car from './icons/PNG/fire_truck.png'\r\nimport fire_car_using from './icons/PNG/fire_truck_using.png'\r\nimport fire_car_using_other from './icons/PNG/fire_truck_other_using.png'\r\nimport fire_car_in_focus from './icons/PNG/fire_truck_in_focus.png'\r\n\r\nimport ambulance from './icons/PNG/ambulance.png'\r\nimport ambulance_using from './icons/PNG/ambulance_using.png'\r\nimport ambulance_using_other from './icons/PNG/ambulance_other_using.png'\r\nimport ambulance_in_focus from './icons/PNG/ambulance_in_focus.png'\r\n\r\n\r\nimport alert from \"./sounds/alert.mp3\";\r\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Sidebar from './components/Sidebar';\r\nimport Action from './components/Action';\r\nimport AgentDetails from './components/AgentDetails';\r\nimport LocationSidebar from './components/LocationSideBar';\r\nimport AddCallManually from './components/AddCallManually';\r\nimport ConfirmAddressNotFound from './components/ConfirmAddressNotFound';\r\nimport TopPanel from './components/TopPanel';\r\nimport Latest from './components/Latest';\r\nimport RouteStatus from './components/RouteStatus';\r\nimport ConfirmAction from './components/ConfirmAction';\r\nimport Utils from './utils/Utils';\r\nimport Persistence from './utils/Persistence';\r\nimport Sound from 'react-sound';\r\nimport PubNubReact from 'pubnub-react';\r\nimport Geocode from \"react-geocode\";\r\n\r\nimport Loader from './components/Loader';\r\n\r\nimport './App.css';\r\n\r\nimport * as API from './api/Api';\r\n\r\nimport AuthHelperMethods from './auth/AuthHelperMethods';\r\n\r\nconst utils = new Utils();\r\nconst persistence = new Persistence();\r\n\r\nconst mapStyle = {\r\n    height: '100vh', \r\n    width: '100%'\r\n}\r\n\r\nconst socket_io_url = 'http://18.192.254.193';\r\n//const socket_io_url = 'http://localhost:3080';\r\n\r\nlet todays_date = new Date().toISOString();\r\n\r\nlet today = null;\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n      super(props);\r\n\r\n      this.state = {\r\n          showConfirm: {\r\n              action: \"\",\r\n              status: false\r\n          },\r\n          latest: [],\r\n          locations: [], \r\n          emergencies: [], \r\n          filtered_locations: [],\r\n          filtered_emergencies: [],\r\n          side_bar_open: false, \r\n          agent_side_bar_open: false, \r\n          location_side_bar_open: false, \r\n          manual_location_side_bar: false,\r\n          clicked_user: {}, \r\n          clicked_agent: {},\r\n          center: {lat: 6.5244,lng: 3.3792}, \r\n          selected_call:\"Calls (All)\", \r\n          selected_emergency:\"Emergencies (All)\",\r\n          zoom : 11,\r\n          show_red_circle: false,\r\n          show_blue_circle: false,\r\n          clicked_marker_id: \"\",\r\n          play_sound: false,\r\n          channels_list: [\"lllaser\"],\r\n\r\n          agents_in_focus: [],\r\n          laser_agents:[], //all agents\r\n          monitoring_grid: [],\r\n          responses_available: false,\r\n\r\n          route_responses_from_agents: [],\r\n          action: \"loading\",\r\n          action_message: \"\",\r\n          tracked_area: \"lllaser\", //the user in which the admin is currently viewing whether the user wants to be tracked or not\r\n          date: new Date(),\r\n          message: \"\",\r\n\r\n          selected_manual_call:\"Emergency Management(LASEMA)\",\r\n          selected_manual_gender:\"Male\",\r\n          manual_name: \"\",\r\n          manual_phone: \"\",\r\n          manual_address: \"\",\r\n          showConfirmManualLocation: false,\r\n\r\n          isLoading: false\r\n      }\r\n      \r\n      this.pubnub = new PubNubReact({\r\n        publishKey: 'pub-c-100b3918-0e25-4fac-ade6-c58d013cd019',\r\n        subscribeKey: 'sub-c-21e1e450-9457-11e9-bf84-1623aee89087'\r\n      });\r\n      this.pubnub.init(this);\r\n\r\n      this.closeSideBar = this.closeSideBar.bind(this);\r\n      this.onCallsChanged = this.onCallsChanged.bind(this);\r\n      this.onEmergenciesChanged = this.onEmergenciesChanged.bind(this);\r\n      this.onAgentClicked = this.onAgentClicked.bind(this);\r\n      this.onDateChange = this.onDateChange.bind(this);\r\n      this.onCalendarOpen = this.onCalendarOpen.bind(this);\r\n      this.latestClicked = this.latestClicked.bind(this);\r\n      this.startMonitoring = this.startMonitoring.bind(this);\r\n      this.closeAction = this.closeAction.bind(this);\r\n      this.closeAgentSideBar = this.closeAgentSideBar.bind(this);\r\n      this.addAgentToMonitoring = this.addAgentToMonitoring.bind(this);\r\n      this.getAgentIcon = this.getAgentIcon.bind(this);\r\n      this.getAgentsAroundEmergency = this.getAgentsAroundEmergency.bind(this);\r\n      this.handleSongFinishedPlaying = this.handleSongFinishedPlaying.bind(this);\r\n      this.removeAgentFromRoute = this.removeAgentFromRoute.bind(this);\r\n      this.closeRouteResponse = this.closeRouteResponse.bind(this);\r\n      this.removeAgentFromRouteAndCloseRouteResponse = this.removeAgentFromRouteAndCloseRouteResponse.bind(this);\r\n      this.showMonitoredEmergency = this.showMonitoredEmergency.bind(this);\r\n\r\n      this.getEmergencies = this.getEmergencies.bind(this);\r\n      this.getLocations = this.getLocations.bind(this);\r\n      this.getLocationsDate = this.getLocationsDate.bind(this);\r\n      this.getEmergenciesDate = this.getEmergenciesDate.bind(this);\r\n      this.getLatestEmergencies = this.getLatestEmergencies.bind(this);\r\n      this.getLatestLocations = this.getLatestLocations.bind(this);\r\n\r\n      this.getSelectedAgentsIds = this.getSelectedAgentsIds.bind(this);\r\n      this.setSelectedAgentsFromIds = this.setSelectedAgentsFromIds.bind(this);\r\n\r\n      this.resolveCall = this.resolveCall.bind(this);\r\n      this.resolveEmergency = this.resolveEmergency.bind(this);\r\n      this.hideConfirm = this.hideConfirm.bind(this);\r\n      this.showConfirmResolveEmergency = this.showConfirmResolveEmergency.bind(this);\r\n      this.showConfirmResolveLocation = this.showConfirmResolveLocation.bind(this);\r\n      this.getMonitoringGridFromServerAndReconcileAssignedAgents = this.getMonitoringGridFromServerAndReconcileAssignedAgents.bind(this);\r\n      this.setUpAssignedAgentsIfAny = this.setUpAssignedAgentsIfAny.bind(this);\r\n      this.removeAgentFromEmergencyAfterDecliningRequest = this.removeAgentFromEmergencyAfterDecliningRequest.bind(this);\r\n\r\n      this.onManualCallChanged = this.onManualCallChanged.bind(this);\r\n      this.onManualGenderChanged = this.onManualGenderChanged.bind(this);\r\n      this.onSubmitManualCallDetails = this.onSubmitManualCallDetails.bind(this);\r\n      this.openManualLocation = this.openManualLocation.bind(this);\r\n      this.onFieldChanged = this.onFieldChanged.bind(this);\r\n\r\n      this.showConfirmManualLocation = this.showConfirmManualLocation.bind(this);\r\n      this.hideConfirmManualLocation = this.hideConfirmManualLocation.bind(this);\r\n\r\n      this.tryAgainClicked = this.tryAgainClicked.bind(this);\r\n      this.continueConfirmAddressNotFoundClicked = this.continueConfirmAddressNotFoundClicked.bind(this);\r\n      this.closeConfirmAddressNotFoundClicked = this.closeConfirmAddressNotFoundClicked.bind(this);\r\n      this.saveManualLocation = this.saveManualLocation.bind(this);\r\n\r\n      this.showLoading = this.showLoading.bind(this);\r\n      this.hideLoading = this.hideLoading.bind(this);\r\n\r\n      this.logout = this.logout.bind(this);\r\n    \r\n      var year = todays_date.split(/T(.+)/)[0];\r\n\r\n      year = year+\"T00:00:00.000Z\";\r\n\r\n      today = new Date(year);\r\n\r\n\r\n      Geocode.setApiKey(\"AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI\");\r\n \r\n      // set response language. Defaults to english.\r\n      Geocode.setLanguage(\"en\");\r\n        \r\n      // set response region. Its optional.\r\n      // A Geocoding request with region=es (Spain) will return the Spanish city.\r\n      Geocode.setRegion(\"ngr\");\r\n        \r\n      // Enable or disable logs. Its optional.\r\n      Geocode.enableDebug();\r\n\r\n      this.utils = new Utils();\r\n\r\n      const Auth = new AuthHelperMethods();\r\n\r\n      this.browserAdmin = Auth.getAdmin();\r\n  }\r\n\r\n  showLoading(){\r\n      this.setState({\r\n          isLoading: true\r\n      })\r\n  }\r\n\r\n  hideLoading(){\r\n      this.setState({\r\n          isLoading: false\r\n      })\r\n  }\r\n\r\n  logout(){\r\n      this.props.logout();\r\n  }\r\n\r\n  async resolveEmergency(){\r\n      \r\n  }\r\n\r\n  async resolveCall(){\r\n      \r\n  }\r\n\r\nasync showMonitoredEmergency(e){\r\n    const emergency_full_row = await this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, this.state.monitoring_grid);\r\n    \r\n    if(emergency_full_row && emergency_full_row.emergency){\r\n        var item = emergency_full_row.emergency;\r\n        \r\n        switch(item.laser_type){\r\n            case \"emergency\":\r\n                this.setState({\r\n                  clicked_user: item,\r\n                  side_bar_open: true,\r\n                  location_side_bar_open: false,\r\n                  agent_side_bar_open: false,\r\n                  center: {\r\n                    lat: item.latitude,\r\n                    lng: item.longitude\r\n                  },\r\n                  zoom: 19,\r\n                  show_red_circle: true,\r\n                  show_blue_circle: false,\r\n                  clicked_marker_id: item._id\r\n                })\r\n                break;\r\n            case \"call\":\r\n                this.setState({\r\n                  clicked_user: item,\r\n                  side_bar_open: false,\r\n                  location_side_bar_open: true,\r\n                  agent_side_bar_open: false,\r\n                  center: {\r\n                    lat: item.latitude,\r\n                    lng: item.longitude\r\n                  },\r\n                  zoom: 19,\r\n                  show_red_circle: false,\r\n                  show_blue_circle: true,\r\n                  clicked_marker_id: item._id\r\n                })\r\n                break;\r\n        }\r\n    }\r\n    else{\r\n        this.setState({\r\n            action: \"message\",\r\n            action_message: \"You are not monitoring any emergency or call at the moment\",\r\n        })\r\n    }\r\n}\r\n\r\nshowConfirmResolveEmergency(e){\r\n    e.preventDefault();\r\n    this.setState({\r\n        showConfirm: {\r\n          action: \"emergency\",\r\n          status: true\r\n        },\r\n        message: \"Are you sure you want to mark this emergency issue as resolved ?\"\r\n    })\r\n}\r\n\r\nshowConfirmResolveLocation(){\r\n    this.setState({\r\n        showConfirm: {\r\n          action: \"location\",\r\n          status: true\r\n        },\r\n        message: \"Are you sure you want to mark this call as resolved ?\"\r\n    })\r\n}\r\n\r\nasync removeAgentFromRoute(e, agent){\r\n    this.showLoading();\r\n\r\n    const result = await this.utils.removeAgentFromBrowserAdminMonitoringGrid(agent, this.browserAdmin._id, this.state.monitoring_grid, this.state.laser_agents);\r\n    \r\n    if(result){\r\n        //result[0] //monitoring_grid\r\n        //result[1] //laser agents\r\n\r\n        const save_result = await API.saveMonitoringGrid(result[0]);\r\n\r\n        if(save_result){\r\n            if(save_result.data===\"successful\"){\r\n                //persist agents incase the user reloads the page or closes the browser\r\n                var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                var new_assigned_agents = this.utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\r\n                \r\n                if(new_assigned_agents.length > 0){\r\n                    persistence.saveAssignedAgents(new_assigned_agents);\r\n                }\r\n                else{\r\n                    persistence.deleteAssignedAgents();\r\n                }\r\n\r\n                //unsubscribe from agents channel\r\n                this.pubnub.unsubscribe({\r\n                    channels: [agent.agent._id]\r\n                })\r\n\r\n                //tell agent to leave the emergency\r\n                this.pubnub.publish(\r\n                    {\r\n                        message: {\r\n                          pn_gcm: {\r\n                              data: {\r\n                                  notification_body: \"You need to abandon route. Tap to open app\",\r\n                                  data: {},\r\n                                  action: \"leave_route\"\r\n                              }\r\n                          }\r\n                        },\r\n                        channel: agent.agent._id,\r\n                        sendByPost: false, // true to send via POST\r\n                        storeInHistory: false //override default storage options\r\n                    },\r\n                    (status, response) => {\r\n                        // handle status, response\r\n                    }\r\n                );\r\n\r\n                //we set state and update the monitoring grid and the laser agents list\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\r\n                    monitoring_grid: result[0],\r\n                    laser_agents: result[1],\r\n                    agent_side_bar_open: false,\r\n                    clicked_agent: {},\r\n                })\r\n\r\n                this.hideLoading();\r\n            }\r\n\r\n            if(save_result.data === \"unsuccessful\"){\r\n                this.hideLoading();\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"An error occurred removing the agent from the emergency\"\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            this.hideLoading();\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred removing the agent from the emergency\"\r\n            })\r\n        }\r\n\r\n    }\r\n    else{\r\n        this.hideLoading();\r\n        this.setState({\r\n            action: \"message\",\r\n            action_message: \"An error occurred removing the agent from the emergency\"\r\n        })\r\n    }\r\n  }\r\n\r\n  async removeAgentFromRouteAndCloseRouteResponse(e, route_response){\r\n    var agent = route_response.agent;\r\n\r\n    this.showLoading();\r\n\r\n    const result = await this.utils.removeAgentFromBrowserAdminMonitoringGrid(agent, this.browserAdmin._id, this.state.monitoring_grid, this.state.laser_agents);\r\n    \r\n    if(result){\r\n        //result[0] //monitoring_grid\r\n        //result[1] //laser agents\r\n\r\n        const save_result = await API.saveMonitoringGrid(result[0]);\r\n\r\n        if(save_result){\r\n            if(save_result.data===\"successful\"){\r\n                //persist agents incase the user reloads the page or closes the browser\r\n                var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                var new_assigned_agents = this.utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\r\n                \r\n                if(new_assigned_agents.length > 0){\r\n                    persistence.saveAssignedAgents(new_assigned_agents);\r\n                }\r\n                else{\r\n                    persistence.deleteAssignedAgents();\r\n                }\r\n\r\n                //unsubscribe from agents channel\r\n                this.pubnub.unsubscribe({\r\n                    channels: [agent.agent._id]\r\n                })\r\n\r\n\r\n                var route_response_array = this.state.route_responses_from_agents;\r\n  \r\n                route_response_array.splice(route_response_array.indexOf(route_response),1);\r\n\r\n                //persist route complete responses array\r\n                persistence.saveCompletedEmergenciesResponse(route_response_array);\r\n\r\n\r\n                //we set state and update the monitoring grid and the laser agents list\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"Agent \" +agent.agent.firstname +\" was successfully removed from monitoring the emergency\",\r\n                    monitoring_grid: result[0],\r\n                    laser_agents: result[1],\r\n                    agent_side_bar_open: false,\r\n                    clicked_agent: {},\r\n                    route_responses_from_agents: route_response_array\r\n                })\r\n\r\n                this.hideLoading();\r\n            }\r\n\r\n            if(save_result.data === \"unsuccessful\"){\r\n                this.hideLoading();\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"An error occurred removing the agent from the emergency\"\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            this.hideLoading();\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred removing the agent from the emergency\"\r\n            })\r\n        }\r\n\r\n    }\r\n    else{\r\n        this.hideLoading();\r\n        this.setState({\r\n            action: \"message\",\r\n            action_message: \"An error occurred removing the agent from the emergency\"\r\n        })\r\n    }\r\n  }\r\n  \r\n  async addAgentToMonitoring(e, agent){\r\n      const monitored_result = this.utils.checkIfEmergencyMonitoredByBrowserAdmin(this.browserAdmin._id, this.state.monitoring_grid);\r\n\r\n      if(monitored_result){\r\n        var check_result = await this.utils.checkIfOtherAdminIsUsingAgent(this.browserAdmin._id, agent, this.state.monitoring_grid);\r\n      \r\n        if(check_result){\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"Another admin has assigned agent \" +agent.agent.firstname +\" to an emergency\"\r\n            })\r\n        }\r\n        else{\r\n                //we continue\r\n                //add agent to monitoring grid and save on the server\r\n                const grid_and_agents_array = await this.utils.setAgentOnMonitoringGridAndChangeAgentStatus(agent, this.state.monitoring_grid, this.browserAdmin._id, this.state.laser_agents);\r\n\r\n                var new_monitoring_grid = grid_and_agents_array[0];\r\n                var new_laser_agents = grid_and_agents_array[1];\r\n\r\n                const result = await API.saveMonitoringGrid(new_monitoring_grid);\r\n                \r\n                if(result.data===\"successful\"){\r\n                    //we get the emregency monitored from the monitoring grid which is the central source of truth\r\n                    const emergency_full_row = await this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, this.state.monitoring_grid);\r\n\r\n                    var emergency_monitored = emergency_full_row.emergency;\r\n\r\n                    if(emergency_monitored){\r\n                        //we tell the agent to open the new route and go to the emergency or call\r\n                        this.pubnub.publish(\r\n                            {\r\n                            message: {\r\n                                pn_gcm: {\r\n                                    data: {\r\n                                        notification_body: \"You have a new route. Tap to open app.\",\r\n                                        data: emergency_monitored.phone_number ? {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, phone_number: emergency_monitored.phone_number, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude} : {full_name: emergency_monitored.full_name, _id: emergency_monitored.user, latitude: emergency_monitored.latitude, longitude: emergency_monitored.longitude},\r\n                                        action: \"route_request\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            channel: agent.agent._id,\r\n                            sendByPost: false, // true to send via POST\r\n                            storeInHistory: false //override default storage options\r\n                            },\r\n                            (status, response) => {\r\n                                // handle status, response\r\n                            }\r\n                        );\r\n\r\n                        //we subscribe the admin to the agents id channel\r\n                        var list = this.state.channels_list;\r\n\r\n                        if(list.indexOf(agent.agent._id)===-1){\r\n                            list.push(agent.agent._id)\r\n                        }\r\n\r\n                        this.pubnub.subscribe({\r\n                            channels: list\r\n                        })\r\n\r\n\r\n                        //persist agents incase the user reloads the page or closes the browser\r\n                        var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                        var new_assigned_agents = this.utils.addAgentToListOfAssignedAgentsForPersistence(agent, assigned_agents)\r\n                        \r\n                        persistence.saveAssignedAgents(new_assigned_agents);\r\n\r\n                        //we then update state\r\n                        this.setState({\r\n                            monitoring_grid: new_monitoring_grid,\r\n                            laser_agents: new_laser_agents,\r\n                            //channels_list: list,\r\n                            action: \"message\",\r\n                            action_message: \"Agent \"+agent.agent.firstname +\" has been successfully assigned to the emergency\"\r\n                        })\r\n                    }\r\n                }\r\n\r\n                if(result.data===\"unsuccessful\"){\r\n                    //the grid was NOT successfully saved \r\n                        //show message\r\n                        this.setState({\r\n                            action: \"message\",\r\n                            action_message: \"The system could NOT successfully assign the agent to the emergency\"\r\n                        })\r\n                }\r\n        }\r\n      }\r\n      else{\r\n\r\n      }\r\n  }\r\n\r\n  async startMonitoring(e, item){\r\n        \r\n        try{\r\n            //check if another admin is monitoring the emergency\r\n            const boolean_value = await this.utils.checkIfEmergencyMonitoredByOtherAdmin(this.state.monitoring_grid, item, this.browserAdmin._id);\r\n\r\n            if(boolean_value){\r\n                //the emergency is being monitored by another admin\r\n                //tell the browser admin about this\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"Another admin is already monitoring the selected emergency\"\r\n                })\r\n            }\r\n            else{\r\n                //we continue by editing the monitoring_grid and persisting it\r\n                const new_monitoring_grid = await this.utils.setEmergencyOnMonitoringGrid(item, this.state.monitoring_grid, this.browserAdmin._id);\r\n                \r\n                const result = await API.saveMonitoringGrid(new_monitoring_grid);\r\n                \r\n                if(result.data===\"successful\"){\r\n                    //the grid was successfully saved \r\n                    //change monitoring grid in local state\r\n                    //subscribe to channel if user chose to be tracked\r\n                    //show message\r\n\r\n                    var list = this.state.channels_list ? this.state.channels_list : [];\r\n\r\n                    //we subscribe to the items channel ONLY if the item is trackable\r\n                    if(item.is_trackable){ \r\n                        if(list.indexOf(item.user)===-1){\r\n                            //remove old user from list\r\n                            //unsubscribe from old user\r\n                \r\n                            list.push(item.user)\r\n                        }\r\n\r\n                        this.pubnub.subscribe({\r\n                            channels: list\r\n                        })\r\n                    }\r\n                    \r\n                    this.setState({\r\n                        action: \"message\",\r\n                        action_message: \"You are now monitoring \"+item.full_name,\r\n                        channels_list: list,\r\n                        monitoring_grid: new_monitoring_grid\r\n                    })  \r\n                }\r\n\r\n                if(result.data===\"unsuccessful\"){\r\n                    //the grid was NOT successfully saved \r\n                    //show message\r\n                    this.setState({\r\n                        action: \"message\",\r\n                        action_message: \"The system could not initiate the monitoring of that emergency\"\r\n                    })\r\n                }\r\n                            \r\n            }\r\n        }\r\n        catch(err){\r\n            console.log({err})\r\n            //show message\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"Error occurred initiating monitoring of emergency\"\r\n            })\r\n        }\r\n  }\r\n\r\n  //this is not showing the agents in the same lga\r\n  getAgentsAroundEmergency(){\r\n    //show the agents around an emergency\r\n    //search to see if an emergency is being monitored by the admin browser\r\n    this.utils.checkIfEmergencyMonitoredByBrowserAdmin(this.browserAdmin._id, this.state.monitoring_grid)\r\n                .then(boolean_value => {\r\n                    if(boolean_value){\r\n\r\n                        //ideally this shiuld be sent to those agents in the emergency's LGA\r\n                        //for now we are publishing to all agents \r\n                        this.pubnub.publish(\r\n                            {\r\n                                message: {\r\n                                    pn_gcm: {\r\n                                        data: {\r\n                                            notification_body: \"Tap to open the Laser App\",\r\n                                            data: {},\r\n                                            action: \"send_location\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                channel: this.state.tracked_area,\r\n                                sendByPost: false, // true to send via POST\r\n                                storeInHistory: false //override default storage options\r\n                            },\r\n                            (status, response) => {\r\n                                // handle status, response\r\n                            }\r\n                        );\r\n\r\n                        this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, this.state.monitoring_grid)\r\n                                .then(emergency_monitored => {\r\n                                    //admin is monitoring an emergency or call\r\n                                    //check for the agents in emergency LGA\r\n                                    this.utils.setAgentsInFocus(this.state.agents_in_focus, emergency_monitored.emergency, this.state.laser_agents)\r\n                                        .then(result => {\r\n                                            //we set the state for the laser agents and the agents in focus\r\n                                            this.setState({\r\n                                                laser_agents: result[0],\r\n                                                agents_in_focus: result[1]\r\n                                            })\r\n                                        })\r\n                                        .catch(err => {\r\n                                            this.setState({\r\n                                                action: \"message\",\r\n                                                action_message: \"An error occurred seeking agents around emergency\"\r\n                                            })\r\n                                        })\r\n                                })\r\n                                .catch(err => {\r\n\r\n                                })\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            action: \"message\",\r\n                            action_message: \"You are NOT monitoring any emergency or call\"\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.setState({\r\n                        action: \"message\",\r\n                        action_message: \"An error occurred seeking agents around emergency\"\r\n                    })\r\n                })\r\n  }\r\n\r\n  latestClicked(item){\r\n      switch(item.laser_type){\r\n          case \"emergency\":\r\n              this.setState({\r\n                clicked_user: item,\r\n                side_bar_open: true,\r\n                location_side_bar_open: false,\r\n                agent_side_bar_open: false,\r\n                center: {\r\n                  lat: item.latitude,\r\n                  lng: item.longitude\r\n                },\r\n                zoom: 19,\r\n                show_red_circle: true,\r\n                show_blue_circle: false,\r\n                clicked_marker_id: item._id\r\n              })\r\n              break;\r\n          case \"call\":\r\n              this.setState({\r\n                clicked_user: item,\r\n                side_bar_open: false,\r\n                location_side_bar_open: true,\r\n                agent_side_bar_open: false,\r\n                center: {\r\n                  lat: item.latitude,\r\n                  lng: item.longitude\r\n                },\r\n                zoom: 19,\r\n                show_red_circle: false,\r\n                show_blue_circle: true,\r\n                clicked_marker_id: item._id\r\n              })\r\n              break;\r\n      }\r\n  }\r\n\r\n  openManualLocation(){\r\n      this.setState({\r\n            manual_location_side_bar: true,\r\n            side_bar_open: false,\r\n            location_side_bar_open: false,\r\n            agent_side_bar_open: false\r\n      })\r\n  }\r\n  \r\n  onCalendarOpen(){\r\n      this.setState({\r\n        play_sound: false,\r\n        side_bar_open: false, \r\n        location_side_bar_open: false,\r\n        agent_side_bar_open: false\r\n      })\r\n  }\r\n\r\n  onDateChange(date){\r\n\r\n    //We add 1 hour to the date because the date axios is sending to the server is 1 hour behind what it should be\r\n    date = new Date(date);\r\n    date.setHours(date.getHours() + 1);\r\n\r\n     this.setState({\r\n        play_sound: false,\r\n        date: date,\r\n        show_red_circle: false,\r\n        show_blue_circle: false,\r\n        clicked_marker_id: \"\",\r\n        action: \"loading\",\r\n        action_message: \"\",\r\n        selected_call:\"Calls (All)\", \r\n        selected_emergency:\"Emergencies (All)\"\r\n     })\r\n\r\n     this.getLocationsDate(date);\r\n     this.getEmergenciesDate(date);\r\n  }\r\n\r\n  onCallsChanged(event){\r\n      const target = event.target;\r\n      const value = target.value;\r\n      const name = target.name;\r\n\r\n      let arr = [];\r\n\r\n      if(this.state.locations.length>0){\r\n          if(value===\"Calls (All)\"){\r\n            this.setState(state => ({\r\n              play_sound: false,\r\n              filtered_locations: state.locations,\r\n              side_bar_open: false, \r\n              selected_call: value,\r\n              agent_side_bar_open: false,\r\n              location_side_bar_open: false,\r\n              show_blue_circle: false\r\n            }))\r\n          }\r\n          else if(value===\"None\"){\r\n            this.setState({\r\n              play_sound: false,\r\n              filtered_locations: [],\r\n              side_bar_open: false, \r\n              selected_call: value,\r\n              agent_side_bar_open: false,\r\n              location_side_bar_open: false,\r\n              show_blue_circle: false\r\n            })\r\n          }\r\n          else{\r\n            this.state.locations.map(emer => {\r\n              if(emer.reason.includes(value.toLowerCase())){\r\n                arr.push(emer)\r\n              }\r\n            })\r\n            \r\n            if(arr.length>0){\r\n              this.setState({\r\n                play_sound: false,\r\n                filtered_locations: arr,\r\n                selected_call: value,\r\n                side_bar_open: false, \r\n                agent_side_bar_open: false,\r\n                location_side_bar_open: false,\r\n                show_blue_circle: false\r\n              })\r\n            }\r\n            else{\r\n              //show message that there are no locations found for that parameter\r\n      \r\n              this.setState({\r\n                  play_sound: false,\r\n                  filtered_locations:[],\r\n                  selected_call: value,\r\n                  side_bar_open: false, \r\n                  location_side_bar_open: false,\r\n                  show_blue_circle: false\r\n              })\r\n            }\r\n          }\r\n      }\r\n      else{\r\n          this.setState({\r\n              selected_call: value\r\n          })\r\n      }\r\n  }\r\n\r\n  onEmergenciesChanged(event){\r\n      const target = event.target;\r\n      const value = target.value;\r\n      const name = target.name;\r\n      \r\n      let arr = [];\r\n      if(this.state.emergencies.length>0){\r\n          if(value===\"Emergencies (All)\"){\r\n            this.setState(state => ({\r\n              play_sound: false,\r\n              filtered_emergencies: state.emergencies,\r\n              side_bar_open: false, \r\n              selected_emergency: value,\r\n              location_side_bar_open: false,\r\n              agent_side_bar_open: false,\r\n              show_red_circle: false\r\n            }))\r\n          }\r\n          else if(value===\"None\"){\r\n            this.setState({\r\n              play_sound: false,\r\n              filtered_emergencies:[],\r\n              selected_emergency: value,\r\n              side_bar_open: false, \r\n              agent_side_bar_open: false,\r\n              location_side_bar_open: false,\r\n              show_red_circle: false\r\n            })\r\n          }\r\n          else{\r\n            this.state.emergencies.map(emer => {\r\n              if(emer.reasons&&emer.reasons.length>0){\r\n                emer.reasons.map(reason => {\r\n                    if(value.toLowerCase().includes(reason)){\r\n                        arr.push(emer)\r\n                    }\r\n                })\r\n              }\r\n            })\r\n      \r\n            if(arr.length>0){\r\n              this.setState({\r\n                play_sound: false,\r\n                filtered_emergencies:arr,\r\n                selected_emergency: value,\r\n                side_bar_open: false, \r\n                agent_side_bar_open: false,\r\n                location_side_bar_open: false,\r\n                show_red_circle: false\r\n              })\r\n            }\r\n            else{\r\n              //show message that there are no emregencies found for that parameter\r\n      \r\n              this.setState({\r\n                  play_sound: false,\r\n                  filtered_emergencies: [],\r\n                  side_bar_open: false, \r\n                  selected_emergency: value,\r\n                  agent_side_bar_open: false,\r\n                  location_side_bar_open: false,\r\n                  show_red_circle: false\r\n              })\r\n            }\r\n          }\r\n      }    \r\n      else{\r\n          this.setState({\r\n             selected_emergency: value\r\n          })\r\n      }\r\n  }\r\n\r\n  //formerly onLocationClicked\r\n  onCallClicked(location,e){\r\n    this.setState({\r\n        play_sound: false,\r\n        clicked_user: location,\r\n        clicked_agent: {},\r\n        side_bar_open: false,\r\n        agent_side_bar_open: false,\r\n        manual_location_side_bar: false,\r\n        location_side_bar_open: true,\r\n        center: {\r\n          lat: location.latitude,\r\n          lng: location.longitude\r\n        },\r\n        zoom: 19,\r\n        show_red_circle: false,\r\n        show_blue_circle: true,\r\n        clicked_marker_id: location._id\r\n    })\r\n  }\r\n\r\n  onEmergencyClicked(emergency,e){\r\n    this.setState({\r\n        play_sound: false,\r\n        clicked_user: emergency,\r\n        clicked_agent: {},\r\n        side_bar_open: true,\r\n        manual_location_side_bar: false,\r\n        agent_side_bar_open: false,\r\n        location_side_bar_open: false,\r\n        center: {\r\n            lat: emergency.latitude,\r\n            lng: emergency.longitude\r\n        },\r\n        zoom: 19,\r\n        show_red_circle: true,\r\n        show_blue_circle: false,\r\n        clicked_marker_id: emergency._id\r\n    })\r\n  }\r\n\r\n  onAgentClicked(agent,e){\r\n      this.setState({\r\n          play_sound: false,\r\n          clicked_agent: agent,\r\n          manual_location_side_bar: false,\r\n          agent_side_bar_open: true\r\n    })\r\n  }\r\n\r\n  getLocationsMarkers(){\r\n        let locations_ui;\r\n\r\n        if(this.state.filtered_locations.length>0){\r\n            locations_ui = this.state.filtered_locations.map(loc => {\r\n                return  <Marker key={loc._id} onClick={e => this.onCallClicked(loc,e)}\r\n                            name={loc.reason} \r\n                            title={loc.full_name}\r\n                            position={{lat: loc.latitude, lng: loc.longitude}}\r\n                            icon={{\r\n                                url: (this.state.clicked_marker_id===loc._id) ? blue_circle : call_icon\r\n                            }}/> \r\n            })\r\n        }\r\n        else{\r\n            locations_ui = \"\";\r\n        }\r\n        \r\n        return locations_ui;\r\n  }\r\n\r\n  getEmergenciesMarkers(){\r\n      let emergencies_ui;\r\n\r\n      if(this.state.filtered_emergencies.length>0){\r\n          emergencies_ui = this.state.filtered_emergencies.map(emer => {\r\n            \r\n            return <Marker key={emer._id} onClick={e => this.onEmergencyClicked(emer,e)}\r\n                      name={emer.reasons[0]} \r\n                      title={emer.full_name}\r\n                      position={{lat: emer.latitude, lng: emer.longitude}}\r\n                      icon={{\r\n                        url: (this.state.clicked_marker_id===emer._id) ? red_circle : emergency_icon\r\n                      }}/>\r\n          })\r\n      }\r\n      else{\r\n          emergencies_ui = \"\";\r\n      }\r\n      \r\n      return emergencies_ui;\r\n  }\r\n\r\n  getAgentMarkers(){\r\n      let agents_ui;\r\n\r\n      if(this.state.laser_agents.length>0){\r\n            agents_ui = this.state.laser_agents.map((agent,i) => {\r\n                \r\n                return <Marker key={i}  onClick={e => this.onAgentClicked(agent,e)}\r\n                            name={agent.full_address} \r\n                            title={agent.full_address}\r\n                            position={{lat: agent.latitude, lng: agent.longitude}}\r\n                            //\r\n                            icon={{\r\n                                url: this.getAgentIcon(agent),\r\n                                anchor: new this.props.google.maps.Point(40,40),\r\n                                scaledSize: new this.props.google.maps.Size(40,40)\r\n                            }}/>\r\n            })\r\n      }\r\n      else{\r\n            agents_ui = \"\";\r\n      }\r\n\r\n      return agents_ui;\r\n  }\r\n\r\n  getAgentIcon(agent){\r\n\r\n      if(agent){\r\n            //we got the icon\r\n            switch(agent.agent.department){\r\n                case \"police\":\r\n                    switch(agent.status){\r\n                        case \"idle\":\r\n                            return police_car;\r\n                        break;\r\n                        case \"infocus\":\r\n                            return police_car_in_focus;\r\n                        break;\r\n                        case \"using\":\r\n                            return police_car_using;\r\n                        break;\r\n                        case \"using_by_other\":\r\n                            return police_car_using_other;\r\n                        break;\r\n                    }\r\n                break;\r\n                case \"fire\":\r\n                    switch(agent.status){\r\n                        case \"idle\":\r\n                            return fire_car;\r\n                        break;\r\n                        case \"infocus\":\r\n                            return fire_car_in_focus;\r\n                        break;\r\n                        case \"using\":\r\n                            return fire_car_using;\r\n                        break;\r\n                        case \"using_by_other\":\r\n                            return fire_car_using_other;\r\n                        break;\r\n                    }\r\n                break;\r\n                case \"hospital\":\r\n                    switch(agent.status){\r\n                        case \"idle\":\r\n                            return ambulance;\r\n                        break;\r\n                        case \"infocus\":\r\n                            return ambulance_in_focus;\r\n                        break;\r\n                        case \"using\":\r\n                            return ambulance_using;\r\n                        break;\r\n                        case \"using_by_other\":\r\n                            return ambulance_using_other;\r\n                        break;\r\n                    }\r\n                break;\r\n            }\r\n      }\r\n  }\r\n\r\n  hideConfirm(){\r\n    this.setState({\r\n        showConfirm: {\r\n          action: \"\",\r\n          status: false\r\n        },\r\n        message: \"\"\r\n    })\r\n}\r\n\r\n  closeAction(e){\r\n      this.setState({\r\n          action: \"close\",\r\n          action_message: \"\"\r\n      })\r\n  }\r\n\r\n  closeSideBar(e){\r\n      this.setState({\r\n          play_sound: false,\r\n          side_bar_open: false,\r\n          location_side_bar_open: false,\r\n          manual_location_side_bar: false,\r\n          agent_side_bar_open: false,\r\n          selected_location: {},\r\n          selected_emergency: {},\r\n          clicked_marker_id: \"\"\r\n      })\r\n  }\r\n\r\n  closeAgentSideBar(e){\r\n      this.setState({\r\n          clicked_agent: {},\r\n          agent_side_bar_open: false\r\n      })\r\n  }\r\n\r\n  closeRouteResponse(route_response){\r\n      this.setState(state => {\r\n          var array = state.route_responses_from_agents;\r\n\r\n          array.splice(array.indexOf(route_response),1);\r\n\r\n          return {\r\n              route_responses_from_agents: array\r\n          }\r\n      })\r\n  }\r\n\r\n  getSelectedAgentsIds(){\r\n     \r\n  }\r\n\r\n  setSelectedAgentsFromIds(ids){\r\n     \r\n  }\r\n\r\n  //we get the monitoring grid from the server and update our variables\r\n  async getMonitoringGridFromServerAndReconcileAssignedAgents(){\r\n        this.showLoading();\r\n        const response = await API.getMonitoringGrid();\r\n\r\n        if(response){\r\n            this.setUpAssignedAgentsIfAny(response.data);\r\n           \r\n            this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, response.data)\r\n                    .then(emergency_full_row => {\r\n                        var admin_emergency = emergency_full_row.emergency;\r\n\r\n                        if(admin_emergency){\r\n                            \r\n                            //we need to subscribe to the emergencies user id to receive location updates\r\n                            if(this.state.channels_list.indexOf(admin_emergency.user) === -1){\r\n                                var list = this.state.channels_list.concat([admin_emergency.user]);\r\n                                \r\n                                this.pubnub.subscribe({\r\n                                    channels: list\r\n                                })\r\n            \r\n                                this.setState({\r\n                                    action: \"message\",\r\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\r\n                                    monitoring_grid: response.data,\r\n                                    channels_list: list\r\n                                })\r\n                                this.hideLoading();\r\n                            }\r\n                            else{\r\n                                this.pubnub.subscribe({\r\n                                    channels: this.state.channels_list\r\n                                })\r\n            \r\n                                this.setState({\r\n                                    action: \"message\",\r\n                                    action_message: \"You are monitoring \"+admin_emergency.full_name,\r\n                                    monitoring_grid: response.data\r\n                                })\r\n                                this.hideLoading();\r\n                            }\r\n                        }\r\n                        else{\r\n                            this.setState({\r\n                                monitoring_grid: response.data\r\n                            })\r\n                            this.hideLoading();\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        this.setState({\r\n                            monitoring_grid: response.data\r\n                        })\r\n                        this.hideLoading();\r\n                    })\r\n        }\r\n        else{\r\n            //show appropriate message\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred. Please check the network.\"\r\n            })\r\n            this.hideLoading();\r\n        }\r\n  }\r\n\r\n  async setUpAssignedAgentsIfAny(monitoring_grid){\r\n      var assigned_agents = persistence.getAssignedAgents();\r\n\r\n      if(assigned_agents && assigned_agents.length > 0){\r\n            var result = await this.utils.reconcileAssignedAgentsListWithMonitoringGrid(this.browserAdmin._id, assigned_agents, monitoring_grid);\r\n    \r\n            //result[0] //assigned agents list\r\n            //result[1] //laser agents\r\n    \r\n            if(result[0].length > 0){\r\n                persistence.saveAssignedAgents(result[0]);\r\n\r\n                //we subscribe to the id of each agent\r\n                var list = this.state.channels_list.concat(result[0]);\r\n                \r\n                this.pubnub.subscribe({\r\n                    channels: list\r\n                })\r\n\r\n                this.setState({\r\n                    laser_agents: result[1],\r\n                    channels_list: list\r\n                })\r\n            }\r\n            else{\r\n                persistence.deleteAssignedAgents();\r\n\r\n                this.setState({\r\n                    laser_agents: result[1]\r\n                })\r\n            }\r\n      }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n      this.pubnub.unsubscribe({\r\n          channels: this.state.channels_list\r\n      });\r\n  }\r\n\r\n  async componentDidMount(){\r\n\r\n    //subscribe to the parent channel to receive location updates from agents\r\n    this.pubnub.subscribe({\r\n        channels: this.state.channels_list\r\n    })\r\n\r\n    this.setState({\r\n        laser_agents: []\r\n    })\r\n\r\n    this.getMonitoringGridFromServerAndReconcileAssignedAgents();\r\n\r\n    var responses = persistence.getCompletedEmergenciesResponse();\r\n\r\n    if(responses && responses.length > 0){\r\n        this.setState({\r\n            route_responses_from_agents: responses\r\n        })\r\n    }\r\n    \r\n\r\n\r\n    this.pubnub.addListener({\r\n      status: (st) => {\r\n            if(st.category === \"PNNetworkUpCategory\"){\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"You are back online.\"\r\n                })\r\n                this.getMonitoringGridFromServerAndReconcileAssignedAgents();\r\n            }\r\n\r\n            if(st.category === \"PNConnectedCategory\"){\r\n                //intentionally left blank\r\n            }\r\n\r\n            if (st.category === \"PNReconnectedCategory\") {\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"You are back online.\"\r\n                })\r\n                this.getMonitoringGridFromServerAndReconcileAssignedAgents();\r\n            }\r\n\r\n            if (st.category === \"PNNetworkIssuesCategory\") {\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"It appears there is a network issue.\"\r\n                })\r\n            }\r\n\r\n            if (st.category === \"PNNetworkDownCategory\") {\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"It appears the network is down.\"\r\n                })\r\n            }\r\n\r\n            if (st.category === \"PNTimeoutCategory\") {\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"Could not connect to the internet.\"\r\n                })\r\n            }\r\n      },\r\n      message: (message) => {\r\n\r\n          /*var tracked_user_id = this.state.tracked_users.find(id => id === message.channel);\r\n\r\n          if(tracked_user_id){\r\n                //the message is from a user currently being monitored\r\n                if(message.userMetadata && message.userMetadata.action === \"user_location_update\"){\r\n                    var arr = this.state.emergencies.map(emergency => {\r\n                        if(emergency.user === tracked_user_id){\r\n                            emergency.latitude = message.message.latitude;\r\n                            emergency.longitude = message.message.longitude;\r\n                            return emergency;\r\n                        }\r\n                        else{\r\n                            return emergency;\r\n                        }\r\n                    })\r\n\r\n                    //var found_emergency = state.emergencies.find(emergency => emergency.user === state.tracked_user_id);\r\n\r\n                    this.setState(state => {\r\n                        return{\r\n                            emergencies: arr\r\n                        }\r\n                    })\r\n                }\r\n          }*/\r\n\r\n          this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, this.state.monitoring_grid)\r\n                        .then(emergency_full_row => {\r\n                            var emergency_monitored = emergency_full_row.emergency;\r\n\r\n                            if(message.channel === emergency_monitored._id ){\r\n                                if(message.userMetadata && message.userMetadata.action === \"user_location_update\"){\r\n                                    \r\n                                    var arr = this.state.emergencies.map(emergency => {\r\n                                        if(emergency.user === emergency_monitored.user){\r\n                                            emergency.latitude = message.message.latitude;\r\n                                            emergency.longitude = message.message.longitude;\r\n                                            return emergency;\r\n                                        }\r\n                                        else{\r\n                                            return emergency;\r\n                                        }\r\n                                    })\r\n                \r\n                                    //var found_emergency = state.emergencies.find(emergency => emergency.user === state.tracked_user_id);\r\n                \r\n                                    this.setState(state => {\r\n                                        return{\r\n                                            emergencies: arr\r\n                                        }\r\n                                    })\r\n                                }\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n\r\n                        })\r\n          \r\n          //if(message.channel === this.state.tracked_area ){\r\n            \r\n              if(message.userMetadata && message.userMetadata.action === \"agent_location_update\"){\r\n                  try{\r\n                    console.log(message.message.agent)\r\n                  }\r\n                  catch(err){\r\n\r\n                  }\r\n                  this.utils.updateAgentLocation(message.message, this.state.laser_agents, this.state.monitoring_grid, this.browserAdmin._id)\r\n                            .then(sorted_agents => {\r\n                                \r\n                                this.setState(state => {\r\n                                    return {\r\n                                        laser_agents: sorted_agents\r\n                                    }\r\n                                })\r\n                            }) \r\n                            .catch(err => {\r\n                                console.log(err)\r\n                            })\r\n              }\r\n          //}\r\n\r\n          //we check the response of an agent that has been assigned, whether the agent sent a message to decilne\r\n          if(message.userMetadata && message.userMetadata.action === \"route_request_response\"){\r\n                //we check which agent is responding to the emergency request\r\n                var emergency_agent = message.message;\r\n\r\n                if(message.channel === emergency_agent._id ){\r\n                    this.showLoading();\r\n\r\n                    var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                    //we get the agent full profile from the persisted listof assigned agents\r\n                    this.utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, emergency_agent._id)\r\n                                .then(agent_found =>{\r\n                                    //we proceed to remove the agent from the emergency and update the monitoring grid and all other parts of the system\r\n                                    this.removeAgentFromEmergencyAfterDecliningRequest(agent_found);\r\n                                })\r\n                                .catch(err => {\r\n                                    this.hideLoading();\r\n                                    this.setState({\r\n                                        action: \"message\",\r\n                                        action_message: \"Agent \" +emergency_agent.firstname +\" declined to attend to emergency but an error occurred updating the system. Please manually remove the agent from emergency\"\r\n                                    })\r\n                                })\r\n                }\r\n          }\r\n\r\n          if(message.userMetadata && message.userMetadata.action === \"route_completed\"){\r\n                //show message that agent has completed route\r\n\r\n                var responses = persistence.getCompletedEmergenciesResponse();\r\n\r\n                this.utils.getAdminEmergencyMonitored(this.browserAdmin._id, this.state.monitoring_grid)\r\n                        .then(emergency_monitored => {\r\n\r\n                            var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                            //we get the agent full profile from the persisted listof assigned agents\r\n                            this.utils.getAgentFromAssignedAgentsInPersistence(assigned_agents, message.message._id)\r\n                                        .then(agent_found =>{\r\n                                            if(responses && responses.length > 0){\r\n                                                responses.push({agent:agent_found, user: emergency_monitored.emergency});\r\n                                            }\r\n                                            else{\r\n                                                responses = [{agent:agent_found, user: emergency_monitored.emergency}];\r\n                                            }\r\n                            \r\n                                            persistence.saveCompletedEmergenciesResponse(responses);\r\n                            \r\n                                            this.setState({\r\n                                                route_responses_from_agents: responses\r\n                                            })\r\n                                        })\r\n                                        .catch(err => {\r\n                                            \r\n                                        })\r\n\r\n                        })\r\n                        .catch(err => {\r\n                            \r\n                        })\r\n          } \r\n          \r\n      }\r\n    });\r\n\r\n    const socket = socketIOClient(socket_io_url, {\r\n        //withCredentials: true\r\n    });\r\n\r\n    socket.on(\"connect\", \r\n      () => console.log(\"connected to socket io\")\r\n    );\r\n\r\n    socket.on(\"reconnect\", attempt => {\r\n        console.log(\"Socket IO Reconnected\")\r\n        //successfully reconnected\r\n        //get the lastest data\r\n    })\r\n\r\n    //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\r\n    socket.on(\"emergency\", \r\n      data => {\r\n         if(data){\r\n             this.setState(state => {\r\n                let arr = state.emergencies;\r\n                let lat = state.latest;\r\n                \r\n                lat.push(data);\r\n                arr.push(data)\r\n\r\n                return {\r\n                    play_sound: true,\r\n                    latest: lat,\r\n                    clicked_marker_id: data._id,\r\n                    zoom: 18,\r\n                    emergencies: arr,\r\n                    center: {\r\n                        lat: data.latitude,\r\n                        lng: data.longitude\r\n                    }\r\n                }\r\n            })\r\n         }\r\n      }\r\n    );\r\n\r\n    socket.on(\"call\", \r\n      data => {\r\n        if(data){\r\n            this.setState(state => {\r\n              let arr = state.locations;\r\n              let lat = state.latest;\r\n              \r\n              lat.push(data);\r\n              arr.push(data)\r\n\r\n              return {\r\n                  play_sound: true,\r\n                  latest: lat,\r\n                  clicked_marker_id: data._id,\r\n                  zoom: 18,\r\n                  locations: arr,\r\n                  center: {\r\n                    lat: data.latitude,\r\n                    lng: data.longitude\r\n                 }\r\n              }\r\n          })\r\n        }\r\n      }\r\n    );\r\n\r\n    socket.on(\"monitoring_update\", (id) => {\r\n        if(id !== this.browserAdmin._id){\r\n            //pull the monitoring grid and re-evaluate variables\r\n            //show loading UI\r\n            this.showLoading();\r\n\r\n            var monitoring_grid = [];\r\n\r\n            API.getMonitoringGrid()\r\n                .then(response => {\r\n                    monitoring_grid = response.data;\r\n\r\n                    this.utils.reconcileAllAgentsWithMonitoringGrid(this.state.laser_agents, response.data, this.browserAdmin._id)\r\n                            .then(lasers => {\r\n                                this.setState({\r\n                                    monitoring_grid: monitoring_grid,\r\n                                    laser_agents: lasers      \r\n                                })\r\n\r\n                                this.hideLoading();\r\n                            })\r\n                            .catch(err => {\r\n                                this.setState({\r\n                                    monitoring_grid: monitoring_grid         \r\n                                })\r\n\r\n                                this.hideLoading();\r\n                            })\r\n                })\r\n                .catch(err => {\r\n                    this.setState({\r\n                        monitoring_grid: monitoring_grid         \r\n                    })\r\n\r\n                    this.hideLoading();\r\n                })\r\n        }\r\n    });\r\n\r\n    this.getLocations();\r\n    this.getEmergencies();\r\n  }\r\n\r\n  async removeAgentFromEmergencyAfterDecliningRequest(agent){\r\n        this.showLoading();\r\n\r\n        const result = await this.utils.removeAgentFromBrowserAdminMonitoringGrid(agent, this.browserAdmin._id, this.state.monitoring_grid, this.state.laser_agents);\r\n        \r\n        if(result){\r\n            //result[0] //monitoring_grid\r\n            //result[1] //laser agents\r\n\r\n            const save_result = await API.saveMonitoringGrid(result[0]);\r\n\r\n            if(save_result){\r\n                if(save_result.data===\"successful\"){\r\n                    //persist agents incase the user reloads the page or closes the browser\r\n                    var assigned_agents = persistence.getAssignedAgents();\r\n\r\n                    var new_assigned_agents = this.utils.removeAgentFromListOfAssignedAgentsForPersistsnce(agent, assigned_agents)\r\n                    \r\n                    if(new_assigned_agents.length > 0){\r\n                        persistence.saveAssignedAgents(new_assigned_agents);\r\n                    }\r\n                    else{\r\n                        persistence.deleteAssignedAgents();\r\n                    }\r\n\r\n                    //unsubscribe from agents channel\r\n                    this.pubnub.unsubscribe({\r\n                        channels: [agent.agent._id]\r\n                    })\r\n\r\n                    //we set state and update the monitoring grid and the laser agents list\r\n                    this.setState({\r\n                        action: \"message\",\r\n                        action_message: \"Agent \" +agent.agent.firstname +\" declined the request to attend to the emergency\",\r\n                        monitoring_grid: result[0],\r\n                        laser_agents: result[1],\r\n                        agent_side_bar_open: false,\r\n                        clicked_agent: {},\r\n                    })\r\n\r\n                    this.hideLoading();\r\n                }\r\n\r\n                if(save_result.data === \"unsuccessful\"){\r\n                    this.hideLoading();\r\n                    this.setState({\r\n                        action: \"message\",\r\n                        action_message: \"An error occurred removing the agent from the emergency\"\r\n                    })\r\n                }\r\n            }\r\n            else{\r\n                this.hideLoading();\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"An error occurred removing the agent from the emergency\"\r\n                })\r\n            }\r\n\r\n        }\r\n        else{\r\n            this.hideLoading();\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred removing the agent from the emergency\"\r\n            })\r\n        }\r\n  }\r\n\r\n\r\n  async getLocationsDate(date){\r\n        const response = await API.getLocations({date})\r\n        \r\n        if(response==\"error\"){\r\n            this.setState({\r\n                action: \"err_calls_load\",\r\n                locations: [],\r\n                filtered_locations: []\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.locations){\r\n            if(this.state.action === \"loading\"){\r\n                this.setState({\r\n                    action: \"close\",\r\n                    locations: response.data.locations,\r\n                    filtered_locations: response.data.locations\r\n                })\r\n            }\r\n            else{\r\n                this.setState({\r\n                    locations: response.data.locations,\r\n                    filtered_locations: response.data.locations\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\",\r\n                locations: [],\r\n                filtered_locations: []\r\n            })\r\n        }\r\n  }\r\n\r\n  async getEmergenciesDate(date){\r\n        const response = await API.getEmergencies({date})\r\n        \r\n        if(response==\"error\"){\r\n            this.setState({\r\n                action: \"err_emergency_load\",\r\n                emergencies: [],\r\n                filtered_emergencies: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.emergencies){\r\n            if(this.state.action === \"loading\"){\r\n                this.setState({\r\n                    action: \"close\",\r\n                    emergencies: response.data.emergencies,\r\n                    filtered_emergencies: response.data.emergencies\r\n                })\r\n            }\r\n            else{\r\n                this.setState({\r\n                    emergencies: response.data.emergencies,\r\n                    filtered_emergencies: response.data.emergencies\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\",\r\n                emergencies: [],\r\n                filtered_emergencies: []\r\n            })\r\n        }\r\n  }\r\n\r\n  async getLatestLocations(){\r\n        var self = this;\r\n        const response = await API.getLocations({date: today})\r\n\r\n        if(response==\"error\"){\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.locations&&response.data.locations.length>0){\r\n            self.setState(state => {\r\n                var loc = state.latest;\r\n\r\n                for(var i = 0; i<response.data.locations.length; i++){\r\n                    loc.push(response.data.locations[i]);\r\n                }\r\n\r\n                loc = utils.sortDates(loc);\r\n\r\n                return {\r\n                    latest : loc\r\n                }\r\n                \r\n            })\r\n        }\r\n  }\r\n\r\n  async getLatestEmergencies(){\r\n        var self = this;\r\n        const response = await API.getEmergencies({date: today})\r\n\r\n        if(response==\"error\"){\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.emergencies&&response.data.emergencies.length>0){\r\n            self.setState(state => {\r\n                var loc = state.latest;\r\n\r\n                for(var i = 0; i<response.data.emergencies.length; i++){\r\n                    loc.push(response.data.emergencies[i]);\r\n                }\r\n\r\n                loc = utils.sortDates(loc);\r\n\r\n                return {\r\n                    latest : loc\r\n                }\r\n            })\r\n        }\r\n  }\r\n\r\n  async getEmergencies(){\r\n        const response = await API.getEmergencies({date: today})\r\n\r\n        if(response==\"error\"){\r\n            //show error message\r\n            this.setState({\r\n                action: \"err_emergency_load\",\r\n                emergencies: [],\r\n                filtered_emergencies: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.emergencies&&response.data.emergencies.length>0){\r\n            this.setState(state => {\r\n            var loc = state.latest;\r\n\r\n            for(var i = 0; i<response.data.emergencies.length; i++){\r\n                loc.push(response.data.emergencies[i]);\r\n            }\r\n\r\n            loc = utils.sortDates(loc);\r\n\r\n            if(this.state.action === \"loading\"){\r\n                return {\r\n                    action: \"close\",\r\n                    latest : loc,\r\n                    emergencies: response.data.emergencies,\r\n                    filtered_emergencies: response.data.emergencies\r\n                }\r\n            }\r\n            else{\r\n                return {\r\n                    latest : loc,\r\n                    emergencies: response.data.emergencies,\r\n                    filtered_emergencies: response.data.emergencies\r\n                }\r\n            }\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\",\r\n                emergencies: [],\r\n                filtered_emergencies: []\r\n            })\r\n        }\r\n  }\r\n\r\n  async getLocations(){\r\n\r\n        const response = await API.getLocations({date: today})\r\n\r\n        if(response==\"error\"){\r\n            //show error message\r\n            this.setState({\r\n                action: \"err_calls_load\",\r\n                locations: [],\r\n                filtered_locations: []\r\n            })\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data&&response.data.locations&&response.data.locations.length>0){\r\n            this.setState(state => {\r\n                var loc = state.latest;\r\n\r\n                for(var i = 0; i<response.data.locations.length; i++){\r\n                    loc.push(response.data.locations[i]);\r\n                }\r\n\r\n                loc = utils.sortDates(loc);\r\n\r\n                if(this.state.action === \"loading\"){\r\n                    return {\r\n                        action: \"close\",\r\n                        latest : loc,\r\n                        locations: response.data.locations,\r\n                        filtered_locations: response.data.locations\r\n                    }\r\n                }\r\n                else{\r\n                    return {\r\n                        latest : loc,\r\n                        locations: response.data.locations,\r\n                        filtered_locations: response.data.locations\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\",\r\n                locations: [],\r\n                filtered_locations: []\r\n            })\r\n        }\r\n  }\r\n\r\n  handleSongFinishedPlaying(){\r\n      this.setState({\r\n          play_sound: false\r\n      })\r\n  }\r\n\r\n  onFieldChanged(event){\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n        [name]: value\r\n    });\r\n  }\r\n\r\n  onManualCallChanged(event){\r\n    const target = event.target;\r\n    const value = target.value;\r\n\r\n    this.setState({\r\n        selected_manual_call: value\r\n    })\r\n  }\r\n\r\n  onManualGenderChanged(event){\r\n    const target = event.target;\r\n    const value = target.value;\r\n\r\n    this.setState({\r\n        selected_manual_gender: value\r\n    })\r\n  }\r\n\r\n  onSubmitManualCallDetails(e){\r\n      e.preventDefault();\r\n\r\n      if(this.state.selected_manual_call.length <= 0){\r\n          this.setState({\r\n              action: \"message\",\r\n              action_message: \"Please enter a valid reason for call from the drop down\"\r\n          });\r\n          return;\r\n      }\r\n\r\n      if(this.state.manual_phone.lenght <= 0){\r\n          this.setState({\r\n               action: \"message\",\r\n               action_message: \"Please enter a valid phone number\"\r\n          });\r\n          return;\r\n      }\r\n\r\n      if(this.state.selected_manual_gender.length <= 0){\r\n          this.setState({\r\n              action: \"message\",\r\n              action_message: \"Please enter a valid gender\"\r\n          });\r\n          return;\r\n      }\r\n\r\n      if(this.state.manual_name.length <= 0){\r\n          this.setState({\r\n              action: \"message\",\r\n              action_message: \"Please enter a valid name\"\r\n          });\r\n          return;\r\n      }\r\n\r\n      if(this.state.manual_address.length <= 0){\r\n          this.setState({\r\n              action: \"message\",\r\n              action_message: \"Please enter an address\"\r\n          });\r\n          return;\r\n      }\r\n\r\n      //show loading\r\n      //translate address to longitude and latitude\r\n      this.setState({\r\n            action: \"loading\",\r\n            action_message: \"\"\r\n      });\r\n\r\n      Geocode.fromAddress(this.state.manual_address).then(\r\n            response => {\r\n            const { lat, lng } = response.results[0].geometry.location;\r\n\r\n            var location = {\r\n                action: this.state.selected_manual_call,\r\n                longitude: lng,\r\n                latitude: lat,\r\n                full_address: this.state.manual_address,\r\n                full_name: this.state.manual_name,\r\n                phone_number: this.state.manual_phone\r\n            }\r\n\r\n            this.saveManualLocation(location);\r\n\r\n            },\r\n            error => {\r\n            console.error(error);\r\n\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"We could not find that address\",\r\n                showConfirmManualLocation: true\r\n            });\r\n            }\r\n      );\r\n  }\r\n\r\n  showConfirmManualLocation(){\r\n      this.setState({\r\n          showConfirmManualLocation: true\r\n      })\r\n  }\r\n\r\n  hideConfirmManualLocation(){\r\n    this.setState({\r\n        showConfirmManualLocation: false\r\n    })\r\n  }\r\n\r\n  tryAgainClicked(){\r\n      this.hideConfirmManualLocation();\r\n\r\n      this.setState({\r\n        action: \"loading\",\r\n        action_message: \"\"\r\n      });\r\n\r\n      Geocode.fromAddress(this.state.manual_address).then(\r\n        response => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n\r\n          var location = {\r\n                action: this.state.selected_manual_call,\r\n                longitude: lng,\r\n                latitude: lat,\r\n                full_address: this.state.manual_address,\r\n                full_name: this.state.manual_name,\r\n                phone_number: this.state.manual_phone\r\n          }\r\n\r\n          this.saveManualLocation(location);\r\n        },\r\n        error => {\r\n          console.error(error);\r\n\r\n          this.setState({\r\n            action: \"message\",\r\n            action_message: \"We could not find that address\"\r\n          });\r\n        }\r\n      );\r\n  }\r\n  \r\n  continueConfirmAddressNotFoundClicked(){\r\n        this.hideConfirmManualLocation();\r\n        /*\r\n\r\n        this.setState({\r\n            action: \"loading\",\r\n            action_message: \"\"\r\n        });\r\n\r\n        var location = {\r\n            action: this.state.selected_manual_call,\r\n            longitude: lng,\r\n            latitude: lat,\r\n            full_address: this.state.manual_address,\r\n            full_name: this.state.manual_name,\r\n            phone_number: this.state.manual_phone\r\n        }\r\n\r\n        this.saveManualLocation(location);*/\r\n  }\r\n\r\n  closeConfirmAddressNotFoundClicked(){\r\n    this.setState({\r\n        action: \"message\",\r\n        action_message: \"\"\r\n    });\r\n    this.hideConfirmManualLocation();\r\n  }\r\n\r\n  async saveManualLocation(location){\r\n        const response = await API.createManualLocation(location)\r\n        \r\n        if(response==\"error\"){\r\n            //show error message\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred saving the location. Please try again\"\r\n            })\r\n\r\n            return;\r\n        }\r\n        \r\n        if(response&&response.data){\r\n            if(response.data.response===\"out_of_lagos\"){\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"That location is outside Lagos State\"\r\n                })\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"The location has been saved and is displayed on the map\",\r\n                selected_manual_call:\"Emergency Management(LASEMA)\",\r\n                selected_manual_gender:\"Male\",\r\n                manual_name: \"\",\r\n                manual_phone: \"\",\r\n                manual_address: \"\",\r\n                manual_location_side_bar: false\r\n            })\r\n\r\n            /*this.setState(state => {\r\n                let arr = state.locations;\r\n                let lat = state.latest;\r\n                \r\n                lat.push(response.data.response);\r\n                arr.push(response.data.response)\r\n\r\n                return {\r\n                    play_sound: true,\r\n                    latest: lat,\r\n                    clicked_marker_id: response.data.response._id,\r\n                    zoom: 18,\r\n                    locations: arr,\r\n                    center: {\r\n                        lat: response.data.response.latitude,\r\n                        lng: response.data.response.longitude\r\n                    }\r\n                }\r\n            })*/\r\n        }\r\n  }\r\n\r\n  render(){\r\n    let sound;\r\n\r\n    if(this.state.play_sound){\r\n       sound = <Sound\r\n       url={alert}\r\n       playStatus={Sound.status.PLAYING}\r\n       playFromPosition={1 /* in milliseconds */}\r\n       onLoading={this.handleSongLoading}\r\n       onPlaying={this.handleSongPlaying}\r\n       onFinishedPlaying={this.handleSongFinishedPlaying}/>;\r\n    }\r\n    else{\r\n      sound = \"\";\r\n    }\r\n\r\n    let show_location_side_bar;\r\n    \r\n    if(this.state.location_side_bar_open){\r\n      show_location_side_bar = <LocationSidebar closeSidebar={this.closeSideBar} startMonitoring={this.startMonitoring} location={this.state.clicked_user} resolve={this.showConfirmResolveLocation} />\r\n    }\r\n    else{\r\n      show_location_side_bar = \"\";\r\n    }\r\n\r\n    let show_side_bar;\r\n    \r\n    if(this.state.side_bar_open){\r\n      show_side_bar = <Sidebar closeSidebar={this.closeSideBar} emergency={this.state.clicked_user} startMonitoring={this.startMonitoring} resolve={this.showConfirmResolveEmergency} />\r\n    }\r\n    else{\r\n      show_side_bar = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"laser-parent-div\" style={mapStyle}>\r\n            <Latest latest={this.state.latest} latestClicked={this.latestClicked}/>\r\n            {show_location_side_bar}\r\n            {show_side_bar}\r\n            {this.state.showConfirmManualLocation ? <ConfirmAddressNotFound closeConfirmAddressNotFoundClicked={this.continueConfirmAddressNotFoundClicked} tryAgainClicked={this.continueConfirmAddressNotFoundClicked} hideConfirmManualLocation={this.hideConfirmManualLocation} /> : \"\"}\r\n            {this.state.manual_location_side_bar ? <AddCallManually onFieldChanged={this.onFieldChanged} closeSidebar={this.closeSideBar} selected_manual_call={this.state.selected_manual_call} selected_manual_gender={this.state.selected_manual_gender} manual_address={this.state.manual_address} manual_name={this.state.manual_name} onManualCallChanged={this.onManualCallChanged} onManualGenderChanged={this.onManualGenderChanged}  onSubmitManualCallDetails={this.onSubmitManualCallDetails}/> : \"\" }\r\n            \r\n            { \r\n                this.state.agent_side_bar_open ? <AgentDetails removeAgentFromRoute={this.removeAgentFromRoute} closeAgentSideBar={this.closeAgentSideBar} addAgentToMonitoring={this.addAgentToMonitoring} agent={this.state.clicked_agent} user={this.state.clicked_user}/> : \"\" \r\n            }\r\n\r\n            <TopPanel showMonitoredEmergency={this.showMonitoredEmergency} openManualLocation={this.openManualLocation} logout={this.logout} onCalendarOpen={this.onCalendarOpen} onDateChange={this.onDateChange} date={this.state.date} selected_call={this.state.selected_call} \r\n            onCallsChanged={this.onCallsChanged} selected_emergency={this.state.selected_emergency} onEmergenciesChanged={this.onEmergenciesChanged} getAgentsAroundEmergency={this.getAgentsAroundEmergency}/>\r\n\r\n            <Map google={this.props.google} \r\n                style={mapStyle}\r\n                onReady={this.fetchPlaces}\r\n                initialCenter={this.state.center}\r\n                center={this.state.center}\r\n                zoom={this.state.zoom}>\r\n        \r\n                {this.getLocationsMarkers()}\r\n                {this.getEmergenciesMarkers()}\r\n                {this.getAgentMarkers()}\r\n\r\n            </Map>\r\n            \r\n            <Loader isLoading={this.state.isLoading}/>\r\n\r\n            <Action action={this.state.action} closeAction={this.closeAction} message={this.state.action_message}/>\r\n\r\n            <Loader isLoading={this.state.isLoading}/>\r\n\r\n            {sound}\r\n\r\n            {\r\n                this.state.route_responses_from_agents.length > 0 ?  <RouteStatus route_response={this.state.route_responses_from_agents[this.state.route_responses_from_agents.length - 1]} removeAgentFromRouteAndCloseRouteResponse={this.removeAgentFromRouteAndCloseRouteResponse} closeRouteResponse={this.closeRouteResponse} /> : \"\"\r\n            }\r\n\r\n            {\r\n                this.state.showConfirm.status===true ? <ConfirmAction  yesClicked={this.state.showConfirm.action===\"emergency\" ? this.resolveEmergency : this.resolveCall} noClicked={this.hideConfirm} message={this.state.message} /> : \"\"\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: ('AIzaSyADNxHcgsHDyx_OSbqxBg5xB5lV2YJDcKI')\r\n})(App)\r\n","import React, {Component} from \"react\";\r\n\r\nimport Utils from '../../utils/Utils';\r\n\r\nconst utils = new Utils();\r\n\r\nconst space = {\r\n    marginLeft: \"8px\"\r\n}\r\n\r\nexport default function Agent(props){\r\n    return  <div className=\"col-md-4 col-sm-4\">\r\n                <div className=\"laser-item shadow\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-7 col-sm-7\">\r\n                            <h4>{props.agent.firstname} {props.agent.lastname}</h4>\r\n                            <h5>{utils.getDate(props.agent.created)}</h5>\r\n                        </div>\r\n                        <div className=\"col-md-5 col-sm-5\">\r\n                            <h5>{props.agent.phone_number}</h5>\r\n                            <h4>{props.agent.department} department</h4>\r\n                        </div>\r\n                        <div className=\"col-md-offset-6 col-md-6 col-sm-offset-6 col-sm-6\">\r\n                            <button onClick={e => props.deleteClicked(e,props.agent)} className=\"laserbtn laser-red-bg laser-inline\">delete</button>\r\n                            <button style={space} onClick={e => props.editClicked(e,props.agent)} className=\"laserbtn laser-blue-bg laser-inline\">edit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n} ","import React, {Component} from \"react\";\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nimport Loader from '../../components/Loader';\r\nimport Action from '../Action';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nconst controls_style = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class Agents extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            phone_number: \"\",\r\n            department: \"\",\r\n            password: \"\",\r\n            password_again: \"\",\r\n            error: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.submitClicked = this.submitClicked.bind(this);\r\n        this.onFieldChanged = this.onFieldChanged.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async submitClicked(e){\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            error: \"\"\r\n        })\r\n\r\n        if(this.state.firstname.length<=0 || this.state.lastname.length<=0){\r\n            this.setState({\r\n                error: \"Please enter a valid first and last name\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.phone_number.length < 11){\r\n            this.setState({\r\n                error: \"Please enter a valid phone number\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.department.length < 0){\r\n            this.setState({\r\n                error: \"Please enter a valid department\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password.length < 8 || this.state.password_again.length < 8){\r\n            this.setState({\r\n                error: \"Please enter a valid password with 8 characters or more\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password !== this.state.password_again){\r\n            this.setState({\r\n                error: \"Passwords dont match\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n        \r\n        const data = {\r\n            firstname: this.state.firstname,\r\n            lastname: this.state.lastname,\r\n            phone_number: this.state.phone_number,\r\n            department: this.state.department,\r\n            password: this.state.password,\r\n            password_again: this.state.password_again\r\n        }\r\n\r\n        this.showLoading();\r\n\r\n        const response = await API.createAgent(data)\r\n        \r\n        if(response==\"error\"){\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred creating agent, Please try again later\"\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data){\r\n            this.hideLoading()\r\n            this.props.closeModalGetAgents();\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\"\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.departments.length > 0){\r\n            this.setState(state => {\r\n                return { \r\n                    department: this.props.departments[0]\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onFieldChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"Modal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Add Agent</h4>\r\n                    <br/>\r\n                    <h5 className=\"laser-red-text\">{ this.state.error ? this.state.error : \"\" }</h5>\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>First Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"firstname\" type=\"text\" name=\"firstname\" onChange={this.onFieldChanged} value={this.state.firstname} className=\"form-control bt-login-input\" placeholder=\"First Name\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>Last Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"lastname\" type=\"text\" name=\"lastname\" onChange={this.onFieldChanged} value={this.state.lastname} className=\"form-control bt-login-input\" placeholder=\"Last Name\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Phone Number</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"phone_number\" type=\"phone\" name=\"phone_number\" onChange={this.onFieldChanged} value={this.state.phone_number} className=\"form-control bt-login-input\" placeholder=\"Phone Number\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Department</h5></label>\r\n                            <select style={controls_style} className=\"form-control\" id=\"department\" name=\"department\" value={this.state.department} onChange={this.onFieldChanged}>\r\n                                {\r\n                                    this.props.departments.map(dep => {\r\n                                        return <option>{dep}</option>\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password\" type=\"password\" name=\"password\" onChange={this.onFieldChanged} value={this.state.password} className=\"form-control bt-login-input\" placeholder=\"Password\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password Again</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password_again\" type=\"password\" name=\"password_again\" onChange={this.onFieldChanged} value={this.state.password_again} className=\"form-control bt-login-input\" placeholder=\"Password Again\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-blue-bg laserbtn\" style={btn_style_left} onClick={e => this.submitClicked(e)}>create</button>\r\n                    <button className=\"laser-inline grey-bg laserbtn laser-black-text\" style={btn_style_right} onClick={this.props.closeModal}>cancel</button>\r\n\r\n                </ReactModal>\r\n\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport Agent from \"./Agent\"\r\nimport { Link } from 'react-router-dom'\r\nimport AddAgent from \"./AddAgent\"\r\nimport EditAgent from \"./EditAgent\"\r\nimport ConfirmAction from '../ConfirmAction';\r\nimport Loader from '../../components/Loader';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nconst controls_style = {\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class Agents extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            agents: [],\r\n            departments: [],\r\n            agents_filter: [],\r\n            selected_department: \"\",\r\n            selected_agent: {},\r\n            showConfirm: false,\r\n            showAddAgent: false,\r\n            showDeleteAgent: false,\r\n            showEditAgent: false,\r\n            confirmMessage: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.getAgents = this.getAgents.bind(this);\r\n        this.getAgentsDepartment = this.getAgentsDepartment.bind(this);\r\n        this.getDepartments = this.getDepartments.bind(this);\r\n        this.deleteAgent = this.deleteAgent.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.closeModalGetAgents = this.closeModalGetAgents.bind(this);\r\n        this.showDeleteAgent = this.showDeleteAgent.bind(this);\r\n        this.showAddAgent = this.showAddAgent.bind(this);\r\n        this.showEditAgent = this.showEditAgent.bind(this);\r\n        this.onDepartmentChanged = this.onDepartmentChanged.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async getAgents(){\r\n        this.showLoading();\r\n\r\n        const response = await(API.getAgents());\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data && response.data.length > 0){\r\n            this.setState({\r\n                agents: response.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async getAgentsDepartment(filter){\r\n        this.showLoading();\r\n\r\n        const response = await(API.getAgentsDepartment(filter));\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data && response.data.length > 0){\r\n            this.setState({\r\n                agents: response.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async getDepartments(){\r\n        this.showLoading();\r\n\r\n        const response = await(API.getDepartments());\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data && response.data.length > 0){\r\n            this.setState(state => {\r\n                var deps = [\"All\"];\r\n\r\n                response.data.map(dep => {\r\n                    deps.push(dep.name);\r\n                })\r\n                \r\n                return {\r\n                    departments: deps\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    async deleteAgent(agent){\r\n        this.showLoading();\r\n        \r\n        const response = await(API.deleteAgent(this.state.selected_agent._id));\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data){\r\n            this.closeModal();\r\n            this.setState(state => {\r\n                var agents = state.agents;\r\n\r\n                agents.splice(agents.indexOf(state.selected_agent),1);\r\n\r\n                return {\r\n                    agents: agents,\r\n                    selected_agent: {}\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            showConfirm: false,\r\n            showAddAgent: false,\r\n            showDeleteAgent: false,\r\n            showEditAgent: false\r\n        })\r\n    }\r\n\r\n    closeModalGetAgents(){\r\n        this.setState({\r\n            showConfirm: false,\r\n            showAddAgent: false,\r\n            showDeleteAgent: false,\r\n            showEditAgent: false\r\n        });\r\n        \r\n        this.getAgents();\r\n    }\r\n\r\n    showDeleteAgent(e,agent){\r\n        e.preventDefault();\r\n        this.setState({\r\n            selected_agent: agent,\r\n            showDeleteAgent: true,\r\n            confirmMessage: \"Are you sure you want to delete agent \" +agent.firstname +\"'s profile? This cant be undone.\"\r\n        })\r\n    }\r\n\r\n    showAddAgent(){\r\n        this.setState({\r\n            showAddAgent:  true\r\n        })\r\n    }\r\n\r\n    showEditAgent(e,agent){\r\n        e.preventDefault();\r\n        this.setState({\r\n            showEditAgent:  true,\r\n            selected_agent: agent\r\n        })\r\n    }\r\n\r\n    onDepartmentChanged(event){\r\n        const target = event.target;\r\n        const value = target.value;\r\n\r\n        this.setState({\r\n            selected_department: value\r\n        })\r\n\r\n        if(value===\"All\"){\r\n            this.getAgents();\r\n        }\r\n        else{\r\n            this.getAgentsDepartment(value);\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAgents();\r\n        this.getDepartments();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"laser-parent-div\">\r\n                <div className=\"laser-top-panel\">\r\n                    <h4 className=\"laser-inline\">Laser Emergency Admin - Agents</h4>\r\n                    <div className=\"laser-controls\">\r\n                        <Link style={controls_style} to={'/'} className=\"nav-link white-text link laser-inline laser-150-width\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">View Map</button>\r\n                        </Link>\r\n\r\n                        <select style={controls_style} className=\"form-control laser-inline laser-150-width\" id=\"filter\" name=\"filter\" value={this.state.selected_department} onChange={this.onDepartmentChanged}>\r\n                            {\r\n                                this.state.departments.map(dep => {\r\n                                    return <option>{dep}</option>\r\n                                })\r\n                            }\r\n                        </select>\r\n                        <button onClick={this.showAddAgent} style={controls_style} className=\"laser-inline laser-100-width laserbtn laser-white_border-blue-bg\">Add Agent</button>\r\n                        <Link style={controls_style} to={'/admins'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Admins</button>\r\n                        </Link>\r\n                        <Link style={controls_style} to={'/departments'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Departments</button>\r\n                        </Link>\r\n                        <button onClick={e => this.props.logout(e)} className=\"form-control laser-inline laser-100-width laser-grey-bg laserbtn pull-right\">logout</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        {\r\n                            this.state.agents.map(agent => {\r\n                                return <Agent agent={agent} key={agent._id} deleteClicked={this.showDeleteAgent} editClicked={this.showEditAgent}/>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <Loader isLoading={this.state.isLoading}/>\r\n                {\r\n                    this.state.showAddAgent ? <AddAgent closeModal={this.closeModal} departments={this.state.departments} closeModalGetAgents={this.closeModalGetAgents} /> : \"\"\r\n                }\r\n                {\r\n                    this.state.showDeleteAgent ? <ConfirmAction  yesClicked={this.deleteAgent} noClicked={this.closeModal} message={this.state.confirmMessage} /> : \"\"\r\n                }\r\n            </div>   \r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport Utils from '../../utils/Utils';\r\n\r\nconst utils = new Utils();\r\n\r\nconst space = {\r\n    marginLeft: \"8px\"\r\n}\r\n\r\nexport default function Admin(props){\r\n    return  <div className=\"col-md-6 col-sm-6\">\r\n                <div className=\"laser-item shadow\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-7 col-sm-7\">\r\n                            <h5>Username</h5>\r\n                            <h4>{props.admin.username}</h4>\r\n                        </div>\r\n                        <div className=\"col-md-5 col-sm-5\">\r\n                            <h5>Phone Number</h5>\r\n                            <h5>{props.admin.phone_number}</h5>\r\n                            <br/>\r\n                            <h5>Priviledge</h5>\r\n                            <h4>{props.admin.priviledge} priviledge</h4>\r\n                        </div>\r\n                        <div className=\"col-md-7 col-sm-7\">\r\n                            <h5>Full Name</h5>\r\n                            <h4>{props.admin.firstname} {props.admin.lastname}</h4>\r\n                            <br/>\r\n                            <h5>Created</h5>\r\n                            <h5>{utils.getDate(props.admin.created)}</h5>\r\n                        </div>\r\n                        <div className=\"col-md-5 col-sm-5\">\r\n                            <br/>\r\n                            <br/>\r\n                            <br/>\r\n                            <button onClick={e => props.deleteClicked(e,props.admin)} className=\"laserbtn laser-red-bg laser-inline\">delete</button>\r\n                            <button style={space} onClick={e => props.editClicked(e,props.admin)} className=\"laserbtn laser-blue-bg laser-inline\">edit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n} ","import React, {Component} from \"react\";\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nimport Loader from '../../components/Loader';\r\nimport Action from '../Action';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nconst controls_style = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class Agents extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            username: \"\",\r\n            phone_number: \"\",\r\n            password: \"\",\r\n            password_again: \"\",\r\n            priviledge: \"\",\r\n            error: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.submitClicked = this.submitClicked.bind(this);\r\n        this.onFieldChanged = this.onFieldChanged.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async submitClicked(e){\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            error: \"\"\r\n        })\r\n\r\n        if(this.state.firstname.length<=0 || this.state.lastname.length<=0){\r\n            this.setState({\r\n                error: \"Please enter a valid first and last name\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.phone_number.length < 11){\r\n            this.setState({\r\n                error: \"Please enter a valid phone number\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.priviledge.length < 0){\r\n            this.setState({\r\n                error: \"Please enter a valid department\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.username.length < 0){\r\n            this.setState({\r\n                error: \"Please enter a valid Username\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password.length < 8 || this.state.password_again.length < 8){\r\n            this.setState({\r\n                error: \"Please enter a valid password with 8 characters or more\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password !== this.state.password_again){\r\n            this.setState({\r\n                error: \"Passwords dont match\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            firstname: this.state.firstname,\r\n            lastname: this.state.lastname,\r\n            phone_number: this.state.phone_number,\r\n            username: this.state.username,\r\n            priviledge: this.state.priviledge,\r\n            password: this.state.password,\r\n            password_again: this.state.password_again\r\n        }\r\n\r\n        const response = await API.createAdmin(data)\r\n        \r\n        if(response==\"error\"){\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred creating agent, Please try again later\"\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data){\r\n            this.hideLoading()\r\n            this.props.closeModalGetAgents();\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onFieldChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"AdminModal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Add Admin</h4>\r\n                    <br/>\r\n                    <h5 className=\"laser-red-text\">{ this.state.error ? this.state.error : \"\" }</h5>\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>User Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"username\" type=\"text\" name=\"username\" onChange={this.onFieldChanged} value={this.state.username} className=\"form-control bt-login-input\" placeholder=\"User Name\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>First Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"firstname\" type=\"text\" name=\"firstname\" onChange={this.onFieldChanged} value={this.state.firstname} className=\"form-control bt-login-input\" placeholder=\"First Name\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>Last Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"lastname\" type=\"text\" name=\"lastname\" onChange={this.onFieldChanged} value={this.state.lastname} className=\"form-control bt-login-input\" placeholder=\"Last Name\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Phone Number</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"phone_number\" type=\"phone\" name=\"phone_number\" onChange={this.onFieldChanged} value={this.state.phone_number} className=\"form-control bt-login-input\" placeholder=\"Phone Number\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Priviledge</h5></label>\r\n                            <select style={controls_style} className=\"form-control\" id=\"department\" name=\"department\" value={this.state.department} onChange={this.onFieldChanged}>\r\n                                <option>full_control</option>\r\n                                <option>view_control</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password\" type=\"password\" name=\"password\" onChange={this.onFieldChanged} value={this.state.password} className=\"form-control bt-login-input\" placeholder=\"Password\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password Again</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password_again\" type=\"password\" name=\"password_again\" onChange={this.onFieldChanged} value={this.state.password_again} className=\"form-control bt-login-input\" placeholder=\"Password Again\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-blue-bg laserbtn\" style={btn_style_left} onClick={e => this.submitClicked(e)}>create</button>\r\n                    <button className=\"laser-inline grey-bg laserbtn laser-black-text\" style={btn_style_right} onClick={this.props.closeModal}>cancel</button>\r\n\r\n                </ReactModal>\r\n\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nimport Loader from '../../components/Loader';\r\nimport Action from '../Action';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nconst controls_style = {\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class EditAdmin extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            username: \"\",\r\n            phone_number: \"\",\r\n            password: \"\",\r\n            password_again: \"\",\r\n            priviledge: \"\",\r\n            error: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.submitClicked = this.submitClicked.bind(this);\r\n        this.onFieldChanged = this.onFieldChanged.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async submitClicked(e){\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            error: \"\"\r\n        })\r\n\r\n        if(this.state.firstname.length<=0 || this.state.lastname.length<=0){\r\n            this.setState({\r\n                error: \"Please enter a valid first and last name\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.phone_number.length < 11){\r\n            this.setState({\r\n                error: \"Please enter a valid phone number\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.priviledge.length < 0){\r\n            this.setState({\r\n                error: \"Please enter a valid department\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.username.length < 0){\r\n            this.setState({\r\n                error: \"Please enter a valid Username\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password.length < 8 || this.state.password_again.length < 8){\r\n            this.setState({\r\n                error: \"Please enter a valid password with 8 characters or more\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        if(this.state.password !== this.state.password_again){\r\n            this.setState({\r\n                error: \"Passwords dont match\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            firstname: this.state.firstname,\r\n            lastname: this.state.lastname,\r\n            phone_number: this.state.phone_number,\r\n            username: this.state.username,\r\n            priviledge: this.state.priviledge,\r\n            password: this.state.password,\r\n            password_again: this.state.password_again\r\n        }\r\n\r\n        const response = await API.createAdmin(data)\r\n        \r\n        if(response==\"error\"){\r\n            this.setState({\r\n                action: \"message\",\r\n                action_message: \"An error occurred creating agent, Please try again later\"\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        if(response&&response.data){\r\n            this.hideLoading()\r\n            this.props.closeModalGetAgents();\r\n        }\r\n        else{\r\n            this.setState({\r\n                action: \"close\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onFieldChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"AdminModal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Add Admin</h4>\r\n                    <br/>\r\n                    <h5 className=\"laser-red-text\">{ this.state.error ? this.state.error : \"\" }</h5>\r\n                    <br/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>User Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"username\" type=\"text\" name=\"username\" onChange={this.onFieldChanged} value={this.state.username} className=\"form-control bt-login-input\" placeholder=\"User Name\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>First Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"firstname\" type=\"text\" name=\"firstname\" onChange={this.onFieldChanged} value={this.state.firstname} className=\"form-control bt-login-input\" placeholder=\"First Name\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"category\"><h5>Last Name</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"lastname\" type=\"text\" name=\"lastname\" onChange={this.onFieldChanged} value={this.state.lastname} className=\"form-control bt-login-input\" placeholder=\"Last Name\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Phone Number</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"phone_number\" type=\"phone\" name=\"phone_number\" onChange={this.onFieldChanged} value={this.state.phone_number} className=\"form-control bt-login-input\" placeholder=\"Phone Number\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Priviledge</h5></label>\r\n                            <select style={controls_style} className=\"form-control\" id=\"department\" name=\"department\" value={this.state.department} onChange={this.onFieldChanged}>\r\n                                <option>full_control</option>\r\n                                <option>view_control</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password\" type=\"password\" name=\"password\" onChange={this.onFieldChanged} value={this.state.password} className=\"form-control bt-login-input\" placeholder=\"Password\"/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <br/>\r\n                            <label htmlFor=\"category\"><h5>Password Again</h5></label>\r\n                            <input required autoComplete=\"off\" id=\"password_again\" type=\"password\" name=\"password_again\" onChange={this.onFieldChanged} value={this.state.password_again} className=\"form-control bt-login-input\" placeholder=\"Password Again\"/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-blue-bg laserbtn\" style={btn_style_left} onClick={e => this.submitClicked(e)}>create</button>\r\n                    <button className=\"laser-inline grey-bg laserbtn laser-black-text\" style={btn_style_right} onClick={this.props.closeModal}>cancel</button>\r\n\r\n                </ReactModal>\r\n\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport Admin from \"./Admin\"\r\nimport { Link } from 'react-router-dom'\r\nimport AddAdmin from \"./AddAdmin\"\r\nimport EditAdmin from \"./EditAdmin\"\r\nimport ConfirmAction from '../ConfirmAction';\r\nimport Loader from '../../components/Loader';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nconst controls_style = {\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class Admins extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            admins: [],\r\n            selected_admin: {},\r\n            showConfirm: false,\r\n            showAddAdmin: false,\r\n            showDeleteAdmin: false,\r\n            showEditAdmin: false,\r\n            confirmMessage: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.getAdmins = this.getAdmins.bind(this);\r\n        this.deleteAdmin = this.deleteAdmin.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.closeModalGetAdmins = this.closeModalGetAdmins.bind(this);\r\n        this.showDeleteAdmin = this.showDeleteAdmin.bind(this);\r\n        this.showAddAdmin = this.showAddAdmin.bind(this);\r\n        this.showEditAdmin = this.showEditAdmin.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async getAdmins(){\r\n        this.showLoading();\r\n\r\n        const response = await(API.getAdmins());\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data && response.data.length > 0){\r\n            this.setState({\r\n                admins: response.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async deleteAdmin(admin){\r\n        this.showLoading();\r\n\r\n        const response = await(API.deleteAdmin(this.state.selected_admin._id));\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data){\r\n            this.closeModal();\r\n            this.setState(state => {\r\n                var admins = state.admins;\r\n\r\n                admins.splice(admins.indexOf(state.selected_admin),1);\r\n\r\n                return {\r\n                    admins: admins,\r\n                    selected_admin: {}\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            showConfirm: false,\r\n            showAddAdmin: false,\r\n            showDeleteAdmin: false,\r\n            showEditAdmin: false\r\n        })\r\n    }\r\n\r\n    closeModalGetAdmins(){\r\n        this.setState({\r\n            showConfirm: false,\r\n            showAddAdmin: false,\r\n            showDeleteAdmin: false,\r\n            showEditAdmin: false\r\n        });\r\n        \r\n        this.getAdmins();\r\n    }\r\n\r\n    showDeleteAdmin(e,admin){\r\n        e.preventDefault();\r\n        this.setState({\r\n            selected_admin: admin,\r\n            showDeleteAdmin: true,\r\n            confirmMessage: \"Are you sure you want to delete admin \" +admin.firstname +\"'s profile? This cant be undone.\"\r\n        })\r\n    }\r\n\r\n    showAddAdmin(){\r\n        this.setState({\r\n            showAddAdmin:  true\r\n        })\r\n    }\r\n\r\n    showEditAdmin(e,admin){\r\n        e.preventDefault();\r\n        this.setState({\r\n            showEditAdmin:  true,\r\n            selected_admin: admin\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAdmins();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"laser-parent-div\">\r\n                <div className=\"laser-top-panel\">\r\n                    <h4 className=\"laser-inline\">Laser Emergency Admins</h4>\r\n                    <div className=\"laser-controls\">\r\n                        <Link style={controls_style} to={'/'} className=\"nav-link white-text link laser-inline laser-150-width\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">View Map</button>\r\n                        </Link>\r\n\r\n                        <button onClick={this.showAddAdmin} style={controls_style} className=\"laser-inline laser-150-width laserbtn laser-white_border-blue-bg\">Add Admin</button>\r\n                        <Link style={controls_style} to={'/agents'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Agents</button>\r\n                        </Link>\r\n                        <Link style={controls_style} to={'/departments'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Departments</button>\r\n                        </Link>\r\n                        <button onClick={e => this.props.logout(e)} className=\"form-control laser-inline laser-100-width laser-grey-bg laserbtn pull-right\">logout</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        {\r\n                            this.state.admins.map(admin => {\r\n                                return <Admin admin={admin} key={admin._id} deleteClicked={this.showDeleteAdmin} editClicked={this.showEditAdmin} />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <Loader isLoading={this.state.isLoading}/>\r\n                \r\n                {\r\n                    this.state.showAddAdmin ? <AddAdmin closeModal={this.closeModal} departments={this.state.departments} closeModalGetAdmins={this.closeModalGetAdmins} /> : \"\"\r\n                }\r\n\r\n                {\r\n                    this.state.showDeleteAdmin ? <ConfirmAction  yesClicked={this.deleteAdmin} noClicked={this.closeModal} message={this.state.confirmMessage} /> : \"\"\r\n                }\r\n            </div>   \r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport Utils from '../../utils/Utils';\r\n\r\nconst utils = new Utils();\r\n\r\nconst marginLeft = {\r\n    marginLeft: \"16px\"\r\n}\r\n\r\nexport default function Department(props){\r\n    return  <div className=\"col-md-4 col-sm-4\">\r\n                <div className=\"laser-item shadow\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-7 col-sm-7\">\r\n                            <h4 className=\"laser-black-text\">{props.department.name}</h4>\r\n                        </div>\r\n                        <div className=\"col-md-5 col-sm-5\">\r\n                            <h5>{utils.getDate(props.department.created)}</h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-offset-6 col-md-6 col-sm-offset-6 col-sm-6\">\r\n                            <button onClick={e => props.deleteClicked(e, props.department)} className=\"laserbtn laser-red-bg laser-inline\">delete</button>\r\n                            <button style={marginLeft} onClick={e => props.editClicked(e, props.department)} className=\"laserbtn laser-blue-bg laser-inline\">edit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n} ","import React, {Component} from \"react\";\r\n\r\nimport ReactModal from 'react-modal';\r\n\r\nimport Loader from '../../components/Loader';\r\nimport Action from '../Action';\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nReactModal.setAppElement('#main');\r\n\r\nconst btn_style_left = {\r\n    marginLeft: \"16px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nconst btn_style_right = {\r\n    marginLeft: \"8px\",\r\n    marginRight: \"16px\"\r\n}\r\n\r\nexport default class AddDepartment extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            action: \"loading\",\r\n            action_message: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n        this.onFieldChanged = this.onFieldChanged.bind(this);\r\n        this.saveDepartment = this.saveDepartment.bind(this)\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async saveDepartment(){\r\n        if(this.state.name.length > 0){\r\n            const response = await API.createDepartment(this.state.name)\r\n        \r\n            if(response==\"error\"){\r\n                this.setState({\r\n                    action: \"message\",\r\n                    action_message: \"An error occurred creating department, Please try again later\"\r\n                })\r\n\r\n                return;\r\n            }\r\n\r\n            if(response&&response.data){\r\n                this.props.closeModal();\r\n                this.props.getDepartments();\r\n            }\r\n            else{\r\n                this.setState({\r\n                    action: \"close\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onFieldChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ReactModal \r\n                    isOpen={true}\r\n                    className=\"ConfirmModal\"\r\n                    overlayClassName=\"Overlay\"\r\n                    contentLabel=\"Minimal Modal Example\">\r\n                    <h4 className=\"text-center blue-text\">Add Department</h4>\r\n                    <label className=\"laser-white-text\" htmlFor=\"category\"><h5>Department Name</h5></label>\r\n                    <input required autoComplete=\"off\" id=\"name\" type=\"text\" name=\"name\" onChange={this.onFieldChanged} value={this.state.name} className=\"form-control bt-login-input\" placeholder=\"Department Name\"/>\r\n                    <br/>\r\n                    <button className=\"laser-inline laser-blue-bg laserbtn\" style={btn_style_left} onClick={this.saveDepartment}>save</button>\r\n                    <button className=\"laser-inline grey-bg laserbtn\" style={btn_style_right} onClick={this.props.closeModal}>cancel</button>\r\n                </ReactModal>\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Loader from '../../components/Loader';\r\nimport Department from './Department'\r\nimport ConfirmAction from '../ConfirmAction';\r\nimport AddDepartment from './AddDepartment'\r\n\r\nimport * as API from '../../api/Api';\r\n\r\nconst controls_style = {\r\n    marginLeft:\"8px\",\r\n    marginRight: \"8px\"\r\n}\r\n\r\nexport default class Departments extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            departments: [],\r\n            selected_department: {},\r\n            showConfirm: false,\r\n            showAddDepartment: false,\r\n            showDeleteDepartment: false,\r\n            showEditDepartment: false,\r\n            confirmMessage: \"\",\r\n            isLoading: false\r\n        }\r\n\r\n        this.getDepartments = this.getDepartments.bind(this);\r\n        this.deleteDepartment = this.deleteDepartment.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.showDeleteDepartment = this.showDeleteDepartment.bind(this);\r\n        this.showAddDepartment = this.showAddDepartment.bind(this);\r\n        this.showEditDepartment = this.showEditDepartment.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    async getDepartments(){\r\n        this.showLoading();\r\n\r\n        const response = await(API.getDepartments());\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data && response.data.length > 0){\r\n            this.setState({\r\n                departments: response.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async deleteDepartment(){\r\n        this.showLoading();\r\n        \r\n        const response = await(API.deleteDepartment(this.state.selected_department._id));\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n            return;\r\n        }\r\n\r\n        if(response && response.data){\r\n            this.closeModal();\r\n            this.setState(state => {\r\n                var departments = state.departments;\r\n\r\n                departments.splice(departments.indexOf(state.selected_department),1);\r\n\r\n                return {\r\n                    departments: departments,\r\n                    selected_department: {}\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    showDeleteDepartment(e, department){\r\n        this.setState({\r\n            selected_department: department,\r\n            showDeleteDepartment: true,\r\n            confirmMessage: \"Are you sure you want to delete the selected department?\"\r\n        })\r\n        e.preventDefault();\r\n    }\r\n\r\n    showAddDepartment(){\r\n        this.setState({\r\n            showAddDepartment:  true\r\n        })\r\n    }\r\n\r\n    showEditDepartment(e, department){\r\n        this.setState({\r\n            showEditDepartment:  true,\r\n            selected_department: department\r\n        })\r\n        e.preventDefault();\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            showConfirm: false,\r\n            showAddDepartment: false,\r\n            showDeleteDepartment: false,\r\n            showEditDepartment: false\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getDepartments();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"laser-parent-div\">\r\n                <div className=\"laser-top-panel\">\r\n                    <h4 className=\"laser-inline\">Laser Emergency Admin - Departments</h4>\r\n                    <div className=\"laser-controls\">\r\n                        <Link style={controls_style} to={'/'} className=\"nav-link white-text link laser-inline laser-150-width\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">View Map</button>\r\n                        </Link>\r\n\r\n                        <Link style={controls_style} to={'/agents'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Agents</button>\r\n                        </Link>\r\n                        <Link style={controls_style} to={'/admins'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Admins</button>\r\n                        </Link>\r\n                        <Link style={controls_style} to={'/departments'} className=\"nav-link white-text link\">\r\n                            <button className=\"laserbtn laser-white_border-blue-bg\">Departments</button>\r\n                        </Link>\r\n                        <button style={controls_style} onClick={this.showAddDepartment} className=\"laser-inline laser-150-width laserbtn laser-white_border-blue-bg\">Add Department</button>\r\n                        <button onClick={e => this.props.logout(e)} className=\"form-control laser-inline laser-100-width laser-grey-bg laserbtn pull-right\">logout</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        <br/>\r\n                        {\r\n                            this.state.departments.map(department => {\r\n                                return <Department key={department._id} department={department} deleteClicked={this.showDeleteDepartment} editClicked={this.showEditDepartment} />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {\r\n                    this.state.showAddDepartment ? <AddDepartment getDepartments={this.getDepartments} closeModal={this.closeModal}/> : \"\"\r\n                }\r\n                {\r\n                    this.state.showDeleteDepartment ? <ConfirmAction  yesClicked={this.deleteDepartment} noClicked={this.closeModal} message={this.state.confirmMessage} /> : \"\"\r\n                }\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, {Component} from 'react'\r\n\r\nimport Loader from '../components/Loader';\r\n\r\n//Our Auth Service\r\nimport AuthHelperMethods from '../auth/AuthHelperMethods';\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nconst zero_margin = {\r\n    marginBottom: \"0px\",\r\n    marginTop: \"0px\"\r\n}\r\n\r\nexport default class Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state= {\r\n            username: \"\",\r\n            password: \"\",\r\n            error: \"\",\r\n            isLoading: false\r\n        }\r\n        \r\n        this.submitClicked = this.submitClicked.bind(this);\r\n        this.onFieldChanged = this.onFieldChanged.bind(this);\r\n        this.showLoading = this.showLoading.bind(this);\r\n        this.hideLoading = this.hideLoading.bind(this);\r\n    }\r\n\r\n    showLoading(){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n    }\r\n\r\n    hideLoading(){\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n    \r\n    async submitClicked(e, item){\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            error: \"\"\r\n        })\r\n\r\n        if(this.state.username.length<=0 || this.state.password.length<=0){\r\n            this.setState({\r\n                error: \"Please make sure all fields are completed\"\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        this.showLoading();\r\n\r\n        const response = await(Auth.login(this.state.username, this.state.password));\r\n\r\n        this.hideLoading();\r\n\r\n        if(response===\"error\"){\r\n            //show error message\r\n\r\n            this.setState({\r\n                error: \"An error occurred login you in. Please try again later.\"\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        if(response && response.data){\r\n            this.props.login();\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onFieldChanged(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"laser-login-bg\">\r\n                <div className=\"laser-login-div laser-shadow\">\r\n                    <h2 className=\"bt-blue-text laser-white-text\" style={zero_margin}>Admin</h2>\r\n                    <h2 className=\"bt-blue-text laser-white-text\" style={zero_margin}>Login</h2>\r\n                    <br/>\r\n                    <br/>\r\n                    <h5 className=\"laser-red-text\">{ this.state.error ? this.state.error : \"\" }</h5>\r\n                    <br/>\r\n                    <label className=\"laser-white-text\" htmlFor=\"category\"><h5>User Name</h5></label>\r\n                    <input required autoComplete=\"off\" id=\"username\" type=\"text\" name=\"username\" onChange={this.onFieldChanged} value={this.state.username} className=\"form-control bt-login-input\" placeholder=\"User Name\"/>\r\n                    <br/>\r\n                    <label className=\"laser-white-text\" htmlFor=\"category\"><h5>Password</h5></label>\r\n                    <input required autoComplete=\"off\" id=\"password\" type=\"password\" name=\"password\" onChange={this.onFieldChanged} value={this.state.password} className=\"form-control bt-login-input\" placeholder=\"Password\"/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"laser-blue-bg laserbtn\" onClick={this.submitClicked}>CONTINUE</button>    \r\n                </div>\r\n                <Loader isLoading={this.state.isLoading}/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport NewApp from \"./NewApp\";\r\nimport Agents from \"./components/agents/Agents\";\r\nimport Admins from \"./components/agents/Admins\";\r\nimport Departments from \"./components/agents/Departments\";\r\nimport Login from \"./components/Login\"\r\n\r\nimport AuthHelperMethods from './auth/AuthHelperMethods';\r\n\r\nconst Auth = new AuthHelperMethods();\r\n\r\nclass Laser extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLogin : false\r\n        }\r\n\r\n        this.logout = this.logout.bind(this);\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    logout = () => {\r\n        Auth.logout();\r\n\r\n        this.setState({\r\n            isLogin: true\r\n        })\r\n    }\r\n\r\n    login = () => {\r\n        this.setState({\r\n            isLogin: false\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <Route path=\"/\" exact render={(props) => (\r\n                        Auth.loggedIn() === true\r\n                            ? <NewApp {...props} logout={this.logout}/>\r\n                            : <Redirect to='/login' login={this.login} />\r\n                        )} />\r\n\r\n                    <Route path=\"/agents\" exact render={(props) => (\r\n                        Auth.loggedIn() === true\r\n                            ?  Auth.getPriviledge() === \"full_control\" ? <Agents {...props} logout={this.logout} /> : <Redirect to='/' login={this.login} />\r\n                            : <Redirect to='/login' login={this.login} />\r\n                        )}/>\r\n\r\n                    <Route path=\"/admins\" exact render={(props) => (\r\n                        Auth.loggedIn() === true\r\n                            ?  Auth.getPriviledge() === \"full_control\" ? <Admins {...props} logout={this.logout} /> : <Redirect to='/' login={this.login} />\r\n                            : <Redirect to='/login' login={this.login} />\r\n                        )}/>\r\n\r\n                    <Route path=\"/departments\" exact render={(props) => (\r\n                        Auth.loggedIn() === true\r\n                            ? Auth.getPriviledge() === \"full_control\" ? <Departments {...props} logout={this.logout}/> : <Redirect to='/' login={this.login} />\r\n                            : <Redirect to='/login' login={this.login} />\r\n                        )}/>\r\n\r\n                    <Route path=\"/login\" exact render={(props) => (\r\n                        Auth.loggedIn() === false\r\n                            ? <Login {...props} login={this.login} />\r\n                            : <Redirect to='/' {...props} logout={this.logout} />\r\n                        )} />\r\n                    {\r\n                        this.state.isLogin==true ? <Redirect to='/login' login={this.login} /> : \"\"\r\n                    }\r\n                </Router>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Laser;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Laser from './Laser';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Laser />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}